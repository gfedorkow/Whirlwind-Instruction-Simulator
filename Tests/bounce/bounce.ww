           ; bouncing ball demo
           ; guy fedorkow, Jan 2019
           ; copied from http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/whirlwind/R-series/R-196_Programming_for_Whirlwind_I_Jun51.pdf
           ; pdf page 62
           ; translated into assembler with labels for variables and addresses
           ; updated to use the 1954 I/O instruction set for display

           .dbwgt Vy
           .dbwgt R
           .dbwgt Xi
           .dbwgt Yi

           .jumpto main
           .org 40
     main: ca XI                    ;   Initialize X axis
           ts Xi
           ca YI                    ;   initialize Y axis
           ts Yi
           ca VYi                   ;  Initialize Y Velocity                           ; guy: this was the designated loop return in the exemplar, but that's clearly wrong
           ts Vy

     loop: ca Xi                    ;  fetch current X value
           ad Vxdt                  ; add the velocity increment
           ;       Qh Xi            ; @201                                             ; output x axis
           ts Xi                    ;   store the next X back to Xi

           ca Yha                   ; fetch the y (horizontal) axis line
           ;       Qd Yha           ; @212                                             ; output the y axis point
           si 0o600                 ; select point                                     ; the Y deflection is Yha, picked up from ACC
           ca Xi                    ; put x in ACC
           rc 0                     ; output a point to the display

           ; postitive falls through, negative takes the branch
           cs Yi                    ; compare current Y to Y Axis                      ; guy - cs seems like the wrong op code, it assumes Y Axis is zero
           cp nobounce              ;@17 branch if it's not time to bounce
           cs Vy                    ; fetch velocity to see if we're already starting to bounce
           cp nobounce              ; branch if velocity is already positive [instruction added by guy]

           ; do a bounce by multiplying by the loss factor, reversing the velocity, and setting the
           ; Y position to equal the axis.
           .print "bounce Xi=%d Yi=%d", Xi, Yi
   bounce: ca Vy                    ; @203                                             ; fetch Y velocity
           mr R                     ; @204                                             ; multiply by bounce loss and reverse the sign
           ts Vy                    ; @203                                             ; store the result in Y Velocity
           ; the following two instructions added by guy
           ca Yha                   ; fetch the Y Axis (better be zero until the bug above is fixed)
           ts Yi
           sp continue              ;skip the step adding negative gravitation acceleration

           .print "nobounce Xi=%d Yi=%d", Xi, Yi
 nobounce: ca Vy                    ; for no bounce, fetch the current velocity
           su Gdt                   ; subtract gravitational constant
           ts Vy                    ; store the result in Y Velocity
 continue: mr dt                    ; multiply velocity by time increment
           ad Yi                    ; add the incremental distance to the current Y value
           ;       qd Yi            ; @202                                             ; output the Y value for the ball (same X as last time)
           ts Yi                    ; @202                                             ;guy: emulate store that was part of qd
           si 0o600                 ; new-style i/o instruction                        ; set the Y coord now in the ACC
           ca Xi                    ; put X coord in ACC
           rc 0                     ; output a point to the display

           cm Xi                    ; retrieve current X coord
           su Xul                   ; compare to X Upper Limit
           cp loop                  ; @5                                               ; branch to next iteration
           sp main                  ; @1                                               ; start all over to refresh the display

           .org 0o201
       Xi: .word 0                  ; current i'th value of x
       Yi: .word 0                  ; current i'th value of y
       Vy: .word 0                  ; current i'th value of velocity of y
        R: .word 1.07777            ; "coefficient of Restitution", i.e., energy loss during the bounce.  This number should be negative to reverse the ball's direction
      Gdt: .word 0.01000            ; constant graviational constant times delta t
       dt: .word 0.40000            ; constant time step (delta t)
       XI: .word 1.17777            ; (-0.600)                                         ; constant starting position for X
       YI: .word 0.60000            ; constant starting position for Y
      VYi: .word 0.00000            ; constant starting velocity for Y
     Vxdt: .word 0.00600            ; constant X velocity times delta t
      Xul: .word 0.60000            ; constant X upper limit (i.e., the right-hand end of the simulation)
      Yha: .word 0                  ; constant Y value of horizontal axis

