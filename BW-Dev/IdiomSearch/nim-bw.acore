
; *** Core Image ***
%File: 102766757_fb131-247-12_12-4.7ch/102766757_fb131-247-12_12-4_gs001_fb131-247-12.tcore
%TapeID: _fb131-247-12+_fb
%JumpTo 0o705
@C0000: 0000000 0000001  None    None    None    None    None    None   
@C0040: 0000006 0000005 0000000 0000007 0000255 0000265 0000003 0000002 
@C0050: 0000275 0000305 0000001 0000317 0003777 0000000 0000000 0000002 
@C0060: 0000000 0000004 0000000 0000000 0051071 0012075 0060024 0024052 
@C0070: 0021010 0071040 0075050 0002010 0034060 0070054 0016040 0002024 
@C0100: 0010050 0006012 0010046 0060030 0010040 0050002 0010064 0006070 
@C0110: 0002021 0151077 0051020 0071034 0075060 0030064 0024006 0040016 
@C0120: 0044006 0040014 0060030 0012031 0010052 0060016 0010050 0006074 
@C0130: 0002010 0046060 0030010 0040050 0002010 0064006 0070002 0021020 
@C0140: 0151077 0051071 0052075 0060016 0024010 0070060 0074002 0010014 
@C0150: 0012010 0014044 0044002 0064006 0044021 0010071 0054075 0044002 
@C0160: 0006012 0002010 0040024 0052010 0006030 0060040 0050002 0024010 
@C0170: 0070660 0074002 0121051 0000000 0000000 0000000 0000000 0000001 
@C0200: 0000000 0000000 0000000 0000000 0001217 0000005 0000000 0000012 
@C0210: 0000011 0000327 0000337 0000000 0000000 0003146 0006314 0011463 
@C0220: 0014631 0020000 0023146 0131463 0154631 0031463 0054631 0046314 
@C0230: 0006314 0146314 0106314 0000010 0000227 0000224 0000223 0000327 
@C0240: 0000317 0000000 0000006 0000005 0000004 0000000 0000000 0000000 
@C0250: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0260: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0270: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0300: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0310: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0320: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0330: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0340: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0350: 0000300 0014000 0070354 0074705 0100173 0114000 0070361 0130176 
@C0360: 0074410 0100177 0114000 0070401 0074653 0000010 0100002 0040243 
@C0370: 0110001 0040242 0114001 0114001 0040244 0100003 0040057 0130173 
@C0400: 0074705 0130174 0000004 0100174 0114057 0070410 0074653 0076650 
@C0410: 0000336 0014000 0040241 0114043 0070416 0074673 0000337 0014000 
@C0420: 0040061 0160006 0040062 0114210 0070426 0074673 0100062 0144207 
@C0430: 0155017 0040062 0100061 0154011 0160011 0040061 0114210 0070441 
@C0440: 0074673 0100061 0110062 0040062 0100176 0114000 0070513 0100176 
@C0450: 0114001 0110044 0044454 0100062 0040000 0130060 0114043 0070705 
@C0460: 0100000 0040173 0040174 0040177 0040176 0040175 0040060 0074705 
@C0470: 0100241 0110053 0044475 0044502 0044510 0100000 0114000 0070501 
@C0500: 0074673 0100062 0040000 0100241 0110044 0044507 0044511 0100000 
@C0510: 0114000 0040000 0074705 0100062 0114243 0070470 0074673 0050530 
@C0520: 0050533 0050537 0050552 0050613 0130613 0130613 0130613 0130613 
@C0530: 0100000 0040620 0130533 0100000 0044555 0130537 0130537 0100000 
@C0540: 0044556 0044557 0044561 0044565 0044567 0044571 0044615 0130552 
@C0550: 0130552 0130552 0100000 0044563 0044616 0100000 0040000 0100000 
@C0560: 0114620 0040000 0070565 0130000 0074557 0100000 0110620 0040000 
@C0570: 0100620 0114000 0070614 0130555 0130556 0130557 0130561 0130563 
@C0600: 0130565 0130567 0130571 0130616 0130615 0130042 0100042 0114043 
@C0610: 0070555 0100000 0040042 0074000 0100000 0040000 0130000 0074573 
@C0620: 0000000 0050624 0050640 0000225 0100000 0044626 0100000 0171001 
@C0630: 0024000 0171011 0024000 0171026 0070637 0130626 0074626 0130640 
@C0640: 0074000 0100000 0040327 0040330 0040331 0040332 0040333 0040334 
@C0650: 0040335 0040336 0075240 0050672 0100000 0040173 0040177 0040176 
@C0660: 0040174 0040060 0040317 0040320 0040321 0040322 0040323 0040324 
@C0670: 0040325 0040326 0074000 0076450 0100174 0114001 0040174 0100176 
@C0700: 0114000 0070705 0114052 0040176 0074705 0076475 0046314 0106314 
@C0710: 0071463 0000000 0000000 0076475 0071463 0106314 0000000 0123146 
@C0720: 0000000 0076475 0057777 0106314 0000000 0123146 0000000 0076475 
@C0730: 0046314 0123146 0071463 0000000 0000000 0076475 0006314 0106314 
@C0740: 0031463 0000000 0000000 0076475 0031463 0106314 0000000 0123146 
@C0750: 0000000 0076475 0020000 0106314 0000000 0120000 0000000 0076475 
@C0760: 0006314 0106314 0000000 0123146 0000000 0076475 0006314 0123146 
@C0770: 0014631 0000000 0000000 0076475 0023146 0123146 0031463 0000000 
@C1000: 0000000 0076475 0020000 0120000 0023146 0123146 0000000 0076475 
@C1010: 0014631 0123146 0020000 0120000 0040000 0076475 0146314 0106314 
@C1020: 0171463 0000000 0000000 0076475 0171463 0106314 0000000 0123146 
@C1030: 0000000 0076475 0146314 0106314 0000000 0123146 0000000 0076475 
@C1040: 0106314 0106314 0131463 0000000 0000000 0076475 0111463 0123146 
@C1050: 0126314 0000000 0000000 0076475 0131463 0106314 0000000 0120000 
@C1060: 0000000 0076475 0106314 0106314 0000000 0120000 0000000 0076475 
@C1070: 0106314 0120000 0111463 0123146 0000000 0076475 0126314 0123146 
@C1100: 0131463 0120000 0040000 0076475 0046314 0006314 0071463 0000000 
@C1110: 0000000 0076475 0071463 0006314 0000000 0023146 0000000 0076475 
@C1120: 0057777 0006314 0000000 0023146 0000000 0076475 0046314 0006314 
@C1130: 0000000 0023146 0000000 0076475 0006314 0006314 0031463 0000000 
@C1140: 0000000 0076475 0031463 0006314 0000000 0023146 0000000 0076475 
@C1150: 0020000 0006314 0000000 0023146 0000000 0076475 0146314 0006314 
@C1160: 0171463 0000000 0000000 0076475 0146314 0023146 0157777 0000000 
@C1170: 0000000 0076475 0171463 0006314 0000000 0023146 0000000 0076475 
@C1200: 0157777 0014631 0000000 0023146 0000000 0076475 0146314 0006314 
@C1210: 0000000 0023146 0000000 0076475 0106314 0006314 0131463 0000000 
@C1220: 0000000 0076475 0106314 0023146 0131463 0000000 0000000 0076475 
@C1230: 0120000 0006314 0000000 0023146 0000000 0100207 0041241 0074641 
@C1240: 0074517 0000000 0000255 0000337 0000327 0076325 0051250 0051253 
@C1250: 0100000 0040213 0131253 0100000 0040214 0100213 0041276 0041304 
@C1260: 0041312 0110222 0041300 0041306 0041320 0100214 0041277 0041313 
@C1270: 0041321 0110220 0041305 0041315 0041323 0076475 0000000 0000000 
@C1300: 0000000 0000000 0000000 0076475 0000000 0000000 0000000 0000000 
@C1310: 0000000 0076475 0000000 0000000 0000000 0000000 0000000 0076475 
@C1320: 0000000 0000000 0000000 0000000 0000000 0076377 0051330 0051333 
@C1330: 0100000 0040213 0131333 0100000 0040214 0100213 0041357 0041365 
@C1340: 0110222 0041361 0041375 0114215 0041373 0100214 0110215 0041366 
@C1350: 0041374 0110215 0041360 0041376 0110215 0041370 0076475 0000000 
@C1360: 0000000 0000000 0000000 0000000 0076475 0000000 0000000 0000000 
@C1370: 0000000 0000000 0076475 0000000 0000000 0000000 0000000 0000000 
@C1400: 0076377 0051403 0051406 0100000 0040213 0131406 0100000 0040214 
@C1410: 0100213 0041461 0041467 0110220 0041445 0041471 0110215 0041437 
@C1420: 0110215 0041441 0041447 0041453 0100214 0041440 0041454 0041462 
@C1430: 0041470 0110220 0041456 0041464 0041472 0041446 0076475 0000000 
@C1440: 0000000 0000000 0000000 0000000 0076475 0000000 0000000 0000000 
@C1450: 0000000 0000000 0076475 0000000 0000000 0000000 0000000 0000000 
@C1460: 0076475 0000000 0000000 0000000 0000000 0000000 0076475 0000000 
@C1470: 0000000 0000000 0000000 0000000 0076377 0051477 0051502 0100000 
@C1500: 0040213 0131502 0100000 0040214 0100213 0041545 0041567 0110216 
@C1510: 0041571 0041611 0041571 0110215 0041553 0041603 0041613 0110215 
@C1520: 0041575 0041605 0110216 0041561 0041577 0100214 0041546 0041554 
@C1530: 0041562 0110217 0041556 0041604 0041614 0110215 0041550 0041564 
@C1540: 0041570 0041576 0041606 0041612 0076475 0000000 0000000 0000000 
@C1550: 0000000 0000000 0076475 0000000 0000000 0000000 0000000 0000000 
@C1560: 0076475 0000000 0000000 0000000 0000000 0000000 0076475 0000000 
@C1570: 0000000 0000000 0000000 0000000 0076475 0000000 0000000 0000000 
@C1600: 0000000 0000000 0076475 0000000 0000000 0000000 0000000 0000000 
@C1610: 0076475 0000000 0000000 0000000 0000000 0000005 0076377 0051621 
@C1620: 0051624 0100000 0040213 0131624 0100000 0040214 0100213 0041662 
@C1630: 0110216 0041646 0041654 0110220 0041650 0041664 0100214 0041647 
@C1640: 0041655 0110220 0041651 0041657 0041663 0076475 0000000 0000000 
@C1650: 0000000 0000000 0000000 0076475 0000000 0000000 0000000 0000000 
@C1660: 0000000 0076475 0000000 0000000 0000000 0000000 0000000 0076377 
@C1670: 0051672 0051675 0100000 0040213 0131675 0100000 0040214 0100213 
@C1700: 0041561 0041603 0110215 0041575 0041605 0110216 0041577 0041611 
@C1710: 0110215 0041567 0041553 0041613 0110216 0041571 0041545 0100214 
@C1720: 0041570 0041546 0041554 0041562 0110217 0041556 0041564 0041604 
@C1730: 0041614 0110215 0041576 0041550 0041606 0041612 0075544 0051741 
@C1740: 0051744 0100000 0040213 0131744 0100000 0040214 0100213 0041567 
@C1750: 0041575 0041561 0110217 0041577 0041553 0110217 0041571 0041545 
@C1760: 0100214 0041570 0041546 0041554 0041562 0110220 0041576 0041550 
@C1770: 0041556 0041564 0100000 0041603 0041604 0041605 0041606 0041611 
@C2000: 0041612 0041613 0041614 0075544 0052006 0052011 0100000 0040213 
@C2010: 0132011 0100000 0040214 0100213 0042156 0110215 0042160 0042230 
@C2020: 0110220 0042164 0042172 0042232 0110215 0042166 0042174 0042206 
@C2030: 0100214 0042157 0042165 0042207 0042231 0110220 0042173 0042211 
@C2040: 0042233 0100000 0042200 0042201 0042202 0042214 0042215 0042217 
@C2050: 0042222 0042223 0042225 0042236 0042237 0042240 0042241 0042244 
@C2060: 0042245 0042246 0042247 0042252 0042253 0042254 0042255 0076155 
@C2070: 0052072 0052075 0100000 0040213 0132075 0100000 0040214 0100213 
@C2100: 0042156 0042172 0042222 0110216 0042160 0042174 0042230 0042252 
@C2110: 0110215 0042214 0042232 0042236 0042244 0042254 0110215 0042164 
@C2120: 0042200 0042240 0042246 0110216 0042166 0042202 0042206 0100214 
@C2130: 0042157 0042165 0042207 0042223 0042231 0042247 0110215 0042215 
@C2140: 0042233 0042245 0110216 0042217 0042237 0042255 0110215 0042173 
@C2150: 0042201 0042211 0042225 0042241 0042253 0076475 0000000 0000000 
@C2160: 0000000 0000000 0000000 0076475 0000000 0000000 0000000 0000000 
@C2170: 0000000 0076475 0000000 0000000 0000000 0000000 0000000 0076475 
@C2200: 0000000 0000000 0000000 0000000 0000000 0076475 0000000 0000000 
@C2210: 0000000 0000000 0000000 0076475 0000000 0000000 0000000 0000000 
@C2220: 0000000 0076475 0000000 0000000 0000000 0000000 0000000 0076475 
@C2230: 0000000 0000000 0000000 0000000 0000000 0076475 0000000 0000000 
@C2240: 0000000 0000000 0000000 0076475 0000000 0000000 0000000 0000000 
@C2250: 0000005 0076475 0000000 0000000 0000000 0000000 0000005 0076377 
@C2260: 0052262 0052265 0100000 0040213 0132265 0100000 0040214 0100213 
@C2270: 0041575 0041561 0110217 0041567 0041553 0110217 0041571 0041577 
@C2300: 0041545 0100214 0041570 0041546 0041554 0041562 0110220 0041576 
@C2310: 0041550 0041556 0041564 0100000 0041603 0041604 0041605 0041606 
@C2320: 0041611 0041612 0041613 0041614 0075544 0100227 0042613 0042616 
@C2330: 0042621 0042624 0042627 0042632 0042635 0042640 0042643 0042646 
@C2340: 0100223 0042614 0042617 0042622 0042625 0042630 0042633 0042636 
@C2350: 0042641 0042644 0042647 0100327 0114000 0072460 0114052 0072615 
@C2360: 0114052 0072620 0114052 0072623 0114052 0072626 0114052 0072631 
@C2370: 0114052 0072634 0114052 0072637 0114052 0072642 0076645 0132325 
@C2400: 0132353 0130042 0100042 0114046 0072417 0100000 0040042 0100234 
@C2410: 0046325 0132340 0132340 0130055 0100047 0114055 0072420 0076325 
@C2420: 0100000 0040055 0100000 0040042 0100234 0046325 0100235 0046340 
@C2430: 0130056 0100047 0114056 0072435 0076325 0100000 0040042 0040055 
@C2440: 0040056 0100234 0046325 0100236 0046340 0100237 0046353 0074350 
@C2450: 0052453 0074621 0000141 0074000 0074621 0000112 0130177 0074705 
@C2460: 0102614 0072465 0114225 0072377 0076612 0102614 0110225 0072377 
@C2470: 0076612 0074621 0000064 0130177 0074705 0052503 0052506 0052512 
@C2500: 0052517 0052611 0052525 0100000 0040200 0132506 0100000 0040201 
@C2510: 0132512 0132512 0100000 0040202 0132517 0132517 0132517 0100000 
@C2520: 0040203 0132525 0132525 0132525 0132525 0100000 0040206 0132611 
@C2530: 0132611 0132611 0132611 0132611 0100200 0000600 0100201 0024000 
@C2540: 0120202 0114000 0072552 0120203 0114000 0072560 0120206 0114000 
@C2550: 0072566 0076577 0100201 0110204 0040201 0114203 0072534 0076611 
@C2560: 0100200 0110204 0040200 0114202 0072534 0076611 0100201 0110204 
@C2570: 0040201 0100200 0110204 0040200 0114202 0072534 0076611 0100200 
@C2600: 0110204 0040200 0100201 0114204 0040201 0100200 0114202 0072534 
@C2610: 0076611 0074000 0075246 0000000 0000000 0075326 0000000 0000000 
@C2620: 0075401 0000000 0000000 0075475 0000000 0000000 0075617 0000000 
@C2630: 0000000 0075670 0000000 0000000 0075737 0000000 0000000 0076004 
@C2640: 0000000 0000000 0076070 0000000 0000000 0076260 0000000 0000000 
@C2650: 0077552 0000255 0076655 0000255 0076700 0052660 0052677 0132677 
@C2660: 0100000 0046664 0046667 0132667 0100000 0040347 0100347 0110000 
@C2670: 0040347 0132667 0130042 0114040 0072666 0100000 0040042 0074000 
@C2700: 0100347 0114000 0072454 0100000 0040054 0040327 0040330 0040331 
@C2710: 0040332 0040333 0040334 0040335 0040336 0100242 0042720 0074517 
@C2720: 0000000 0000255 0000265 0000337 0077552 0000265 0100000 0040042 
@C2730: 0040275 0100265 0170011 0072767 0132731 0130042 0114043 0072731 
@C2740: 0100000 0040042 0132730 0132767 0132732 0100045 0046731 0130054 
@C2750: 0114040 0072726 0100000 0040054 0100050 0046730 0046767 0100210 
@C2760: 0046732 0100000 0040304 0100057 0110052 0042772 0076771 0130275 
@C2770: 0076734 0074517 0000000 0000275 0000305 0000337 0077552 0000305 
@C3000: 0100000 0040042 0040337 0040340 0040341 0040342 0040343 0040344 
@C3010: 0040345 0040346 0040245 0040246 0040247 0040250 0040251 0040252 
@C3020: 0040253 0040254 0040314 0076655 0000305 0100347 0114000 0073531 
@C3030: 0100305 0114000 0073036 0103030 0044245 0133034 0133030 0130042 
@C3040: 0114040 0073030 0100000 0040042 0100051 0047030 0100245 0103046 
@C3050: 0047034 0100245 0114051 0110052 0043063 0100245 0047057 0104000 
@C3060: 0110052 0040347 0077355 0000000 0100246 0114000 0073114 0100000 
@C3070: 0040347 0100327 0047074 0047077 0100000 0073100 0113067 0040000 
@C3100: 0133071 0130042 0114043 0073071 0100211 0047071 0100000 0040042 
@C3110: 0133051 0133055 0133064 0077051 0103046 0047051 0047055 0110052 
@C3120: 0047064 0100211 0047404 0100000 0040347 0100265 0073142 0133125 
@C3130: 0133143 0130042 0114043 0073125 0100000 0040042 0100045 0047143 
@C3140: 0047125 0077145 0117067 0040265 0077127 0100000 0040337 0100245 
@C3150: 0114051 0110052 0043157 0104057 0110052 0040042 0077411 0000000 
@C3160: 0133146 0133147 0103147 0047164 0100000 0114000 0073170 0077145 
@C3170: 0100212 0047146 0103046 0047147 0100245 0047176 0100000 0114337 
@C3200: 0073214 0077246 0077552 0000265 0133174 0133177 0103174 0047210 
@C3210: 0100000 0114000 0073304 0077174 0103443 0103214 0047423 0133442 
@C3220: 0103174 0047222 0100000 0047224 0104000 0110052 0040042 0103174 
@C3230: 0047231 0100000 0114051 0110052 0043236 0077411 0000000 0103436 
@C3240: 0103237 0047423 0103442 0114052 0043442 0077202 0103442 0103246 
@C3250: 0047423 0103476 0103251 0047424 0133442 0103174 0047257 0100000 
@C3260: 0047262 0104057 0110000 0040042 0103174 0047266 0100000 0114051 
@C3270: 0110052 0043273 0077411 0000000 0103246 0047424 0103237 0047423 
@C3300: 0103442 0114052 0043442 0077202 0103046 0047174 0100212 0047177 
@C3310: 0100317 0114243 0073314 0074000 0100255 0114317 0040255 0133310 
@C3320: 0133314 0133315 0133316 0130042 0114043 0073310 0100000 0040042 
@C3330: 0100044 0047314 0047316 0100053 0047310 0047315 0100000 0040317 
@C3340: 0040320 0040321 0040322 0040323 0040324 0040325 0040326 0076655 
@C3350: 0000255 0100347 0114000 0072471 0074705 0053360 0053400 0133400 
@C3360: 0100000 0110233 0047364 0100265 0170000 0073401 0133363 0133401 
@C3370: 0130042 0114043 0073363 0100000 0040042 0100045 0047363 0047401 
@C3400: 0074000 0100265 0073406 0103363 0044327 0133404 0130347 0073366 
@C3410: 0077373 0053414 0053435 0133435 0100000 0110233 0047422 0100327 
@C3420: 0047421 0100000 0170000 0073436 0077442 0130042 0133417 0100042 
@C3430: 0073417 0100211 0047417 0100000 0040042 0074000 0103146 0047440 
@C3440: 0130000 0077425 0077425 0103422 0044254 0104254 0110233 0110233 
@C3450: 0047452 0100052 0155000 0160001 0040254 0103421 0047460 0047462 
@C3460: 0100000 0114254 0040000 0103421 0114045 0110053 0047470 0047472 
@C3470: 0100000 0110254 0040000 0100000 0040254 0077425 0103422 0044254 
@C3500: 0104254 0110233 0110233 0047505 0100052 0155000 0160001 0040254 
@C3510: 0103421 0047513 0047515 0100000 0110254 0040000 0103421 0114045 
@C3520: 0110053 0047523 0047525 0100000 0114254 0040000 0100000 0040254 
@C3530: 0077425 0100255 0114000 0073537 0114052 0040255 0077544 0133531 
@C3540: 0133535 0130042 0114043 0073531 0100000 0040042 0100044 0047531 
@C3550: 0047535 0074705 0053557 0053574 0133574 0100000 0040042 0100000 
@C3560: 0047562 0047576 0100000 0114000 0073575 0133562 0133576 0130042 
@C3570: 0114043 0073562 0100000 0040042 0074000 0100000 0040000 0077565 
@S0000: w0000
@S0001: CONST_1
@S0040: CONST_6
@S0042: counter0
@S0043: CONST_7
@S0044: CONST_255
@S0045: CONST_0o0265
@S0046: w0046
@S0047: r0047
@S0050: CONST_0o0275
@S0051: CONST_0o0305
@S0052: CONST_1a
@S0053: CONST_317
@S0054: counter1
@S0055: w0055
@S0056: w0056
@S0057: m
@S0060: entryCounter
@S0061: numTemp
@S0062: numPieces
@S0173: needInitialCounts_flg
@S0174: humanMoveCounter
@S0175: w0175
@S0176: numberEntryIndex
@S0177: need2readFF23_flg
@S0200: tempY
@S0201: tempX
@S0202: endY
@S0203: endX
@S0204: delta
@S0206: diagFlag
@S0207: CONST_10d
@S0210: CONST_9d
@S0211: CONST_0o327
@S0212: CONST_0o337
@S0213: w0213
@S0214: w0214
@S0215: r0215
@S0216: r0216
@S0217: r0217
@S0220: r0220
@S0222: r0222
@S0223: r0223
@S0225: r0225
@S0227: r0227
@S0233: CONST_0o10
@S0234: r0234
@S0235: r0235
@S0236: r0236
@S0237: r0237
@S0241: groupNum
@S0242: nPlus1
@S0243: n
@S0244: nMinus1
@S0245: nonZeroBCaddr0
@S0246: nonZeroBCaddr1
@S0247: nonZeroBCaddr2
@S0250: nonZeroBCaddr3
@S0251: nonZeroBCaddr4
@S0252: nonZeroBCaddr5
@S0253: nonZeroBCaddr6
@S0254: nonZeroBCaddr7
@S0255: A_count
@S0256: B_count
@S0257: C_count
@S0260: D_count
@S0261: E_count
@S0262: F_count
@S0263: G_count
@S0264: H_count
@S0265: A_np1_rem
@S0266: B_np1_rem
@S0267: C_np1_rem
@S0270: D_np1_rem
@S0271: E_np1_rem
@S0272: F_np1_rem
@S0273: G_np1_rem
@S0274: H_np1_rem
@S0275: bit6count
@S0276: bit5count
@S0277: bit4count
@S0300: bit3count
@S0301: bit2count
@S0302: bit1count
@S0303: bit0count
@S0304: bitn1count
@S0305: bit6count_rem
@S0306: bit5count_rem
@S0307: bit4count_rem
@S0310: bit3count_rem
@S0311: bit2count_rem
@S0312: bit1count_rem
@S0313: bit0count_rem
@S0314: bitn1count_rem
@S0317: A_temp
@S0320: B_temp
@S0321: C_temp
@S0322: D_temp
@S0323: E_temp
@S0324: F_temp
@S0325: G_temp
@S0326: H_temp
@S0327: A_tensDigit
@S0330: B_tensDigit
@S0331: C_tensDigit
@S0332: D_tensDigit
@S0333: E_tensDigit
@S0334: F_tensDigit
@S0335: G_tensDigit
@S0336: H_tensDigit
@S0337: A_onesDigit
@S0340: B_onesDigit
@S0341: C_onesDigit
@S0342: D_onesDigit
@S0343: E_onesDigit
@S0344: F_onesDigit
@S0345: G_onesDigit
@S0346: H_onesDigit
@S0347: pieceCount
@S0350: readInputs
@S0354: UABpressed
@S0361: readFF23
@S0401: play
@S0410: readMIRs
@S0416: i0416
@S0426: i0426
@S0441: i0441
@S0454: w0454
@S0470: doHumanMove
@S0475: w0475
@S0501: i0501
@S0502: w0502
@S0507: w0507
@S0510: w0510
@S0511: w0511
@S0513: humanMove
@S0517: longDiv
@S0530: w0530
@S0533: w0533
@S0537: w0537
@S0552: w0552
@S0555: copyLoop
@S0556: w0556
@S0557: subDivisor
@S0561: w0561
@S0563: w0563
@S0565: restoreRemainder
@S0567: w0567
@S0571: w0571
@S0573: nextNum
@S0613: retAddr
@S0614: zeroRemainder
@S0615: w0615
@S0616: w0616
@S0620: divisor
@S0621: print
@S0624: setWordPtr
@S0626: getWord
@S0637: endOfString
@S0640: printRet
@S0641: zero10sDigits
@S0653: clearFlags
@S0660: i0660
@S0672: w0672
@S0673: illegalMove
@S0705: drawLetters
@S1240: prep4disp
@S1241: base10div
@S1246: draw0
@S1250: w1250
@S1253: w1253
@S1276: w1276
@S1277: w1277
@S1300: w1300
@S1304: w1304
@S1305: w1305
@S1306: w1306
@S1312: w1312
@S1313: w1313
@S1315: w1315
@S1320: w1320
@S1321: w1321
@S1323: w1323
@S1326: draw1
@S1330: w1330
@S1333: w1333
@S1357: w1357
@S1360: w1360
@S1361: w1361
@S1365: w1365
@S1366: w1366
@S1370: w1370
@S1373: w1373
@S1374: w1374
@S1375: w1375
@S1376: w1376
@S1401: draw2
@S1403: w1403
@S1406: w1406
@S1437: w1437
@S1440: w1440
@S1441: w1441
@S1445: w1445
@S1446: w1446
@S1447: w1447
@S1453: w1453
@S1454: w1454
@S1456: w1456
@S1461: w1461
@S1462: w1462
@S1463: i1463
@S1464: w1464
@S1467: w1467
@S1470: w1470
@S1471: w1471
@S1472: w1472
@S1475: draw3
@S1477: w1477
@S1502: w1502
@S1544: i1544
@S1545: w1545
@S1546: w1546
@S1550: w1550
@S1553: w1553
@S1554: w1554
@S1556: w1556
@S1561: w1561
@S1562: w1562
@S1564: w1564
@S1567: w1567
@S1570: w1570
@S1571: w1571
@S1575: w1575
@S1576: w1576
@S1577: w1577
@S1603: w1603
@S1604: w1604
@S1605: w1605
@S1606: w1606
@S1611: w1611
@S1612: w1612
@S1613: w1613
@S1614: w1614
@S1617: draw4
@S1621: w1621
@S1624: w1624
@S1646: w1646
@S1647: w1647
@S1650: w1650
@S1651: w1651
@S1654: w1654
@S1655: w1655
@S1657: w1657
@S1662: w1662
@S1663: w1663
@S1664: w1664
@S1670: draw5
@S1672: w1672
@S1675: w1675
@S1737: draw6
@S1741: w1741
@S1744: w1744
@S2004: draw7
@S2006: w2006
@S2010: w2010
@S2011: w2011
@S2031: w2031
@S2060: w2060
@S2070: draw8
@S2072: w2072
@S2075: w2075
@S2155: i2155
@S2156: w2156
@S2157: w2157
@S2160: w2160
@S2164: w2164
@S2165: w2165
@S2166: w2166
@S2172: w2172
@S2173: w2173
@S2174: w2174
@S2200: w2200
@S2201: w2201
@S2202: w2202
@S2206: w2206
@S2207: w2207
@S2211: w2211
@S2214: w2214
@S2215: w2215
@S2217: w2217
@S2222: w2222
@S2223: w2223
@S2225: w2225
@S2230: w2230
@S2231: w2231
@S2232: w2232
@S2233: w2233
@S2236: w2236
@S2237: w2237
@S2240: w2240
@S2241: w2241
@S2244: w2244
@S2245: w2245
@S2246: w2246
@S2247: w2247
@S2252: w2252
@S2253: w2253
@S2254: w2254
@S2255: w2255
@S2260: draw9
@S2262: w2262
@S2265: w2265
@S2314: w2314
@S2325: dispNum
@S2340: w2340
@S2353: w2353
@S2377: i2377
@S2417: i2417
@S2420: i2420
@S2435: i2435
@S2450: printIllMo
@S2453: w2453
@S2454: printYouWin
@S2460: leadingZero
@S2465: i2465
@S2471: i2471
@S2475: drawLine
@S2503: w2503
@S2506: w2506
@S2512: w2512
@S2517: w2517
@S2525: w2525
@S2534: dispLoop
@S2552: incX
@S2560: incY
@S2566: diag0
@S2577: diag1
@S2611: done
@S2612: place0
@S2613: yFor0
@S2614: xFor0
@S2615: place1
@S2616: yFor1
@S2617: xFor1
@S2620: place2
@S2621: yFor2
@S2622: xFor2
@S2623: place3
@S2624: yFor3
@S2625: xFor3
@S2626: place4
@S2627: yFor4
@S2630: xFor4
@S2631: place5
@S2632: yFor5
@S2633: xFor5
@S2634: place6
@S2635: yFor6
@S2636: xFor6
@S2637: place7
@S2640: yFor7
@S2641: xFor7
@S2642: place8
@S2643: yFor8
@S2644: xFor8
@S2645: place9
@S2646: yFor9
@S2647: xFor9
@S2650: machinesTurn
@S2655: countPieces
@S2660: w2660
@S2664: w2664
@S2666: i2666
@S2667: w2667
@S2677: w2677
@S2700: i2700
@S2720: w2720
@S2726: nextBit
@S2730: bitCount_ptr
@S2731: nextGroup
@S2732: bitShift
@S2734: continueInner
@S2767: bitIsSet
@S2771: continue_ww
@S2772: w2772
@S3030: bc_rem_ptr
@S3030: bc_rem_loop
@S3034: nz_bc_rem_ptr
@S3036: next_bc_rem
@S3046: r3046
@S3051: nz_bc_addr_loop
@S3051: nz_bc_addr_ptr1
@S3055: nz_bc_addr_ptr2
@S3057: sub_instr
@S3063: bit_param
@S3064: nz_bc_addr_ptr3
@S3067: r3067
@S3071: flag_loop
@S3071: flag_loop_ptr
@S3074: check_ptr
@S3077: flag_ptr
@S3100: flag_set
@S3114: calc_cleanup
@S3125: clr_flg_loop
@S3125: clr_flg_ptr
@S3127: next_to_clr
@S3142: flg_set
@S3143: flg_sav_ptr
@S3145: next_step
@S3146: result_ptr
@S3147: nzbcr_ptr_ptr
@S3157: bit_to_test
@S3164: w3164
@S3170: restore_ptrs
@S3174: cbc_loop
@S3174: bcr_ptr_ptr
@S3176: w3176
@S3177: bc_ptr
@S3202: next_bc
@S3210: w3210
@S3214: a_ge_r
@S3222: w3222
@S3224: w3224
@S3231: w3231
@S3236: w3236
@S3237: r3237
@S3246: a_lt_r
@S3251: r3251
@S3257: w3257
@S3262: w3262
@S3266: w3266
@S3273: w3273
@S3304: make_move
@S3310: i3310
@S3314: i3314
@S3315: w3315
@S3316: w3316
@S3355: bitFinder
@S3360: bitToFind
@S3363: group_pointer1
@S3364: clc_instr
@S3366: group_loop
@S3373: bf_cleanup
@S3400: bf_retAddr
@S3401: group_pointer2
@S3404: save_ptr
@S3406: skip_ptr_save
@S3411: xnpr_bitTester
@S3414: btt
@S3417: next_xnpr_ptr
@S3417: xnpr_ptr_ptr
@S3421: xnpr_ptr
@S3422: shifter
@S3423: bitSet_fn_ptr
@S3424: bitClr_fn_ptr
@S3425: next_xnpr
@S3435: returnAddress
@S3436: bitSet_fn1
@S3440: r_ptr
@S3442: bitClr_fn1
@S3443: addToMove
@S3452: w3452
@S3460: w3460
@S3462: w3462
@S3470: w3470
@S3472: w3472
@S3476: bitClr_fn2
@S3505: w3505
@S3513: w3513
@S3515: w3515
@S3523: w3523
@S3525: w3525
@S3531: takeJustOne
@S3535: grp_ptr
@S3537: tryNextGroup
@S3544: doneTakingOne
@S3552: cleanCounts
@S3557: w3557
@S3562: cleanLoop
@S3565: i3565
@S3574: w3574
@S3575: zeroCount
@S3576: w3576
@E0351: exec: auto_config_switches(cb)  ;  
@E0471: print: "(0o0470) Do human move"
@E0713: print: "(0o0713) A=%d B=%d C=%d D=%d E=%d F=%d G=%d H=%d", 0o000255, 0o000256, 0o000257, 0o000260, 0o000261, 0o000262, 0o000263, 0o000264
@E2701: print: "(0o2700) Machines turn"
@E2724: print: "(0o2723) X_np1_rems: A=%d B=%d C=%d D=%d E=%d F=%d G=%d H=%d", 0o000265, 0o000266, 0o000267, 0o000270, 0o000271, 0o000272, 0o000273, 0o000274
@E2771: print: "(0o2771) BitCounts: bit6=%d bit5=%d bit4=%d bit3=%d bit2=%d bit1=%d bit0=%d", 0o000275, 0o000276, 0o000277, 0o000300, 0o000301, 0o000302, 0o000303
@E3023: print: "(0o3023) bitcounts mod(m+1) b6=%d b5=%d b4=%d b3=%d b2=%d b1=%d b0=%d", 0o000305, 0o000306, 0o000307, 0o000310, 0o000311, 0o000312, 0o000313
@E3051: print: "(0o3050) NZBCR %o %o %o %o %o %o %o %o", 0o000245, 0o000246, 0o000247, 0o000250, 0o000251, 0o000252, 0o000253, 0o000254
@E3055: print: "(0o3054) bit=%d", 0o003063
@E3062: print: "(0o3061) pieceCount=%d", 0o000347
@E3174: print: "(0o3173) X_onesDigits A=%d B=%d C=%d D=%d E=%d F=%d G=%d H=%d", 0o000337, 0o000340, 0o000341, 0o000342, 0o000343, 0o000344, 0o000345, 0o000346
@E3304: print: "(0o3304) X_temps: A=%d B=%d C=%d D=%d E=%d F=%d G=%d H=%d", 0o000317, 0o000320, 0o000321, 0o000322, 0o000323, 0o000324, 0o000325, 0o000326
@E3400: print: "(0o3377) found bit set in %o %o %o %o %o %o %o %o", 0o000327, 0o000330, 0o000331, 0o000332, 0o000333, 0o000334, 0o000335, 0o000336
@N0041:  select I/O: unknown i/o device
@N0043:  select I/O: unknown i/o device
@N0044:  start address of storage for group counts
@N0045:  address of A_np1_rem
@N0046:  select I/O: unknown i/o device
@N0047:  select I/O: unknown i/o device
@N0050:  address of bit6count
@N0051:  address of bit6count_rem
@N0053:  start address of X_temp
@N0054:  WrittenBy a2704 a2747 a2753 ReadBy a2747
@N0061:  select I/O: Camera Index
@N0064:  CR UC
@N0065:  "S" LC
@N0066:  "or"
@N0067:  "ry"
@N0070:  ". "
@N0071:  UC "T"
@N0072:  LC "h"
@N0073:  "e "
@N0074:  "co"
@N0075:  "mp"
@N0076:  "ut"
@N0077:  "er"
@N0100:  " h"
@N0101:  "as"
@N0102:  " w"
@N0103:  "on"
@N0104:  " t"
@N0105:  "he"
@N0106:  " g"
@N0107:  "am"
@N0110:  "e."
@N0111:  CR null
@N0112:  CR change color
@N0113:  UC "C"
@N0114:  LC "o"
@N0115:  "ng"
@N0116:  "ra"
@N0117:  "tu"
@N0120:  "la"
@N0121:  "ti"
@N0122:  "on"
@N0123:  "s,"
@N0124:  " y"
@N0125:  "ou"
@N0126:  " h"
@N0127:  "av"
@N0130:  "e "
@N0131:  "wo"
@N0132:  "n "
@N0133:  "th"
@N0134:  "e "
@N0135:  "ga"
@N0136:  "me"
@N0137:  "." change color
@N0140:  CR null
@N0141:  CR UC
@N0142:  "Y" LC
@N0143:  "ou"
@N0144:  "r "
@N0145:  "mo"
@N0146:  "ve"
@N0147:  " i"
@N0150:  "s "
@N0151:  "il"
@N0152:  "le"
@N0153:  "ga"
@N0154:  "l."
@N0155:  " " UC
@N0156:  "P" LC
@N0157:  "le"
@N0160:  "as"
@N0161:  "e "
@N0162:  "tr"
@N0163:  "y "
@N0164:  "an"
@N0165:  "ot"
@N0166:  "he"
@N0167:  "r "
@N0170:  "mo"
@N0171:  "ve"
@N0172:  "." CR
@N0173:   0 indicates that all starting counts have been entered
@N0174:   number of moves (take some matches from one pile) the human has made in this turn
@N0176:   index for entry of initial values
@N0177:  0 indicates that FF2 and FF3 have been read in
@N0200:   variable Y value used to plot points
@N0201:   variable X value used to plot points
@N0202:   const ending Y val
@N0203:   const ending X val
@N0204:   amount to add to X and Y between points
@N0205:  ?? neither read nor written
@N0206:   const controls diagonal type
@N0211:  address of A_tensDigit
@N0212:  address of A_onesDigit
@N0215:  select I/O: unknown i/o device
@N0217:  block transfer in
@N0220:  read
@N0221:  block transfer out
@N0222:  block transfer out
@N0223:  add one
@N0224:  shift left and roundoff
@N0225:  sum digits - XOR
@N0226:     ; check
@N0227:  transfer digits
@N0231:  multiply and hold
@N0232:  clear and subtract
@N0233:  constant 0o10 = 8 decimal
@N0234:  select I/O: unknown i/o device
@N0235:  select I/O: unknown i/o device
@N0236:  select I/O: unknown i/o device
@N0237:  select I/O: Intervention and Activate Device
@N0240:  select I/O: Intervention and Activate Device
@N0245:   see 0o3030 for details
@N0255:   typically start at 0 but can be hard-coded if you like.
@N0265:  storage for remainders of X_counts/(n+1) in the machine's turn
@N0275:   each is the total number of set bits in that position in all groups combined
@N0305:  storage for remainders of bitXcounts/(m+1) in machine's turn
@N0314:   not used - a spacer since longDiv
@N0315:   expects to process 8 numbers
@N0317:  storage for temporary working (?) values of the counts in each group
@N0327:  storage for the tens digits of the count of matches in each lettered pile
@N0337:   read by the subroutine at 0o2325 to draw the appropriate numbers
@N0347:   total number of pieces in all 8 groups
@N0350:  select I/O: Activate Register 0 (Upper Activate Button)
@N0351:  read in UAB
@N0352:  jump if MSbit set (button pressed)
@N0353:  otherwise, go around again in main display loop
@N0354:  see if we've set all the initial counts yet
@N0355:  ==0?
@N0356:  you need counts but first see if you need to read FF2 and FF3 first
@N0357:  add one
@N0361:  check flag
@N0362:  ==0? (0 => FFs have been read)
@N0363:  FFs have been read & initial counts entered
@N0364:  clear readFF23_flg (FFs have been read)
@N0365:  load switch contents into FF regs
@N0366:  get FF2 value (n = max # of matches to take)
@N0375:  get FF3 value (m = max # of groups to alter)
@N0377:  set needInitialCounts_flg so next times thru loop will read MIRs
@N0400:  go around to main display loop
@N0401:  the human has
@N0402:  select I/O: Camera Index [take screenshot]
@N0403:  see if human has made m moves yet
@N0405:  if not yet, get the human's next move
@N0406:  human has made all the moves they can, it's the machine's turn
@N0410:  select I/O: LMIR (group number)
@N0411:  read LMIR
@N0412:  save value
@N0413:  can't be > 7 (only 8 groups)
@N0414:  branch if OK so far
@N0415:  sub-program
@N0416:  select I/O: RMIR (number of pieces to start with or remove)
@N0417:  read RMIR
@N0420:  save to temp
@N0421:  shift off 1's digit
@N0422:  save to temp
@N0423:  see if greater than 9 (illegal)
@N0424:  branch if OK so far
@N0425:  notify if illegal
@N0426:  clear and add
@N0427:  process 10's digit
@N0431:  save to temp
@N0432:  get entered value
@N0433:  remove 10's digit
@N0435:  save to temp
@N0436:  see if greater than 9 (illegal)
@N0437:  branch if OK so far
@N0440:  notify if illegal
@N0441:  combine 1's and 10x10's digit
@N0443:  save
@N0444:  if == 0, then done with entering numbers;
@N0446:  so it's a human player move
@N0447:  clear and add
@N0450:  numberEntryIndex is 1-indexed (0 => human player move)
@N0451:  start address of storage for group counts (if 0, points to A_count)
@N0452:  set pointer to correct count location
@N0453:  get value to store
@N0454:  save to A_count, etc
@N0455:  add one
@N0456:  see if < 7
@N0457:  if so, you're not done entering initial values
@N0460:  load zero
@N0464:   signal that we're done entering initial counts
@N0465:  transfer to storage
@N0467:  go back to main loop
@N0470:  index into X_temp (starts at 0o0317)
@N0471:  start address of X_temp
@N0472:  save to pointers
@N0475:  get X_temp
@N0476:  check to be sure == 0
@N0477:  continue if == 0
@N0500:  otherwise something (?) went wrong
@N0501:  get number to remove
@N0502:  save in X_temp
@N0503:  get groupNum
@N0504:  offset to start of X_count
@N0505:  save to pointers
@N0507:  get X_count
@N0510:  subtract X_temp
@N0511:  save to X_count
@N0512:  all done, return to main loop
@N0513:  make sure this is not > n
@N0515:  this is a legal move; process it
@N0516:  moving too many pieces
@N0517:  transfer address
@N0520:  transfer address
@N0521:  transfer address
@N0522:  transfer address
@N0523:  transfer address
@N0524:  add one
@N0525:  add one
@N0526:  add one
@N0527:  add one
@N0530:  get base
@N0531:  transfer to storage
@N0532:  point to dividends parameter
@N0533:  get dividends parameter
@N0534:  save in copy loop
@N0535:  point to onesDigits parameter
@N0537:  get onesDigits parameter
@N0540:  save in copy loop
@N0547:  point to quotients parameter
@N0552:  get quotients parameter
@N0553:  save in copy loop
@N0554:  save in copy loop
@N0555:  get number from starting set
@N0556:  save to remainder
@N0557:  get working value
@N0561:  save to working value
@N0562:  if went too far, restore remainder
@N0563:  increment quotient
@N0564:  continue subtracting divisor
@N0565:  get working value
@N0566:  add back base since we went too far
@N0567:  save working value
@N0570:  get divisor
@N0571:  subtract working value
@N0572:  if equal, set remainder = 0 and add 1 to quotient
@N0573:  increment all pointers
@N0605:  increment counter
@N0606:  clear and add
@N0607:  see if done
@N0610:  conditional program
@N0611:  zero out counter
@N0613:  return
@N0614:  get zero
@N0615:  save to remainder
@N0616:  add one to quotient
@N0617:  next number to divide
@N0620:   divisor (set at start of routine)
@N0621:  save address of string start
@N0622:  save return address
@N0623:  select I/O: Printer
@N0624:  get starting address
@N0625:  set pointer
@N0626:  get word to print
@N0627:  shift first character into MS bits
@N0630:  print first character
@N0631:  shift 2nd character into MS bits
@N0632:  print 2nd character
@N0633:  shift all the way back to start
@N0634:   you're done if MS bit is set
@N0635:  otherwise, increment pointer
@N0636:  get next word
@N0637:  increment return address to correct location
@N0640:  return
@N0641:  clear and add
@N0642:  transfer to storage
@N0643:  transfer to storage
@N0644:  transfer to storage
@N0645:  transfer to storage
@N0646:  transfer to storage
@N0647:  transfer to storage
@N0650:  transfer to storage
@N0651:  transfer to storage
@N0652:  sub-program
@N0653:  transfer address
@N0654:  clear and add
@N0655:  transfer to storage
@N0656:  transfer to storage
@N0657:  transfer to storage
@N0660:  transfer to storage
@N0661:  transfer to storage
@N0662:  transfer to storage
@N0663:  transfer to storage
@N0664:  transfer to storage
@N0665:  transfer to storage
@N0666:  transfer to storage
@N0667:  transfer to storage
@N0670:  transfer to storage
@N0671:  transfer to storage
@N0672:  sub-program
@N0673:  print "illegal move" string
@N0674:  restore counter to previous value
@N0677:  restore to previous value
@N0700:  but not if it would go negative
@N0701:  go back to main loop
@N0702:  subtract
@N0704:  go back to main loop
@N0705:  sub-program
@N0706:  starting Y (+614)
@N0707:  starting X (-921)
@N0710:  ending Y (921)
@N0711:  ending X - vertical line
@N0712:  diagFlag
@N0713:  sub-program
@N0714:  starting Y (+921)
@N0715:  starting X (-921)
@N0716:  ending Y - horizontal line
@N0717:  ending X (-716)
@N0720:  diagFlag
@N0721:  sub-program
@N0722:  starting Y (767)
@N0723:  starting X (-921)
@N0724:  ending Y - horizontal line
@N0725:  ending X (-716)
@N0726:  diagFlag
@N0727:  sub-program
@N0730:  starting Y (+614)
@N0731:  starting X (-716)
@N0732:  ending Y (921)
@N0733:  ending X - vertical line
@N0734:  diagFlag
@N0735:  sub-program
@N0736:  starting Y (+102)
@N0737:  starting X (-921)
@N0740:  ending Y (409)
@N0741:  ending X - vertical line
@N0742:  diagFlag
@N0743:  sub-program
@N0744:  starting Y (409)
@N0745:  starting X (-921)
@N0746:  ending Y - horizontal line
@N0747:  ending X (-716)
@N0750:  diagFlag
@N0751:  sub-program
@N0752:  starting Y (256)
@N0753:  starting X (-921)
@N0754:  ending Y - horizontal line
@N0755:  ending X (-767)
@N0756:  diagFlag
@N0757:  sub-program
@N0760:  starting Y (+102)
@N0761:  starting X (-921)
@N0762:  ending Y - horizontal line
@N0763:  ending X (-716)
@N0764:  diagFlag
@N0765:  sub-program
@N0766:  starting Y (+102)
@N0767:  starting X (-716)
@N0770:  ending Y (+204)
@N0771:  ending X - vertical line
@N0772:  diagFlag
@N0773:  sub-program
@N0774:  starting Y (+307)
@N0775:  starting X (-716)
@N0776:  ending Y (+409)
@N0777:  ending X - vertical line
@N1000:  diagFlag
@N1001:  sub-program
@N1002:  starting Y (256)
@N1003:  starting X (-767)
@N1004:  ending Y (+307)
@N1005:  ending X (-716)
@N1006:  diagFlag: up and to the right
@N1007:  sub-program
@N1010:  starting Y (+204)
@N1011:  starting X (-716)
@N1012:  ending Y (256)
@N1013:  ending X (-767)
@N1014:  diagFlag: up and to the left
@N1015:  sub-program
@N1016:  starting Y (-409)
@N1017:  starting X (-921)
@N1020:  ending Y (-102)
@N1021:  ending X - vertical line
@N1022:  diagFlag
@N1023:  sub-program
@N1024:  starting Y (-102)
@N1025:  starting X (-921)
@N1026:  ending Y - horizontal line
@N1027:  ending X (-716)
@N1030:  diagFlag
@N1031:  sub-program
@N1032:  starting Y (-409)
@N1033:  starting X (-921)
@N1034:  ending Y - horizontal line
@N1035:  ending X (-716)
@N1036:  diagFlag
@N1037:  sub-program
@N1040:  starting Y (-921)
@N1041:  starting X (-921)
@N1042:  ending Y (-614)
@N1043:  ending X - vertical line
@N1044:  diagFlag
@N1045:  sub-program
@N1046:  starting Y (-870)
@N1047:  starting X (-716)
@N1050:  ending Y (-665)
@N1051:  ending X - vertical line
@N1052:  diagFlag
@N1053:  sub-program
@N1054:  starting Y (-614)
@N1055:  starting X (-921)
@N1056:  ending Y - horizontal line
@N1057:  ending X (-767)
@N1060:  diagFlag
@N1061:  sub-program
@N1062:  starting Y (-921)
@N1063:  starting X (-921)
@N1064:  ending Y - horizontal line
@N1065:  ending X (-767)
@N1066:  diagFlag
@N1067:  sub-program
@N1070:  starting Y (-921)
@N1071:  starting X (-767)
@N1072:  ending Y (-870)
@N1073:  ending X (-716)
@N1074:  diagFlag = up and to the right
@N1075:  sub-program
@N1076:  starting Y (-655)
@N1077:  starting X (-716)
@N1100:  ending Y (-614)
@N1101:  ending X (-767)
@N1102:  diagFlag = up and to the left
@N1103:  sub-program
@N1104:  starting Y (+614)
@N1105:  starting X (+102)
@N1106:  ending Y (+921)
@N1107:  ending X - vertical line
@N1110:  diagFlag
@N1111:  sub-program
@N1112:  starting Y (+921)
@N1113:  starting X (+102)
@N1114:  ending Y - horizontal line
@N1115:  ending X (+307)
@N1116:  diagFlag
@N1117:  sub-program
@N1120:  starting Y (+767)
@N1121:  starting X (+102)
@N1122:  ending Y - horizontal line
@N1123:  ending X (+307)
@N1124:  diagFlag
@N1125:  sub-program
@N1126:  starting Y (+614)
@N1127:  starting X (+102)
@N1130:  ending Y - horizontal line
@N1131:  ending X (+307)
@N1132:  diagFlag
@N1133:  sub-program
@N1134:  starting Y (+102)
@N1135:  starting X (+102)
@N1136:  ending Y (+409)
@N1137:  ending X - vertical line
@N1140:  diagFlag
@N1141:  sub-program
@N1142:  starting Y (+409)
@N1143:  starting X (+102)
@N1144:  ending Y - horizontal line
@N1145:  ending X (+307)
@N1146:  diagFlag
@N1147:  sub-program
@N1150:  starting Y (+256)
@N1151:  starting X (+102)
@N1152:  ending Y - horizontal line
@N1153:  ending X (+307)
@N1154:  diagFlag
@N1155:  sub-program
@N1156:  starting Y (-409)
@N1157:  starting X (+102)
@N1160:  ending Y (-102)
@N1161:  ending X - vertical line
@N1162:  diagFlag
@N1163:  sub-program
@N1164:  starting Y (-409)
@N1165:  starting X (+307)
@N1166:  ending Y (-256)
@N1167:  ending X - vertical line
@N1170:  diagFlag
@N1171:  sub-program
@N1172:  starting Y (-102)
@N1173:  starting X (+102)
@N1174:  ending Y - horizontal line
@N1175:  ending X (+307)
@N1176:  diagFlag
@N1177:  sub-program
@N1200:  starting Y (-256)
@N1201:  starting X (+204)
@N1202:  ending Y - horizontal line
@N1203:  ending X (+307)
@N1204:  diagFlag
@N1205:  sub-program
@N1206:  starting Y (-409)
@N1207:  starting X (+102)
@N1210:  ending Y - horizontal line
@N1211:  ending X (+307)
@N1212:  diagFlag
@N1213:  sub-program
@N1214:  starting Y (-921)
@N1215:  starting X (+102)
@N1216:  ending Y (-614)
@N1217:  ending X - vertical line
@N1220:  diagFlag
@N1221:  sub-program
@N1222:  starting Y (-921)
@N1223:  starting X (+307)
@N1224:  ending Y (-614)
@N1225:  ending X - vertical line
@N1226:  diagFlag
@N1227:  sub-program
@N1230:  starting Y (-767)
@N1231:  starting X (+102)
@N1232:  ending Y - horizontal line
@N1233:  ending X (+307)
@N1234:  diagFlag
@N1235:  clear and add (constant 0o12)
@N1236:  save as divisor param for call to longDiv
@N1237:  sub-program
@N1240:  convert octal counts in A_count thru H_count
@N1241:   parameter: base (0o012)
@N1242:  dividends = address of A_count
@N1243:  remainders (1's digits) = address of A_onesDigit
@N1244:  quotients (10's digits) = address of A_tensDigit
@N1245:  display the numbers
@N1246:  transfer address
@N1247:  transfer address
@N1250:  clear and add
@N1251:  transfer to storage
@N1252:  add one
@N1253:  clear and add
@N1254:  transfer to storage
@N1255:  clear and add
@N1256:  transfer to storage
@N1257:  transfer to storage
@N1260:  transfer to storage
@N1261:  add
@N1262:  transfer to storage
@N1263:  transfer to storage
@N1264:  transfer to storage
@N1265:  clear and add
@N1266:  transfer to storage
@N1267:  transfer to storage
@N1270:  transfer to storage
@N1271:  add
@N1272:  transfer to storage
@N1273:  transfer to storage
@N1274:  transfer to storage
@N1275:  sub-program
@N1303:  sub-program
@N1311:  sub-program
@N1317:  sub-program
@N1325:  sub-program
@N1326:  transfer address
@N1327:  transfer address
@N1330:  clear and add
@N1331:  transfer to storage
@N1332:  add one
@N1333:  clear and add
@N1334:  transfer to storage
@N1335:  clear and add
@N1336:  transfer to storage
@N1337:  transfer to storage
@N1340:  add
@N1341:  transfer to storage
@N1342:  transfer to storage
@N1343:  subtract
@N1344:  transfer to storage
@N1345:  clear and add
@N1346:  add
@N1347:  transfer to storage
@N1350:  transfer to storage
@N1351:  add
@N1352:  transfer to storage
@N1353:  transfer to storage
@N1354:  add
@N1355:  transfer to storage
@N1356:  sub-program
@N1364:  sub-program
@N1372:  sub-program
@N1400:  sub-program
@N1401:  transfer address
@N1402:  transfer address
@N1403:  clear and add
@N1404:  transfer to storage
@N1405:  add one
@N1406:  clear and add
@N1407:  transfer to storage
@N1410:  clear and add
@N1411:  transfer to storage
@N1412:  transfer to storage
@N1413:  add
@N1414:  transfer to storage
@N1415:  transfer to storage
@N1416:  add
@N1417:  transfer to storage
@N1420:  add
@N1421:  transfer to storage
@N1422:  transfer to storage
@N1423:  transfer to storage
@N1424:  clear and add
@N1425:  transfer to storage
@N1426:  transfer to storage
@N1427:  transfer to storage
@N1430:  transfer to storage
@N1431:  add
@N1432:  transfer to storage
@N1433:  transfer to storage
@N1434:  transfer to storage
@N1435:  transfer to storage
@N1436:  sub-program
@N1444:  sub-program
@N1452:  sub-program
@N1460:  sub-program
@N1466:  sub-program
@N1474:  sub-program
@N1475:  transfer address
@N1476:  transfer address
@N1477:  clear and add
@N1500:  transfer to storage
@N1501:  add one
@N1502:  clear and add
@N1503:  transfer to storage
@N1504:  clear and add
@N1505:  transfer to storage
@N1506:  transfer to storage
@N1507:  add
@N1510:  transfer to storage
@N1511:  transfer to storage
@N1512:  transfer to storage
@N1513:  add
@N1514:  transfer to storage
@N1515:  transfer to storage
@N1516:  transfer to storage
@N1517:  add
@N1520:  transfer to storage
@N1521:  transfer to storage
@N1522:  add
@N1523:  transfer to storage
@N1524:  transfer to storage
@N1525:  clear and add
@N1526:  transfer to storage
@N1527:  transfer to storage
@N1530:  transfer to storage
@N1531:  add
@N1532:  transfer to storage
@N1533:  transfer to storage
@N1534:  transfer to storage
@N1535:  add
@N1536:  transfer to storage
@N1537:  transfer to storage
@N1540:  transfer to storage
@N1541:  transfer to storage
@N1542:  transfer to storage
@N1543:  transfer to storage
@N1544:  sub-program
@N1552:  sub-program
@N1560:  sub-program
@N1566:  sub-program
@N1574:  sub-program
@N1602:  sub-program
@N1610:  sub-program
@N1615:  select I/O: unknown i/o device
@N1616:  sub-program
@N1617:  transfer address
@N1620:  transfer address
@N1621:  clear and add
@N1622:  transfer to storage
@N1623:  add one
@N1624:  clear and add
@N1625:  transfer to storage
@N1626:  clear and add
@N1627:  transfer to storage
@N1630:  add
@N1631:  transfer to storage
@N1632:  transfer to storage
@N1633:  add
@N1634:  transfer to storage
@N1635:  transfer to storage
@N1636:  clear and add
@N1637:  transfer to storage
@N1640:  transfer to storage
@N1641:  add
@N1642:  transfer to storage
@N1643:  transfer to storage
@N1644:  transfer to storage
@N1645:  sub-program
@N1653:  sub-program
@N1661:  sub-program
@N1667:  sub-program
@N1670:  transfer address
@N1671:  transfer address
@N1672:  clear and add
@N1673:  transfer to storage
@N1674:  add one
@N1675:  clear and add
@N1676:  transfer to storage
@N1677:  clear and add
@N1700:  transfer to storage
@N1701:  transfer to storage
@N1702:  add
@N1703:  transfer to storage
@N1704:  transfer to storage
@N1705:  add
@N1706:  transfer to storage
@N1707:  transfer to storage
@N1710:  add
@N1711:  transfer to storage
@N1712:  transfer to storage
@N1713:  transfer to storage
@N1714:  add
@N1715:  transfer to storage
@N1716:  transfer to storage
@N1717:  clear and add
@N1720:  transfer to storage
@N1721:  transfer to storage
@N1722:  transfer to storage
@N1723:  transfer to storage
@N1724:  add
@N1725:  transfer to storage
@N1726:  transfer to storage
@N1727:  transfer to storage
@N1730:  transfer to storage
@N1731:  add
@N1732:  transfer to storage
@N1733:  transfer to storage
@N1734:  transfer to storage
@N1735:  transfer to storage
@N1736:  sub-program
@N1737:  transfer address
@N1740:  transfer address
@N1741:  clear and add
@N1742:  transfer to storage
@N1743:  add one
@N1744:  clear and add
@N1745:  transfer to storage
@N1746:  clear and add
@N1747:  transfer to storage
@N1750:  transfer to storage
@N1751:  transfer to storage
@N1752:  add
@N1753:  transfer to storage
@N1754:  transfer to storage
@N1755:  add
@N1756:  transfer to storage
@N1757:  transfer to storage
@N1760:  clear and add
@N1761:  transfer to storage
@N1762:  transfer to storage
@N1763:  transfer to storage
@N1764:  transfer to storage
@N1765:  add
@N1766:  transfer to storage
@N1767:  transfer to storage
@N1770:  transfer to storage
@N1771:  transfer to storage
@N1772:  clear and add
@N1773:  transfer to storage
@N1774:  transfer to storage
@N1775:  transfer to storage
@N1776:  transfer to storage
@N1777:  transfer to storage
@N2000:  transfer to storage
@N2001:  transfer to storage
@N2002:  transfer to storage
@N2003:  sub-program
@N2004:  transfer address
@N2005:  transfer address
@N2006:  clear and add
@N2007:  transfer to storage
@N2010:  add one
@N2011:  clear and add
@N2012:  transfer to storage
@N2013:  clear and add
@N2014:  transfer to storage
@N2015:  add
@N2016:  transfer to storage
@N2017:  transfer to storage
@N2020:  add
@N2021:  transfer to storage
@N2022:  transfer to storage
@N2023:  transfer to storage
@N2024:  add
@N2025:  transfer to storage
@N2026:  transfer to storage
@N2027:  transfer to storage
@N2030:  clear and add
@N2031:  transfer to storage
@N2032:  transfer to storage
@N2033:  transfer to storage
@N2034:  transfer to storage
@N2035:  add
@N2036:  transfer to storage
@N2037:  transfer to storage
@N2040:  transfer to storage
@N2041:  clear and add
@N2042:  transfer to storage
@N2043:  transfer to storage
@N2044:  transfer to storage
@N2045:  transfer to storage
@N2046:  transfer to storage
@N2047:  transfer to storage
@N2050:  transfer to storage
@N2051:  transfer to storage
@N2052:  transfer to storage
@N2053:  transfer to storage
@N2054:  transfer to storage
@N2055:  transfer to storage
@N2056:  transfer to storage
@N2057:  transfer to storage
@N2060:  transfer to storage
@N2061:  transfer to storage
@N2062:  transfer to storage
@N2063:  transfer to storage
@N2064:  transfer to storage
@N2065:  transfer to storage
@N2066:  transfer to storage
@N2067:  sub-program
@N2070:  transfer address
@N2071:  transfer address
@N2072:  clear and add
@N2073:  transfer to storage
@N2074:  add one
@N2075:  clear and add
@N2076:  transfer to storage
@N2077:  clear and add
@N2100:  transfer to storage
@N2101:  transfer to storage
@N2102:  transfer to storage
@N2103:  add
@N2104:  transfer to storage
@N2105:  transfer to storage
@N2106:  transfer to storage
@N2107:  transfer to storage
@N2110:  add
@N2111:  transfer to storage
@N2112:  transfer to storage
@N2113:  transfer to storage
@N2114:  transfer to storage
@N2115:  transfer to storage
@N2116:  add
@N2117:  transfer to storage
@N2120:  transfer to storage
@N2121:  transfer to storage
@N2122:  transfer to storage
@N2123:  add
@N2124:  transfer to storage
@N2125:  transfer to storage
@N2126:  transfer to storage
@N2127:  clear and add
@N2130:  transfer to storage
@N2131:  transfer to storage
@N2132:  transfer to storage
@N2133:  transfer to storage
@N2134:  transfer to storage
@N2135:  transfer to storage
@N2136:  add
@N2137:  transfer to storage
@N2140:  transfer to storage
@N2141:  transfer to storage
@N2142:  add
@N2143:  transfer to storage
@N2144:  transfer to storage
@N2145:  transfer to storage
@N2146:  add
@N2147:  transfer to storage
@N2150:  transfer to storage
@N2151:  transfer to storage
@N2152:  transfer to storage
@N2153:  transfer to storage
@N2154:  transfer to storage
@N2155:  sub-program
@N2163:  sub-program
@N2171:  sub-program
@N2177:  sub-program
@N2205:  sub-program
@N2213:  sub-program
@N2221:  sub-program
@N2227:  sub-program
@N2235:  sub-program
@N2243:  sub-program
@N2250:  select I/O: unknown i/o device
@N2251:  sub-program
@N2256:  select I/O: unknown i/o device
@N2257:  sub-program
@N2260:  transfer address
@N2261:  transfer address
@N2262:  clear and add
@N2263:  transfer to storage
@N2264:  add one
@N2265:  clear and add
@N2266:  transfer to storage
@N2267:  clear and add
@N2270:  transfer to storage
@N2271:  transfer to storage
@N2272:  add
@N2273:  transfer to storage
@N2274:  transfer to storage
@N2275:  add
@N2276:  transfer to storage
@N2277:  transfer to storage
@N2300:  transfer to storage
@N2301:  clear and add
@N2302:  transfer to storage
@N2303:  transfer to storage
@N2304:  transfer to storage
@N2305:  transfer to storage
@N2306:  add
@N2307:  transfer to storage
@N2310:  transfer to storage
@N2311:  transfer to storage
@N2312:  transfer to storage
@N2313:  clear and add
@N2314:  transfer to storage
@N2315:  transfer to storage
@N2316:  transfer to storage
@N2317:  transfer to storage
@N2320:  transfer to storage
@N2321:  transfer to storage
@N2322:  transfer to storage
@N2323:  transfer to storage
@N2324:  sub-program
@N2325:  clear and add
@N2326:  transfer to storage
@N2327:  transfer to storage
@N2330:  transfer to storage
@N2331:  transfer to storage
@N2332:  transfer to storage
@N2333:  transfer to storage
@N2334:  transfer to storage
@N2335:  transfer to storage
@N2336:  transfer to storage
@N2337:  transfer to storage
@N2340:  clear and add
@N2341:  transfer to storage
@N2342:  transfer to storage
@N2343:  transfer to storage
@N2344:  transfer to storage
@N2345:  transfer to storage
@N2346:  transfer to storage
@N2347:  transfer to storage
@N2350:  transfer to storage
@N2351:  transfer to storage
@N2352:  transfer to storage
@N2353:  clear and add
@N2354:  check for leading zero
@N2356:  subtract
@N2357:  conditional program
@N2360:  subtract
@N2361:  conditional program
@N2362:  subtract
@N2363:  conditional program
@N2364:  subtract
@N2365:  conditional program
@N2366:  subtract
@N2367:  conditional program
@N2370:  subtract
@N2371:  conditional program
@N2372:  subtract
@N2373:  conditional program
@N2374:  subtract
@N2375:  conditional program
@N2376:  sub-program
@N2377:  add one
@N2400:  add one
@N2401:  add one
@N2402:  clear and add
@N2403:  subtract
@N2404:  conditional program
@N2405:  clear and add
@N2406:  transfer to storage
@N2407:  clear and add
@N2410:  transfer digits
@N2411:  add one
@N2412:  add one
@N2413:  add one
@N2414:  clear and add
@N2415:  subtract
@N2416:  conditional program
@N2417:  sub-program
@N2420:  clear and add
@N2421:  transfer to storage
@N2422:  clear and add
@N2423:  transfer to storage
@N2424:  clear and add
@N2425:  transfer digits
@N2426:  clear and add
@N2427:  transfer digits
@N2430:  add one
@N2431:  clear and add
@N2432:  subtract
@N2433:  conditional program
@N2434:  sub-program
@N2435:  clear and add
@N2436:  transfer to storage
@N2437:  transfer to storage
@N2440:  transfer to storage
@N2441:  clear and add
@N2442:  transfer digits
@N2443:  clear and add
@N2444:  transfer digits
@N2445:  clear and add
@N2446:  transfer digits
@N2447:  sub-program
@N2450:  save return address
@N2451:  print string:
@N2452:  "Your move is illegal. Please try another move."
@N2453:  return
@N2454:  print string:
@N2455:  "Congratulations, you have won the game."
@N2456:  add one
@N2457:  sub-program
@N2460:  clear and add
@N2461:  conditional program
@N2462:  subtract
@N2463:  conditional program
@N2464:  sub-program
@N2465:  clear and add
@N2466:  add
@N2467:  conditional program
@N2470:  sub-program
@N2471:  print string:
@N2472:  "Sorry. The computer has won the game."
@N2473:  add one
@N2474:  sub-program
@N2475:  transfer address
@N2476:  transfer address
@N2477:  transfer address
@N2500:  transfer address
@N2501:  transfer address (return address)
@N2502:  transfer address
@N2503:  clear and add (address of starting Y)
@N2504:  transfer to storage
@N2505:  add one to point to caller + 2
@N2506:  clear and add (address of starting X)
@N2507:  transfer to storage
@N2510:  add one
@N2511:  add one to point to caller + 3
@N2512:  clear and add (address of ending Y)
@N2513:  transfer to storage
@N2514:  add one
@N2515:  add one
@N2516:  add one to point to caller + 4
@N2517:  clear and add (address of ending X)
@N2520:  transfer to storage
@N2521:  add one
@N2522:  add one
@N2523:  add one
@N2524:  add one to point to caller + 5
@N2525:  clear and add (address of diagFlag)
@N2526:  transfer to storage
@N2527:  add one
@N2530:  add one
@N2531:  add one
@N2532:  add one
@N2533:  add one to point to return address (caller + 6)
@N2534:  clear and add
@N2535:  select I/O: Display Points
@N2536:  clear and add
@N2537:  record
@N2540:  clear and add magnitude
@N2541:  subtract
@N2542:  conditional program
@N2543:  clear and add magnitude
@N2544:  subtract
@N2545:  conditional program
@N2546:  clear and add magnitude
@N2547:  subtract
@N2550:  conditional program
@N2551:  sub-program
@N2552:  clear and add
@N2553:  add
@N2554:  transfer to storage
@N2555:  subtract
@N2556:  conditional program
@N2557:  sub-program
@N2560:  clear and add
@N2561:  add
@N2562:  transfer to storage
@N2563:  subtract
@N2564:  conditional program
@N2565:  sub-program
@N2566:  clear and add
@N2567:  add
@N2570:  transfer to storage
@N2571:  clear and add
@N2572:  add
@N2573:  transfer to storage
@N2574:  subtract
@N2575:  conditional program
@N2576:  sub-program
@N2577:  clear and add
@N2600:  add
@N2601:  transfer to storage
@N2602:  clear and add
@N2603:  subtract
@N2604:  transfer to storage
@N2605:  clear and add
@N2606:  subtract
@N2607:  conditional program
@N2610:  sub-program
@N2611:  sub-program
@N2612:  sub-program
@N2615:  sub-program
@N2620:  sub-program
@N2623:  sub-program
@N2626:  sub-program
@N2631:  sub-program
@N2634:  sub-program
@N2637:  sub-program
@N2642:  sub-program
@N2645:  sub-program
@N2650:  make sure all X_counts >= 0
@N2651:  parameter: start of X_counts in storage
@N2652:  count all pieces on the board
@N2653:  parameter: start address of X_counts in storage
@N2654:  continue processing
@N2655:  point to parameter
@N2656:  save return address
@N2657:  point to caller + 2
@N2660:  get start address of X_counts
@N2661:  save to pointer (i)
@N2662:  save to pointer & increment (i + 1)
@N2664:  get X_counts[i]
@N2665:  pieceCount = X_counts[0]
@N2666:  pieceCount = pieceCount + X_counts[i]
@N2671:  i++
@N2672:  counted one more
@N2673:  are we done yet?
@N2674:  not done yet
@N2675:  clear counter for next use
@N2677:  return
@N2700:  see if all pieces are gone
@N2702:  if none left, then the human won
@N2703:  counter1 = 0
@N2705:  transfer to storage
@N2706:  transfer to storage
@N2707:  transfer to storage
@N2710:  transfer to storage
@N2711:  transfer to storage
@N2712:  transfer to storage
@N2713:  transfer to storage
@N2714:  transfer to storage
@N2715:  get n+1 as divisor
@N2716:  save as longDiv parameter
@N2717:  call longDiv
@N2720:  longDiv param: divisor (n+1)
@N2721:  dividends = X_counts
@N2722:  remainders => X_np1_rems
@N2723:  quotients => X_onesDigits
@N2724:  make sure all X_np1_rems >= 0
@N2725:  parameter - points to A_np1_rem
@N2726:  reset group counter
@N2730:  pointer to storage for bit count
@N2731:  get X_np1_rem value
@N2732:  shift bit to be tested into position
@N2733:  branch if bit set
@N2734:  point to next group
@N2735:  one more group checked
@N2736:  see if done with all groups
@N2737:  if not, go to next group
@N2740:  reset group counter
@N2742:  point to next bit counter
@N2744:  test next bit
@N2745:  reset group pointer to point to A_np1_rem
@N2747:  next bit
@N2750:  done with all bits
@N2751:  if not, test next bit
@N2752:  counter1 = 0
@N2754:  reset pointers to A_np1_rem
@N2757:  restore bit shift to original setting
@N2761:  clear the 7th bit count
@N2762:  this would be "bit -1"
@N2763:  use m+1 as divisor
@N2765:  save as longDiv parameter
@N2766:  sub-program
@N2767:  increment the bit set count for this group
@N2770:  this pointer is incremented by the outer loop
@N2771:  long division
@N2772:  longDiv param: divisor (m+1)
@N2773:  dividends = bitXcounts
@N2774:  remainders => bitXcount_rems
@N2775:  quotients => X_onesDigits
@N2776:  be sure all bitXcount_rems >= 0
@N3000:  clear counter and quotients
@N3001:  transfer to storage
@N3002:  transfer to storage
@N3003:  transfer to storage
@N3004:  transfer to storage
@N3005:  transfer to storage
@N3006:  transfer to storage
@N3007:  transfer to storage
@N3010:  transfer to storage
@N3011:  transfer to storage
@N3012:  transfer to storage
@N3013:  transfer to storage
@N3014:  transfer to storage
@N3015:  transfer to storage
@N3016:  transfer to storage
@N3017:  transfer to storage
@N3020:  transfer to storage
@N3021:  transfer to storage
@N3022:  clear 'bit -1' remainder
@N3023:  sum up bitXcounts % (m+1)
@N3024:  param: start of bitXcount_rems
@N3025:  see if this sum = 0
@N3027:  if so, take just one piece
@N3030:  clear and add
@N3031:  is bitXcount_rem == 0?
@N3032:  if == 0, go on to next one
@N3033:  get address of non-zero bitXcount_rem
@N3034:  save to nonZeroBCaddrX
@N3035:  point to next nonZeroBXCaddrX
@N3036:  point to next bitXcount_rem
@N3037:  have we done all 7 bitXcount_rems?
@N3041:  if not, do next bitXcount_rem
@N3042:  reset counter
@N3044:  address of bit6count_rem
@N3045:  save to pointer
@N3046:  this value is the start value of nz_bc_rem_ptr
@N3047:  read in instruction code
@N3050:  restore pointer
@N3051:  start from highest-order bit that is non-zero and get the address
@N3052:  subtract starting address (if we're on bit 6, this = 0; bit 5 => 1, etc)
@N3053:  +1
@N3054:  save as subroutine parameter
@N3055:  get current bit count remainder
@N3056:  set up subtraction instruction
@N3057:  AC = - (current bit count remainder)
@N3060:  add 1
@N3061:  parameter for bitFinder
@N3062:  find q X_np1_rems with bit set (see above for translations)
@N3063:   parameter: bit
@N3064:  see if next nz_bc_addr is empty (so we're on the last one)
@N3066:  all done checking the nz_bc_addrs; clean up
@N3067:  clear pieceCount
@N3071:  get next address of X_np1_rem with bit set
@N3072:  save to pointers
@N3074:  get selected X_np1_rem
@N3075:  don't flag it if it has already been flagged
@N3076:  set high order flag bit (ca 0 = 1000000)
@N3077:  save back to selected X_np1_rem
@N3100:  point to next X_tens_digit (next address of X_np1_rem with bit set)
@N3101:  have we done all 8?
@N3102:  subtract
@N3103:  go around if we haven't
@N3104:  reset flag_loop_ptr
@N3106:  clear counter0
@N3110:  update pointers
@N3113:  go to top of loop
@N3114:  get original instruction
@N3115:  restore pointers
@N3117:  point to next one
@N3121:  restore pointer
@N3123:  clear pieceCount
@N3125:  get selected X_np1_rem
@N3126:  branch if flag already set
@N3127:  update pointers
@N3131:  have we checked all 8?
@N3133:  go around again if not
@N3134:  clear counter0
@N3136:  reset pointers
@N3141:  sub-program
@N3142:  clear sign (MSB) bit
@N3143:  write back to selected X_np1_rem
@N3144:  go around again
@N3145:  clear result storage location
@N3147:  get address of desired bitXcount_rem
@N3150:  subtract base address
@N3151:  AC = 1 => bit6; AC = 2 => bit5, etc
@N3152:  save as subroutine param
@N3153:  AC = -m
@N3154:  AC = -m + 1
@N3155:  save in counter0 as subroutine param
@N3156:    and put count of set bits in X_onesDigit
@N3157:  subroutine param bit to test
@N3160:  point to next place to store bit counts
@N3161:  point to next nzbcr_ptr
@N3162:  dereference it
@N3164:  see if nzbcr_ptr == 0 (no more nzbcrs to test)
@N3165:     (all done looping over nzbcrs)
@N3166:  go on if done
@N3167:  otherswise, test the next one
@N3170:  get start value of result ptr (A_tensDigit)
@N3171:  restore value
@N3172:  get start value of nzbcr_ptr_ptr
@N3173:  restore value
@N3174:  get pointer to NZBCR
@N3175:  dereference it
@N3176:  get NZBCR
@N3177:  compare to actual bit count
@N3200:  jump if remainder - actual ≤ 0
@N3201:  else actual < remainder
@N3202:  set all counts ≤ 0 to 0 (clear flagged ones?)
@N3203:  param for cleanCounts = X_np1_rems
@N3204:  increment pointers
@N3206:  get pointer to next bcr pointer
@N3207:  dereference pointer
@N3211:  is it pointing to 0? then we're done
@N3212:  we're done - move on to next computation
@N3213:  not done, so go to next NZBC
@N3214:  set bitSet_fn_ptr to addToMove
@N3217:  alter bitClr_fn1 so that it loops back to 0o3426
@N3220:  get pointer to current BCR_ptr
@N3221:  dereference it 2x to the actual BCR
@N3224:  AC = - (current BCR)
@N3225:  AC = - (current BCR + 1)
@N3226:  set up to search thru current BCR X_np1_rems
@N3227:  get pointer to current BCR
@N3230:  dereference it to get pointer value (address)
@N3232:  subtract offset to get bit number
@N3233:  adjust bit number for xnpr_bitTester
@N3235:  sub-program
@N3236:   param for xnpr_bitTester
@N3237:  restore bitSet_fn_ptr to point to bitSet_fn1
@N3242:  restore branch instruction in bitClr_fn1
@N3243:    so that counter0 is incremented each time thru loop
@N3245:  next bit count
@N3246:  set bitSet_fn_ptr to bitClr_fn1
@N3251:  set bitClr_fn_ptr to bitClr_fn2
@N3254:  alter bitClr_fn1 so that it loops back to 0o3426
@N3255:  get current bcr_ptr
@N3256:  dereference 2x to get actuall bcr value
@N3261:  AC = -m
@N3262:  AC = -m + (current BCR)
@N3263:  save as param for xnpr_bitTester
@N3264:  get pointer to current BCR
@N3265:  dereference it to get pointer value (address)
@N3267:  subtract offset
@N3270:  adjust bit number for xnpr_bitTester
@N3272:  sub-program
@N3273:   bit to test param for xnpr_bitTester
@N3274:  restore bitClr_fn_ptr
@N3276:  restore bitSet_fn_ptr
@N3300:  restore branch instruction in bitClr_fn1
@N3301:   so that counter0 is incremented each time thru loop
@N3303:  next bit count
@N3304:  clear and add
@N3305:  transfer digits
@N3306:  clear and add
@N3307:  transfer digits
@N3310:  clear and add
@N3311:  subtract
@N3312:  conditional program
@N3313:  sub-program
@N3314:  clear and add
@N3315:  subtract
@N3316:  transfer to storage
@N3317:  add one
@N3320:  add one
@N3321:  add one
@N3322:  add one
@N3323:  add one
@N3324:  subtract
@N3325:  conditional program
@N3326:  clear and add
@N3327:  transfer to storage
@N3330:  clear and add
@N3331:  transfer digits
@N3332:  transfer digits
@N3333:  clear and add
@N3334:  transfer digits
@N3335:  transfer digits
@N3336:  clear and add
@N3337:  transfer to storage
@N3340:  transfer to storage
@N3341:  transfer to storage
@N3342:  transfer to storage
@N3343:  transfer to storage
@N3344:  transfer to storage
@N3345:  transfer to storage
@N3346:  transfer to storage
@N3347:  sub-program
@N3350:  select I/O: unknown i/o device
@N3351:  clear and add
@N3352:  subtract
@N3353:  conditional program
@N3354:  sub-program
@N3355:  address of "bit" parameter
@N3356:  save return address
@N3357:  point to next instruction
@N3360:  get bit parameter
@N3361:  +8 so now 9 => bit6, 10 => bit5 etc
@N3362:  configure shift instruction
@N3363:  clear and add
@N3364:  put selected bit into most-sig position
@N3365:  branch if set
@N3366:  increment pointers
@N3370:  increment loop counter
@N3371:  have we looped over all 8 groups yet?
@N3372:  if not, go around again
@N3373:  clear counter0
@N3375:  restore pointers to address of A_np1_rem
@N3400:  return
@N3401:  get current X_np1_rem
@N3402:  branch if flag bit set
@N3403:  get address of X_np1_rem that has bit set
@N3404:  save in indexed Y_tensDigit
@N3405:  point to next _tensDigit
@N3406:  one more set bit counted
@N3407:  if you haven't found all you need; keep going
@N3410:  cleanup and exit
@N3411:  parameter address (bit to test)
@N3412:  save return address
@N3414:  get # for bit to test (AC = 1 => bit6; AC = 2 => bit5, etc )
@N3415:  set up shift instruction to select proper bit
@N3417:  get pointer to selected X_np1_rem that has a useful bit set
@N3420:  set up to get the X_np1_rem
@N3421:  get desired X_np1_rem
@N3422:  put desired bit in MSbit
@N3423:  jump if bit set
@N3424:  jump if bit is clear
@N3425:  one more X_np1_rem searched
@N3426:  point to next X_np1_rem
@N3427:  see if done (counter == 0)
@N3430:  go around again if not
@N3431:  reset pointer
@N3433:  clear counter
@N3435:  return to caller
@N3436:  get pointer to result
@N3437:  dereference pointer
@N3440:  increment result in X_onesDigit
@N3441:  test next X_np1_rem
@N3442:  sub-program
@N3443:  get shifter instruction to find which bit is being tested
@N3444:  save the digits - the amount to shift
@N3445:  convert bit shift to bit being tested
@N3447:  AC = # of bit being tested
@N3450:  prepare shift instruction
@N3451:  start with 1 in LSB to shift
@N3452:  shift left and hold
@N3453:  AC = 2^((bit number) - 1)
@N3454:  save value - this is the number of tokens to take
@N3455:  get address of current X_np1_rem
@N3456:  set up pointers
@N3460:  AC = contents of X_np1_rem
@N3461:  update X_np1_rem with move
@N3462:  X_np1_rem = X_np1_rem - move
@N3463:  AC = address of current X_np1_rem
@N3464:  subtract offset
@N3465:  translate address to X_temp
@N3466:  set up pointers to X_temp
@N3470:  AC = X_temp
@N3471:  AC = X_temp - move
@N3472:  save updated X_temp
@N3473:  clear temp variable
@N3475:  next call
@N3476:  get shifter instruction to determine which bit is being tested
@N3477:  save the digits - the # of bits to shift
@N3500:  convert to # of bit being tested
@N3502:   AC = # of bit being tested
@N3503:  prepare shift instruction
@N3504:  start with 1 in LSB
@N3506:  AC = 2^((bit number) - 1) = the move
@N3507:  save move
@N3510:  get address of current X_np1_rem
@N3511:  set up pointers
@N3513:  AC = current X_np1_rem
@N3514:  add move
@N3515:  X_np1_rem = X_np1_rem + move
@N3516:  AC = address of current X_np1_rem
@N3517:  subtract offset
@N3520:  translate address to X_temp
@N3521:  set up pointers
@N3523:  AC = X_temp
@N3524:  AC = X_temp - move
@N3525:  save updated X_temp
@N3526:  clear temp variable
@N3530:  next call
@N3531:  check to see if group is empty
@N3532:  this is a pointer that is incremented
@N3533:  if so, try next group
@N3534:   take one
@N3536:  all done
@N3537:  point to next group
@N3541:  have we done all 8 groups?
@N3543:  if not, try next group
@N3544:  reset counter0
@N3546:  restore pointers to A_count
@N3551:  return to main loop
@N3552:  point to parameter
@N3553:  save return address
@N3554:  increment to point to caller + 2
@N3555:  clear counter
@N3557:  get start address of X_counts
@N3560:  save to pointer (i)
@N3561:  save to pointer (i)
@N3562:  get X_counts[i]
@N3563:  see if <= 0
@N3564:  if <= 0, need to set to 0
@N3565:  i++
@N3566:  i++
@N3567:  one more has been checked
@N3570:  are we done?
@N3571:  if not, check next one
@N3572:  we're done with all 8 counts
@N3573:  clear the counter
@N3574:  return
@N3575:  clear and add
@N3576:  X_counts[i] = 0
@N3577:  increment counters and go around again
