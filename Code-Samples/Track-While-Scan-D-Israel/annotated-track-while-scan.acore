
; *** Core Image ***
%ISA: 1950
%File: annotated-track-while-scan.ww
%TapeID: None
%JumpTo 0o435
%Switch: FFRegAssign 0o10,0o27,0o34,0o35,0o36
%Switch: FlipFlopPreset10 0o0
%Switch: FlipFlopPreset27 0o0
%Switch: FlipFlopPreset34 0o177777
%Switch: FlipFlopPreset35 0o0
%Switch: FlipFlopPreset36 0o372
%DbWgt:  .TargetHeading  0o05 %d
%DbWgt:  0o010  0o01 %o
%DbWgt:  0o036  0o01 %o
@C0000: 0000000 0020000  None    None    None    None    None    None   
@C0010: 0000000  None    None    None    None    None    None    None   
@C0020:  None    None    None    None    None    None    None   0000000 
@C0030:  None    None    None    None   0000000 0000000 0000000 0037777 
@C0040: 0130372 0130404 0104000 0064034 0070042 0114037 0070100 0114001 
@C0050: 0154001 0040420 0120420 0040421 0140442 0114442 0144421 0154002 
@C0060: 0110427 0140421 0110416 0144420 0040421 0104361 0040361 0070040 
@C0070: 0100421 0040360 0100420 0114001 0070076 0110152 0110037 0074051 
@C0100: 0110037 0070220 0040420 0144360 0154005 0030422 0104420 0144421 
@C0110: 0154005 0034420 0100027 0070177 0130372 0070155 0114370 0070330 
@C0120: 0114366 0040372 0100401 0114402 0070216 0100373 0030000 0100374 
@C0130: 0060374 0100364 0040401 0040402 0100377 0140417 0110376 0040376 
@C0140: 0124377 0124373 0040373 0100400 0140417 0110375 0040375 0124400 
@C0150: 0124374 0040374 0100000 0040377 0040400 0100372 0064404 0040372 
@C0160: 0130155 0130156 0130157 0114133 0070155 0100040 0044155 0044157 
@C0170: 0100041 0044156 0104361 0040361 0070042 0064027 0140152 0114361 
@C0200: 0070114 0104371 0040372 0104000 0030375 0034376 0100422 0040373 
@C0210: 0100420 0040374 0100363 0040401 0040402 0074152 0100363 0074132 
@C0220: 0104405 0110373 0040431 0104406 0110374 0040432 0130035 0070040 
@C0230: 0144432 0154007 0110375 0154005 0040423 0140423 0040433 0100035 
@C0240: 0144431 0154007 0110376 0154005 0040426 0140426 0114430 0110433 
@C0250: 0070040 0120423 0140434 0140426 0064433 0160002 0040431 0120426 
@C0260: 0140426 0160002 0110433 0064433 0110433 0040426 0120426 0110431 
@C0270: 0064433 0150433 0154015 0114001 0064423 0070300 0104423 0040423 
@C0300: 0130000 0150035 0154006 0040036 0104362 0110423 0124152 0144424 
@C0310: 0160002 0040010 0154004 0144425 0040426 0154017 0144425 0040035 
@C0320: 0100426 0154005 0110035 0154001 0044010 0100000 0040035 0074040 
@C0330: 0104422 0124373 0040415 0140415 0040365 0104420 0124374 0040403 
@C0340: 0140403 0124365 0040365 0100402 0114365 0070155 0100367 0040372 
@C0350: 0100365 0040402 0104415 0140126 0040377 0104403 0140126 0074154 
@C0360: 0000000 0163777 0022525 0000040 0000022 0000000 0001046 0000144 
@C0370: 0000310 0001212 0000000 0000000 0000000 0000000 0000000 0000000 
@C0400: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0410: 0000000 0000000 0000000 0000000 0000000 0000000 0030646 0025251 
@C0420: 0000000 0000000 0000000 0000000 0106314 0000012 0000000 0007557 
@C0430: 0000000 0000000 0000000 0000000 0011463 0100036 0144036 0154012 
@C0440: 0040430 0074040 0071300 0006710  None    None    None    None   
@S0001: num_qtr
@S0010: FF_angle
@S0027: Lt_GunFF
@S0034: Radar_in
@S0035: Tau_inv
@S0036: Veloc_I
@S0037: num37777
@S0040: inc_time
@S0042: wait
@S0047: azi_in
@S0051: azi_sin
@S0100: rng_in
@S0102: non_z_rng
@S0155: swap_air
@S0156: sw0
@S0157: sw1
@S0177: lg_hit
@S0201: initiate
@S0220: zero_rng
@S0275: not71300
@S0300: no275reset
@S0330: not_covered
@S0361: which_tgt
@S0362: num_22525
@S0363: large_srch
@S0364: num_18d
@S0366: num_550
@S0367: num_100
@S0370: num_200
@S0371: num_650b
@S0372: time0
@S0373: x_smoo0
@S0374: y_smoo0
@S0375: y_velo0
@S0376: x_velo0
@S0377: x_diff0
@S0400: y_diff0
@S0401: srch_i0
@S0402: srch_r0
@S0404: time1
@S0405: x_smoo1
@S0406: y_smoo1
@S0407: y_velo1
@S0410: x_velo1
@S0411: x_diff1
@S0412: y_diff1
@S0413: srch_i1
@S0414: srch_r1
@S0417: num25251
@S0424: num_pt9
@S0425: num00012
@S0427: num07557
@S0430: vel_I_sq
@S0431: dx
@S0432: dy
@S0434: num11463
@S0435: start
@S0442: num71300
@S0443: vIsqd32
@E0126: exec: print("     @085 Found - Display Tracked Aircraft %s on F-Scope; Time0=%s, x_smoo0=%d, y_smoo0=%d" % (which_plane(cm), deci(cm.rd(rl("time0"))), cm.rd(rl("x_smoo0")), cm.rd(rl("y_smoo0"))))
@E0174: exec: if cm.rd(rl("which_tgt")) > 32*1024: dump_tracking_state(cm, deci, rl, long=True)
@E0202: exec: print("@129 Initiate Aircraft %s; set time to %s" % (which_plane(cm), deci(cm.rd(rl("time0"))))) \n exec: record_initiation(cm, cb)
@E0325: exec: print_ff_heading(cm, deci, rl, cb)
@E0331: exec: print("  @216 Radar response is in search zone for Aircraft %s; Time0=%s" % (which_plane(cm), deci(cm.rd(rl("time0")))))
@N0001: value is '1/4'  (not the usual 0o000001)
@N0027: addr 0o27
@N0034: addr 0o34
@N0035: addr 0o35; "One over Tau"
@N0036: addr 0o36; V-sub-I -- Interceptor velocity
@N0037: constant;   1/2 - 2**-15
@N0043: read radar data
@N0044: Branch if Negative, i.e., no new data
@N0045: Subtract the constant 0o037777, i.e. just less than 1/2, i.e., test most-significant bit after sign
@N0046: Branch if Range; fall through if Azimuth
@N0047: Process a radar Azimuth reading
@N0051: stash the azi reading in @272
@N0052: clear & add magnitude; this effectively inverts the reading, so a North azi turns to about 0o37776
@N0054: a constant; this is the constant that (was) also an instruction @189
@N0065: switch sign of @241; read and negate
@N0066: ...  then write back; probably 0o163777 or 0o014000
@N0067: exit here if all done in this loop
@N0100: process a radar Range reading; turn the rng back into a positive number
@N0101: hmm, -0o37777 + 0o37777 must be -0, so branch if negative, i.e., zero
@N0102: positive number of miles (times two?); store in a temp
@N0103: [this number is probably cosine of the azimuth]
@N0104: compute the x position for display
@N0105: ... and store it at 274
@N0106: Retrieve the number of miles
@N0107: [this number is probably sine of the azimuth]
@N0111: display the Y value, and save it at 272
@N0112: Read Light Gun to see if there's anything spotted, i.e., any negative value
@N0113: branch if light-gun hit
@N0114: no light-gun hit; increment Time0
@N0115: [this branch usually falls through, 'cause we start with Time set slightly positive]
@N0116: appears to subtract a constant 0d200; AC ends with (Time0 - 0d200)
@N0117: fall through "if search sector has been covered"; branch if not covered
@N0120: "...so reset the time counter" by subtracting another 0d550
@N0121: ... and storing it back
@N0122: test to see "if the aircraft was found during this scan of the antenna"
@N0125: "Display Tracked Aircraft on F-Scope"
@N0131: Load constant 18 decimal / 0o22 octal to set up small search area
@N0134: calculate for x
@N0135: constant - decimal 0.333; scale distance error
@N0136: add correction to old velocity to create new velocity
@N0137: store the result
@N0140: add new velocity to the distance error
@N0141: add to the previous the position
@N0142: store as the new position
@N0143: calculate for y
@N0153: clear x_diff0
@N0154: clear y_diff0
@N0155: swap target and interceptor
@N0161: increment the addresses for swap
@N0163: subtract a handy constant to determine loop end: #0o040402  "ts srch_r0"
@N0164: fall through if we're finished swapping
@N0165: Fetch address of Time1 (Load #0o130404   "ao  time1")
@N0166: reset the addresses of instructions
@N0170: Load #0o130404   "ao  time1"
@N0172: switch sign of @241; read the negative
@N0173: ...  and store it back; probably 0o163777 or 0o014000
@N0176: constant #100000; I think this makes the slightly-smaller inverse...
@N0177: subtract one of two constants depending on which aircraft we're following
@N0201: constant 650; this sets the beginning of the search area to 100 units before dead-center
@N0202: reset time to wait for the next turn of the radar
@N0206: display x-pos?
@N0212: set up large search area
@N0216: constant 32d for "large" search area;
@N0222: store Target_x - Interceptor_x
@N0225: store Target_y - Interceptor_y
@N0227: branch back to Wait if not computing the heading
@N0230: Tau_inv in the accumulator; multiply by delta Y
@N0231: For Tau_inv == 1, this is (dy / 2**8), i.e., distance in units of miles
@N0232: add Target y velocity, units of miles per hour
@N0233: multiply by 32
@N0235: compute (dy/tau + yvelo0)**2 / 32;  i.e. if (dy/tau + yvelo0) = 0o170, we store 0o702 in @283
@N0245: compute (dx/tau + xvelo0)**2 / 32
@N0246: @280
@N0247: Here's the spot where I always (got) the overflow!
@N0250: back to Wait
@N0251: last seen, for Tau_inv==1, this had 'dy' in miles + Target_y velocity in mph
@N0252: constant +.1500 decimal
@N0253: last seen, (dx/tau + xvelo0) * 32
@N0254: Last seen was (dy/tau + yvelo0)**2 / 32, in @158 (decimal!)
@N0255: (dy/tau + yvelo0)**2 / 8
@N0257: last seen, (dx/tau + xvelo0) * 32
@N0267: retrieve (dy/tau + yvelo0)**2 / 8
@N0276: I initially mis-read this instruction as CS 276
@N0300: Was AO 0, i.e., add one to Switch Register Zero; put 1 in the accumulator
@N0302: This probably sort-of converts hours to minutes, i.e., hours * 64
@N0310: WAS SR 302;
@N0327: finished with heading calculation; back to Wait
@N0330: Branch here if we're "in" a search sector and have a candidate radar response
@N0345: Take this branch "if the latest piece of data does not correspond more closely..."
@N0346: In this case, we have a better reading for the aircraft; so we "reset" the time counter
@N0353: an instruction used as a constant; @0126.086:030000   qh   000
@N0357: note that @108 is a "ts y_diff0", i.e., they saved a word by jumping into the middle of the "clear diffs" sequence
@N0361: -0.1875 = -3/16
@N0362: 0.2917 decimal = 7/24
@N0366: ** possible OCR mistake; the scan said 650, but I'm sure it's 550 **
@N0372: Time Counter
@N0373: X Smoothed Position
@N0377: Difference between observed and predicted position
@N0400: Difference between observed and predicted position
@N0401: Search Area Size, Initial
@N0402: Search Area Size, Running
@N0417: constant - decimal 0.333
@N0430: Interceptor Velocity Squared
@N0436: square of expected interceptor velocity
@N0437: shift left 15 to get it into AC, then right 5 to divide by 32; interceptor velocity squared divided by 32
@N0441: added by guy
@N0443: initial velocity squared divided by 32.
