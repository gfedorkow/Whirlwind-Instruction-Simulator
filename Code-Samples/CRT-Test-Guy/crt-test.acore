
; *** Core Image ***
%File: crt-test.ww
%TapeID: None
@C0040: 0074041 0074057 0074101 0074170 0074312 0074231 0074041 0076040 
@C0050: 0101737 0076000 0101000 0000174 0000200 0000002 0000003 0050100 
@C0060: 0100047 0000677 0100047 0024000 0100050 0000677 0100050 0024000 
@C0070: 0100047 0000677 0100050 0024000 0100050 0000677 0100047 0024000 
@C0100: 0074000 0050131 0100167 0040132 0100133 0044117 0110041 0044112 
@C0110: 0110041 0044120 0100000 0001677 0100112 0110056 0044112 0100000 
@C0120: 0024000 0100120 0110056 0040120 0100117 0110056 0044117 0130132 
@C0130: 0070112 0074000 0000000 0000134 0101737 0076040 0076200 0101737 
@C0140: 0076040 0000200 0101737 0076040 0076000 0076040 0076040 0000200 
@C0150: 0076040 0076040 0101000 0076040 0101737 0000174 0076040 0101737 
@C0160: 0101000 0101737 0101737 0000174 0101737 0101737 0076000 0177767 
@C0170: 0050220 0100223 0040227 0100224 0040230 0100000 0114221 0040222 
@C0200: 0100230 0000677 0100227 0024000 0100230 0001677 0100227 0024051 
@C0210: 0100230 0110226 0040230 0100227 0110225 0040227 0130222 0070200 
@C0220: 0074000 0000016 0000000 0101737 0050000 0010000 0001000 0000000 
@C0230: 0000000 0050260 0000014 0100307 0002601 0100310 0024355 0100307 
@C0240: 0002602 0100310 0110340 0024356 0100307 0110340 0000677 0100310 
@C0250: 0024000 0014000 0070254 0074260 0170001 0070261 0170001 0070270 
@C0260: 0074000 0050306 0040311 0100344 0110041 0044304 0100340 0074300 
@C0270: 0050306 0040311 0100344 0110055 0044304 0100340 0110340 0074300 
@C0300: 0110307 0002677 0100310 0110340 0024000 0100311 0074000 0064000 
@C0310: 0130000 0000000 0050334 0000014 0100000 0114335 0040336 0100343 
@C0320: 0044326 0100337 0040341 0100342 0002677 0100341 0024000 0110340 
@C0330: 0040341 0130326 0130336 0070325 0074000 0000020 0000000 0154000 
@C0340: 0004000 0000000 0040000 0000345 0000354 0040000 0020000 0010000 
@C0350: 0004000 0002000 0001000 0000400 0073400 0010400 0065400 0035400 
@C0360: 0016400 0037000 0076000 0011400 0077400 0017400  None    None   
@S0040: zero
@S0041: one
@S0040: main
@S0041: main_loop
@S76040: MAX_POS_COORD
@S101737: MAX_NEG_COORD
@S76000: MAX_POS_X_DELTA
@S101000: MAX_NEG_X_DELTA
@S0174: MAX_POS_Y_DELTA
@S0200: MAX_NEG_Y_DELTA
@S0047: max_pos_coord
@S0050: max_neg_coord
@S0051: max_pos_x_delta
@S0052: max_neg_x_delta
@S0053: max_pos_y_delta
@S0054: max_neg_y_delta
@S0055: c2
@S0056: c3
@S0057: corner_dots
@S0100: cd_ret
@S0101: corner_lines
@S0112: cl_index_y
@S0117: cl_index_x
@S0120: cl_index_d
@S0131: cl_ret
@S0132: cl_count
@S0133: corner_list_ptr
@S0134: corner_display_list
@S0167: cdl_len
@S0170: multi_segments
@S0200: ms_loop
@S0220: ms_ret
@S0221: ms_segs
@S0222: ms_count
@S0223: ms_x_start
@S0224: ms_y_start
@S0225: ms_x_delta
@S0226: ms_y_delta
@S0227: ms_x
@S0230: ms_y
@S0231: scope_identify
@S0244: light_gun_check
@S0254: lg_hit
@S0260: si_ret
@S0261: lg_hit_gun1
@S0270: lg_hit_gun2
@S0300: lg_hit_gun
@S0304: lg_rc_inst
@S0306: lg_ret
@S0307: si_y
@S0310: si_x
@S0311: lg_tmp_acc
@S0312: char_gen_test
@S0325: cg_loop
@S0326: cg_index
@S0334: cg_ret
@S0335: cg_segs
@S0336: cg_count
@S0337: cg_x_start
@S0340: cg_x_delta
@S0341: cg_x
@S0342: cg_y
@S0343: char_seg_tab_ptr
@S0344: char_tab_ptr
@S0345: char_seg_tab
@S40000: B1
@S20000: B2
@S10000: B3
@S4000: B4
@S2000: B5
@S1000: B6
@S0400: B7
@S0354: char_tab
@N0047: maximum deflection for X or Y coords
@N0050: maximum deflection for X or Y coords
@N0060: pick up Y value
@N0061: select all the scopes; set Y value from the AC
@N0062: pick up X value
@N0063: draw the point using X val from AC
@N0064: pick up Y value
@N0065: select all the scopes; set Y value from the AC
@N0066: pick up X value
@N0067: draw the point using X val from AC
@N0070: pick up Y value
@N0071: select all the scopes; set Y value from the AC
@N0072: pick up X value
@N0073: draw the point using X val from AC
@N0074: pick up Y value
@N0075: select all the scopes; set Y value from the AC
@N0076: pick up X value
@N0077: draw the point using X val from AC
@N0106: add one to the address
@N0110: add one to the address
@N0113: select all the scopes; set Y value from the AC
@N0117: put the X value in AC
@N0120: pick up the Delta vector
@N0121: move pointer to next delta
@N0124: move pointer to next X value
@N0134: X coord  ; top left corner
@N0135: Y coord
@N0136: Y-/X+ diagonal line
@N0137: X coord  ; top left corner
@N0140: Y coord
@N0141: Y- downward line
@N0142: X coord  ; top left corner
@N0143: Y coord
@N0144: X+ rightward line
@N0145: X coord  ; top right corner
@N0146: Y coord
@N0147: Y- downward line
@N0150: X coord  ; top right corner
@N0151: Y coord
@N0152: X+ leftward line
@N0153: X coord  ; Bottom right corner
@N0154: Y coord
@N0155: Y+ downward line
@N0156: X coord  ; bottom right corner
@N0157: Y coord
@N0160: X- leftward line
@N0161: X coord  ; Bottom left corner
@N0162: Y coord
@N0163: Y+ upward line
@N0164: X coord  ; bottom left corner
@N0165: Y coord
@N0166: X+ uptward line
@N0167: compute negative of table length by subtracting start from finish
@N0200: pick up Y value
@N0201: select all the scopes; set Y value from the AC
@N0202: pick up X value
@N0203: draw the point using X val from AC
@N0204: pick up Y value
@N0205: select all the scopes; set Y value from the AC
@N0206: pick up X value
@N0207: draw the line using X val from AC
@N0210: pick up Y value
@N0213: pick up X value
@N0221: draws fifteen segments
@N0232: turn on Expand Mode for characters
@N0233: pick up Y value
@N0234: select the first scope; set Y value from the AC
@N0237: pick up Y value
@N0240: select the second scope; set Y value from the AC
@N0242: move right a bit
@N0245: yeah, ok, I'm using the same delta offset for x and y
@N0246: select all the scopes; set Y value from the AC
@N0247: pick up X value
@N0250: draw the point using X val from AC
@N0251: read the light gun register
@N0254: test the first gun
@N0256: test the second gun
@N0276: 2x delta for second gun
@N0300: pick up Y value
@N0301: set Y value from the AC
@N0311: a place to stash the AC
@N0313: turn on Expand Mode for characters
@N0323: pick up Y value
@N0324: select all the scopes; set Y value from the AC
@N0325: fetch the new x position
@N0326: operand address over-written in startup segment
@N0327: current x pos'n still in AC; add the delta to it
@N0331: advance the pointer in the char tab
@N0332: advance the loop counter
@N0333: ... and loop again if negative
@N0354: Zero
@N0355: One
@N0356: Two
@N0357: Three
@N0360: Four
@N0361: Five
@N0362: Six
@N0363: Seven
@N0364: Eight
@N0365: Nine
