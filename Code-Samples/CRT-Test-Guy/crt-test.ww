


; Diagnostic test for Whirlwind CRT emulation
; g fedorkow, dec 13, 2023

; Bug fix: Jan 2, 2025:  [guy] The asm used to start packing instructions at address zero by
;  default; I changed that to the conventional 0o40 a while back, but forgot to update
;  this code to get the default labels Zero and One located correctly.
; The simulator sets addresses zero and one to zero and one by default, in line with WW
;  convention, so these two definitions in the ASM serve only as documentation (or sources
;  of bugs when mis-used!)

          .org 0    ; added Jan 2, 2025
zero:     .word 0
one:      .word 1


          .org 0o40
main:     sp main_loop

main_loop:
          sp corner_dots
          sp corner_lines
          sp multi_segments
          sp char_gen_test
          sp scope_identify
          sp main_loop



          .pp MAX_POS_COORD=0o076040  ; should be 0o077740 to go right to the edge
          .pp MAX_NEG_COORD=0o101737
          .pp MAX_POS_X_DELTA=0o076000
          .pp MAX_NEG_X_DELTA=0o101000
          .pp MAX_POS_Y_DELTA=0o000174
          .pp MAX_NEG_Y_DELTA=0o000200

max_pos_coord: .word MAX_POS_COORD       ; maximum deflection for X or Y coords
max_neg_coord: .word MAX_NEG_COORD       ; maximum deflection for X or Y coords
max_pos_x_delta: .word MAX_POS_X_DELTA
max_neg_x_delta: .word MAX_NEG_X_DELTA
max_pos_y_delta: .word MAX_POS_Y_DELTA
max_neg_y_delta: .word MAX_NEG_Y_DELTA

; constants
c2:       .word 2
c3:       .word 3



corner_dots:
          ta cd_ret
          
          ca max_pos_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_pos_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC

          ca max_neg_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_neg_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC
                   
          ca max_pos_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_neg_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC

          ca max_neg_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_pos_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC

cd_ret:   sp 0


; draw a list of vectors from corner_list_ptr
; The list gives two vectors in each corner, plus a diagonal only in the top left 
corner_lines:
          ta cl_ret
          ca cdl_len
          ts cl_count
          ca corner_list_ptr
          td cl_index_x
          ad one          ; add one to the address
          td cl_index_y
          ad one          ; add one to the address          
          td cl_index_d

cl_index_y:  ca 0
          si   0o1677     ; select all the scopes; set Y value from the AC
          ca cl_index_y
          ad c3
          td cl_index_y
cl_index_x:  ca 0         ; put the X value in AC
cl_index_d:  rc 0          ; pick up the Delta vector

          ca cl_index_d   ; move pointer to next delta
          ad c3
          ts cl_index_d
          
          ca cl_index_x   ; move pointer to next X value
          ad c3
          td cl_index_x

          ao cl_count
          cp cl_index_y

cl_ret:   sp 0
; local variable
cl_count: .word 0


;;;;;;;;;  Corner Vector Test ;;;;;;;;;;;;
; This test draws short vectors in each of the four corners of the screen, with an extra 
; diagnoal to mark the top left corner.
;    The test is based on a list of display segments, expressed as native Whirlwind 'short' vectors.
; WW can draw lines using a full-resolution X & Y starting point, and then a DX and DY
; offset to define the end point.
;    In this table, coordinates are given in the same units as the actual display command. 
; The screen coords in pixels are shifted to the top part of a 16-bit word.
; The Delta offsets are shorter fields, stored in two eigh-bit halves of one word.  The native 
; vector instruction is +/- 32 units, where each unit is four screen pixels (I think!!).
corner_list_ptr: .word corner_display_list
corner_display_list:
          .word MAX_NEG_COORD     ; X coord  ; top left corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_Y_DELTA | MAX_POS_X_DELTA     ; Y-/X+ diagonal line

          .word MAX_NEG_COORD     ; X coord  ; top left corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_Y_DELTA   ; Y- downward line

          .word MAX_NEG_COORD     ; X coord  ; top left corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_POS_X_DELTA   ; X+ rightward line

          .word MAX_POS_COORD     ; X coord  ; top right corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_Y_DELTA   ; Y- downward line

          .word MAX_POS_COORD     ; X coord  ; top right corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_X_DELTA   ; X+ leftward line

          .word MAX_POS_COORD     ; X coord  ; Bottom right corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_POS_Y_DELTA   ; Y+ downward line

          .word MAX_POS_COORD     ; X coord  ; bottom right corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_NEG_X_DELTA   ; X- leftward line

          .word MAX_NEG_COORD     ; X coord  ; Bottom left corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_POS_Y_DELTA   ; Y+ upward line

          .word MAX_NEG_COORD     ; X coord  ; bottom left corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_POS_X_DELTA   ; X+ uptward line


;  cdl_len:  .word  0o177767 ; (corner_display_list - cdl_len)/3  ; compute negative of table length by subtracting start from finish
cdl_len:  .word  corner_display_list - cdl_len / 3  ; compute negative of table length by subtracting start from finish

;;;;;;;;;;;;;  Multi-Segment Test ;;;;;;;;;;;
; This test draws a series of horizontal, max-length vectors across the screen, each offset upwards by a small amount,
; to get a stair-step pattern.
multi_segments:
          ta ms_ret
          ca ms_x_start
          ts ms_x
          ca ms_y_start
          ts ms_y
          ca 0
          su ms_segs
          ts ms_count
  
ms_loop:
          ; draw a dot at the beginning of each segment
          ca ms_y        ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca ms_x        ; pick up X value
          rc 0           ; draw the point using X val from AC

          ca ms_y        ; pick up Y value
          si   0o1677     ; select all the scopes; set Y value from the AC
          ca ms_x        ; pick up X value
          rc max_pos_x_delta   ; draw the line using X val from AC

          ca ms_y        ; pick up Y value
          ad ms_y_delta
          ts ms_y
          ca ms_x        ; pick up X value
          ad ms_x_delta
          ts ms_x
          
          ao ms_count
          cp ms_loop
          
ms_ret:   sp 0

ms_segs:  .word 14  ; draws fifteen segments
ms_count: .word 0       
ms_x_start: .word MAX_NEG_COORD
ms_y_start: .word 0o50000
ms_x_delta: .word 0o10000
ms_y_delta: .word 0o01000
ms_x:     .word 0
ms_y:     .word 0


;;;;;;;;;;;;  Scope Identification
; show the digit 1 on scope-bit-0, 2 on scope-bit-1

scope_identify:
          ta si_ret
          si 0o14         ; turn on Expand Mode for characters

          ; mark the first scope
          ca si_y         ; pick up Y value
          si 0o2601       ; select the first scope; set Y value from the AC
          ca si_x
          rc char_tab + 1
          
          ; mark the second scope
          ca si_y         ; pick up Y value
          si 0o2602       ; select the second scope; set Y value from the AC
          ca si_x
          ad cg_x_delta   ; move right a bit
          rc char_tab + 2
          
light_gun_check:
          ; test the light gun by illuminating a point on both displays and
          ; seeing which gun hits it.
          ca si_y
          ad cg_x_delta   ; yeah, ok, I'm using the same delta offset for x and y
          si   0o677      ; select all the scopes; set Y value from the AC
          ca si_x         ; pick up X value
          rc 0            ; draw the point using X val from AC
          
          rd 0            ; read the light gun register
          cp lg_hit
          sp si_ret
          
lg_hit:   clc 1            ; test the first gun
          cp lg_hit_gun1
          clc 1            ; test the second gun
          cp lg_hit_gun2
          
si_ret:   sp 0
        

; two subroutine entry points with one return point...        
lg_hit_gun1:         ; mark the first gun
          ta lg_ret 
          ts lg_tmp_acc
          ca char_tab_ptr
          ad one
          td lg_rc_inst
          ca cg_x_delta   
          sp lg_hit_gun
          
lg_hit_gun2:         ; mark the second gun
          ta lg_ret 
          ts lg_tmp_acc
          ca char_tab_ptr
          ad c2
          td lg_rc_inst
          ca cg_x_delta 
          ad cg_x_delta     ; 2x delta for second gun
          sp lg_hit_gun
          
lg_hit_gun:
          ad si_y         ; pick up Y value
          si 0o2677       ; set Y value from the AC
          ca si_x
          ad cg_x_delta   
lg_rc_inst:  rc 0

          ca lg_tmp_acc
lg_ret:   sp 0


si_y:     .word 0o64000
si_x:     .word 0 - 0o50000
lg_tmp_acc: .word 0          ; a place to stash the AC


;;;;;;;;;;;;  Character Generator Test

char_gen_test:
          ta cg_ret
          si 0o14         ; turn on Expand Mode for characters
          ca 0
          su cg_segs
          ts cg_count
          ca char_seg_tab_ptr
          td cg_index
          ca cg_x_start
          ts cg_x
          ca cg_y         ; pick up Y value
          si 0o2677       ; select all the scopes; set Y value from the AC
          
cg_loop:  
          ca cg_x         ; fetch the new x position

cg_index: rc 0           ;  operand address over-written in startup segment
          ad cg_x_delta  ; current x pos'n still in AC; add the delta to it
          ts cg_x
          ao cg_index    ; advance the pointer in the char tab
          
          ao cg_count    ; advance the loop counter
          cp cg_loop     ;  ... and loop again if negative
          
cg_ret:   sp 0


cg_segs:  .word 7 + 10 - 1
cg_count: .word 0
cg_x_start: .word 0 - 0o24000
cg_x_delta: .word 0o4000
cg_x:      .word 0
cg_y:      .word 0o40000
char_seg_tab_ptr: .word char_seg_tab
char_tab_ptr: .word char_tab

; light each segment one at a time
char_seg_tab: .word 0o040000
          .word 0o020000
          .word 0o010000
          .word 0o004000
          .word 0o002000
          .word 0o001000
          .word 0o000400


; light segments corresponding to the digits 0 - 9
          .pp B1=0o40000
          .pp B2=0o20000
          .pp B3=0o10000
          .pp B4=0o04000
          .pp B5=0o02000
          .pp B6=0o01000
          .pp B7=0o00400
          
char_tab: .word B1 | B2 | B3 | B5 | B6 | B7       ; Zero
          .word B3 | B7                           ; One
          .word B1 | B2 | B4 | B6 | B7            ; Two
          .word B2 | B3 | B4 | B6 | B7            ; Three
          .word B3 | B4 | B5 | B7                 ; Four
          .word B2 | B3 | B4 | B5 | B6            ; Five
          .word B1 | B2 | B3 | B4 | B5            ; Six
          .word B3 | B6 | B7                      ; Seven
          .word B1 | B2 | B3 | B4 | B5 | B6 | B7  ; Eight
          .word B3 | B4 | B5 | B6 | B7            ; Nine

