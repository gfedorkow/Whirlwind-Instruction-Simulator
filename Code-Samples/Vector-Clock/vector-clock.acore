
; *** Core Image ***
%File: vector-clock.ww
%TapeID: None
@C0000: 0000000 0000001  None    None    None    None    None    None   
@C0040: 0100000 0074071 0074044 0074040 0050065 0130066 0040066 0114602 
@C0050: 0134000 0070053 0074064 0100000 0040066 0130067 0040067 0114602 
@C0060: 0134000 0070063 0074064 0074064 0100000 0074000 0000000 0000000 
@C0070: 0000000 0050075 0074234 0074076 0074114 0074000 0050113 0100000 
@C0100: 0040304 0040305 0100607 0040540 0100066 0074543 0100541 0040306 
@C0110: 0100542 0040307 0074310 0074000 0050124 0100607 0040140 0100067 
@C0120: 0040137 0100576 0040141 0074142 0074000 0050136 0100611 0040140 
@C0130: 0100066 0110577 0040137 0100577 0040141 0074142 0074000 0000000 
@C0140: 0000000 0000000 0050226 0100140 0040540 0140612 0040233 0100137 
@C0150: 0110604 0114141 0074543 0100541 0140233 0040304 0040231 0100542 
@C0160: 0140233 0040305 0040232 0100137 0074543 0100541 0040306 0100542 
@C0170: 0040307 0074310 0100137 0110604 0110141 0074543 0100541 0140233 
@C0200: 0040304 0040227 0100542 0140233 0040305 0040230 0100137 0074543 
@C0210: 0100541 0040306 0100542 0040307 0074310 0100227 0040304 0100230 
@C0220: 0040305 0100231 0040306 0100232 0040307 0074310 0074000 0000000 
@C0230: 0000000 0000000 0000000 0014631 0050300 0100607 0040540 0100616 
@C0240: 0044245 0110001 0044247 0100600 0040303 0100000 0040301 0100000 
@C0250: 0040302 0130247 0130247 0130245 0130245 0100303 0074520 0070265 
@C0260: 0100302 0000677 0100301 0024000 0074276 0100301 0040304 0140610 
@C0270: 0040306 0100302 0040305 0140610 0040307 0074310 0130303 0070245 
@C0300: 0074000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0310: 0050420 0100000 0040445 0100304 0040434 0100305 0040435 0100306 
@C0320: 0040436 0100307 0040437 0100435 0160001 0040447 0100437 0160001 
@C0330: 0114447 0040441 0134000 0040446 0100434 0160001 0040447 0100436 
@C0340: 0160001 0114447 0040440 0134000 0114446 0070421 0100441 0150440 
@C0350: 0154017 0040444 0100440 0040442 0100441 0040443 0100442 0134000 
@C0360: 0114615 0070372 0100442 0070367 0100615 0040442 0074372 0100000 
@C0370: 0114615 0040442 0100442 0140444 0040443 0074450 0100435 0110443 
@C0400: 0040435 0100434 0110442 0040434 0030436 0070356 0100434 0114436 
@C0410: 0134000 0070420 0100436 0114434 0040442 0074356 0074420 0074420 
@C0420: 0074000 0100001 0040445 0100304 0040435 0100305 0040434 0100306 
@C0430: 0040437 0100307 0040436 0074323 0000000 0000000 0000000 0000000 
@C0440: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0450: 0050512 0100445 0134000 0070465 0100442 0040515 0100443 0040514 
@C0460: 0100434 0040517 0100435 0040516 0074475 0100442 0040514 0100443 
@C0470: 0040515 0100434 0040516 0100435 0040517 0100514 0154005 0174613 
@C0500: 0040513 0100515 0160003 0174614 0110513 0040513 0100517 0001677 
@C0510: 0100516 0024513 0074000 0000000 0000000 0000000 0000000 0000000 
@C0520: 0050534 0070523 0074524 0030606 0040536 0150535 0155011 0144535 
@C0530: 0155006 0114536 0134577 0134000 0074000 0005000 0000000 0000000 
@C0540: 0000000 0000000 0000000 0050574 0040575 0110600 0070551 0114602 
@C0550: 0040575 0100575 0114000 0110001 0070556 0074560 0110601 0040575 
@C0560: 0100575 0154001 0110616 0044566 0110001 0044571 0100000 0140540 
@C0570: 0040541 0100000 0140540 0040542 0074000 0000000 0000002 0000004 
@C0600: 0177704 0000073 0000074 0000034 0000036 0000040 0177777 0077270 
@C0610: 0074631 0060000 0014631 0176000 0000374 0001740 0000617 0000000 
@C0620: 0071463 0006012 0071221 0013763 0070256 0021631 0066617 0027333 
@C0630: 0064475 0034631 0061704 0041666 0056462 0046425 0052634 0052634 
@C0640: 0046425 0056462 0041666 0061704 0034631 0064475 0027333 0066617 
@C0650: 0021631 0070256 0013763 0071221 0006012 0071463 0177777 0071221 
@C0660: 0171765 0070256 0164014 0066617 0156146 0064475 0150444 0061704 
@C0670: 0143146 0056462 0136111 0052634 0131352 0046425 0125143 0041666 
@C0700: 0121315 0034631 0116073 0027333 0113302 0021631 0111160 0013763 
@C0710: 0107521 0006012 0106556 0177777 0106314 0171765 0106556 0164014 
@C0720: 0107521 0156146 0111160 0150444 0113302 0143146 0116073 0136111 
@C0730: 0121315 0131352 0125143 0125143 0131352 0121315 0136111 0116073 
@C0740: 0143146 0113302 0150444 0111160 0156146 0107521 0164014 0106556 
@C0750: 0171765 0106314 0000000 0106556 0006012 0107521 0013763 0111160 
@C0760: 0021631 0113302 0027333 0116073 0034631 0121315 0041666 0125143 
@C0770: 0046425 0131352 0052634 0136111 0056462 0143146 0061704 0150444 
@C1000: 0064475 0156146 0066617 0164014 0070256 0171765 0071221 0000000 
@C1010: 0054631 0004535 0054433 0011240 0053644 0015660 0052466 0022161 
@C1020: 0050732 0026314 0046630 0032252 0044174 0035764 0041225 0041225 
@C1030: 0035764 0044174 0032252 0046630 0026314 0050732 0022161 0052466 
@C1040: 0015660 0053644 0011240 0054433 0004535 0054631 0177777 0054433 
@C1050: 0173242 0053644 0166537 0052466 0162117 0050732 0155616 0046630 
@C1060: 0151463 0044174 0145525 0041225 0142013 0035764 0136552 0032252 
@C1070: 0133603 0026314 0131147 0022161 0127045 0015660 0125311 0011240 
@C1100: 0124133 0004535 0123344 0177777 0123146 0173242 0123344 0166537 
@C1110: 0124133 0162117 0125311 0155616 0127045 0151463 0131147 0145525 
@C1120: 0133603 0142013 0136552 0136552 0142013 0133603 0145525 0131147 
@C1130: 0151463 0127045 0155616 0125311 0162117 0124133 0166537 0123344 
@C1140: 0173242 0123146 0000000 0123344 0004535 0124133 0011240 0125311 
@C1150: 0015660 0127045 0022161 0131147 0026314 0133603 0032252 0136552 
@C1160: 0035764 0142013 0041225 0145525 0044174 0151463 0046630 0155616 
@C1170: 0050732 0162117 0052466 0166537 0053644 0173242 0054433 0177777 
@C1200: 0163146 0176523 0163212 0175255 0163365 0174026 0163647 0172626 
@C1210: 0164235 0171463 0164724 0170364 0165512 0167336 0166372 0166372 
@C1220: 0167336 0165512 0170364 0164724 0171463 0164235 0172626 0163647 
@C1230: 0174026 0163365 0175255 0163212 0176523 0163146 0000000 0163212 
@C1240: 0001254 0163365 0002522 0163647 0003751 0164235 0005151 0164724 
@C1250: 0006314 0165512 0007413 0166372 0010441 0167336 0011405 0170364 
@C1260: 0012265 0171463 0013053 0172626 0013542 0174026 0014130 0175255 
@C1270: 0014412 0176523 0014565 0000000 0014631 0001254 0014565 0002522 
@C1300: 0014412 0003751 0014130 0005151 0013542 0006314 0013053 0007413 
@C1310: 0012265 0010441 0011405 0011405 0010441 0012265 0007413 0013053 
@C1320: 0006314 0013542 0005151 0014130 0003751 0014412 0002522 0014565 
@C1330: 0001254 0014631 0177777 0014565 0176523 0014412 0175255 0014130 
@C1340: 0174026 0013542 0172626 0013053 0171463 0012265 0170364 0011405 
@C1350: 0167336 0010441 0166372 0007413 0165512 0006314 0164724 0005151 
@C1360: 0164235 0003751 0163647 0002522 0163365 0001254 0163212 0000000 
@C1370: 0074365 0006244 0074114 0014445 0073120 0022540 0071411 0030462 
@C1400: 0067200 0036172 0064301 0043430 0060733 0050357 0054743 0054743 
@C1410: 0050357 0060733 0043430 0064301 0036172 0067200 0030462 0071411 
@C1420: 0022540 0073120 0014445 0074114 0006244 0074365 0177777 0074114 
@C1430: 0171533 0073120 0163332 0071411 0155237 0067200 0147315 0064301 
@C1440: 0141605 0060733 0134347 0054743 0127420 0050357 0123034 0043430 
@C1450: 0117044 0036172 0113476 0030462 0110577 0022540 0106366 0014445 
@C1460: 0104657 0006244 0103663 0177777 0103412 0171533 0103663 0163332 
@C1470: 0104657 0155237 0106366 0147315 0110577 0141605 0113476 0134347 
@C1500: 0117044 0127420 0123034 0123034 0127420 0117044 0134347 0113476 
@C1510: 0141605 0110577 0147315 0106366 0155237 0104657 0163332 0103663 
@C1520: 0171533 0103412 0000000 0103663 0006244 0104657 0014445 0106366 
@C1530: 0022540 0110577 0030462 0113476 0036172 0117044 0043430 0123034 
@C1540: 0050357 0127420 0054743 0134347 0060733 0141605 0064301 0147315 
@C1550: 0067200 0155237 0071411 0163332 0073120 0171533 0074114  None   
@S0000: zero
@S0001: one
@S0040: main
@S0044: update_time
@S0053: i_ut_new_minute
@S0063: i_ut_new_hour
@S0064: ut_ret
@S0065: ut_ret_sp
@S0066: cur_sec
@S0067: cur_min
@S0070: cur_hour
@S0071: refresh_screen
@S0075: rs_ret
@S0076: draw_seconds_hand
@S0113: br_ds_ret
@S0114: draw_minutes_hand
@S0124: br_dm_ret
@S0125: draw_hours_hand
@S0136: br_dh_ret
@S0137: dth_arg_angle
@S0140: dth_arg_len_scale
@S0141: dth_arg_width
@S0142: draw_triangle_hand
@S0215: dth_draw_tail
@S0226: br_dth_ret
@S0227: dth_tail_x1
@S0230: dth_tail_y1
@S0231: dth_tail_x2
@S0232: dth_tail_y2
@S0233: dth_tail_scale
@S0234: draw_ring
@S0245: draw_outer_ring
@S0245: i_ca_x1
@S0247: i_ca_y1
@S0265: dr_tick
@S0276: outer_ring_dot
@S0300: dr_ret
@S0301: dr_x1
@S0302: dr_y1
@S0303: dr_cnt1
@S0304: dv_arg_x1
@S0305: dv_arg_y1
@S0306: dv_arg_x2
@S0307: dv_arg_y2
@S0310: draw_vector
@S0323: dv_calc_slope
@S0346: br_dv_x_is_bigger
@S0356: br_dv_x_loop
@S0367: br_dv_neg_dx
@S0372: br_dv_short_x
@S0372: sp br_dv_calc_y
@S0372: br_dv_calc_y
@S0404: dv_pre_test_loop_end
@S0406: dv_test_loop_end
@S0417: br_dv_loop_exit
@S0420: dv_ret
@S0421: br_dv_y_is_bigger
@S0434: dv_x1
@S0435: dv_y1
@S0436: dv_x2
@S0437: dv_y2
@S0440: dv_delta_x
@S0441: dv_delta_y
@S0442: dv_dx
@S0443: dv_dy
@S0444: dv_x_slope
@S0445: dv_swap_xy
@S0446: dv_tmp1
@S0447: dv_slope_tmp1
@S0450: draw_short_vector
@S0465: dsv_dont_do_swap
@S0475: dsv_figure_offset
@S0512: dsv_ret
@S0513: dsv_vec
@S0514: dsv_dx
@S0515: dsv_dy
@S0516: dsv_x1
@S0517: dsv_y1
@S0520: find_mod5
@S0523: negative_arg
@S0524: positive_arg
@S0534: ret1
@S0535: mod
@S0536: fm_arg1
@S0537: t1
@S0540: rtt_arg_scale
@S0541: rtt_x
@S0542: rtt_y
@S0543: read_trig_table
@S0551: rtt_smaller_than_sixty
@S0556: rtt_less_than_zero
@S0560: rtt_do_lookup
@S0566: i_rtt_ca_x1
@S0571: i_rtt_ca_y1
@S0574: rtt_ret
@S0575: rtt_index
@S0576: two
@S0577: four
@S0600: minus59
@S0601: fifty_nine
@S0602: sixty
@S0603: twenty_eight
@S0604: thirty
@S0605: thirty_two
@S0606: all_ones
@S0607: point_99
@S0610: point_95
@S0611: point_75
@S0612: point_20
@S0613: top_6_bits
@S0614: low_6_bits
@S0615: max_vector
@S0616: minutes_ring_pointer
@S0617: minutes_ring
@S1007: hours_ring
@S1177: inner_ring
@S1367: markings_ring
@E0065: print: "New Time hour=%d; min=%d; sec=%d", cur_hour, cur_min, cur_sec
@E0506: print: "Short Vector: x1=%d; y1=%d; dx=%d; dy=%d; vec=%o", dv_x1, dv_y1, dv_dx, dv_dy, dsv_vec
@N0000: these are set automatically
@N0044: this points to the actual return instruction
@N0045: increment seconds and check for overflow
@N0052: if the seconds don't overflow, we're done
@N0062: if the minutes don't overflow, we're done
@N0077: seconds hand starts from the origin, (0,0)
@N0104: load the table offset into AC
@N0105: then call the routine to index the table and fetch (x, y)
@N0144: set the scale factor for values returned from the trig table lookup
@N0146: set the length of the tail for the triangle hand
@N0147: load the table offset into AC
@N0152: then call the routine to index the table and fetch (x, y)
@N0163: load the table offset into AC
@N0164: then call the routine to index the table and fetch (x, y)
@N0171: draw the left-hand edge of the minutes hand
@N0172: load the table offset into AC
@N0175: then call the routine to index the table and fetch (x, y)
@N0206: load the table offset into AC
@N0207: then call the routine to index the table and fetch (x, y)
@N0214: draw the right hand end of the triangle hand
@N0236: it's a start to using rtt (not done yet!)
@N0237: initialize the instruction pointers
@N0244: initialize the loop counter
@N0251: increment the Y address twice
@N0253: increment the X address twice
@N0255: pick up the rotational angle around the face
@N0256: compute the modulo-5 remainder
@N0257: branch on neg-zero to draw a tick-mark
@N0260: pick up the Y value
@N0261: select all the scopes; set Y value
@N0276: increment the counter
@N0277: loop while the counter is still negative
@N0300: end of subroutine
@N0310: save the return address
@N0312: default is to assume that the slope is less than 1.0
@N0324: divide by two
@N0332: find magnitude of delta_y
@N0335: divide by two
@N0343: find magnitude of delta_x
@N0344: subtract |y| from |x|
@N0345: branch if the Y delta is bigger than X
@N0346: calculate the slope
@N0351: save the slope
@N0353: copy to the tmp dx
@N0355: copy to the tmp dy
@N0356: fetch the remaining delta
@N0357: subtract zero from the abs value of AC (i.e., make it positive)
@N0360: test if it's short enough to draw as-is
@N0361: branch if it's short enough to draw as-is
@N0362: test the sign of dx
@N0363: bramch if negative
@N0364: otherwise, change dx to the max +vector
@N0366: continue to figure dY
@N0370: otherwise, change dx to the max -vector
@N0373: multiply the delta_x by the slope
@N0403: finished updating for this loop
@N0405: go around again
@N0407: test to see if x1==x2; if so, we're done
@N0411: branch if negative zero; we're done
@N0412: if we're going around again, update dv_dx.
@N0413: (no need to mess with dv_dy; it's recomputed from the slope
@N0415: go around again
@N0416: all done with the x-is-bigger vector
@N0422: slope is greater than 1.0
@N0445: swap x & y if this value is non-zero; don't swap if zero
@N0450: store the return address
@N0451: load the swap bit
@N0452: compare to zero; dm is -0 if the value in dv_swap_xy is +0 or -0, and positive otherwise
@N0454: copy incoming args to local vars without swap
@N0465: copy incoming args to local vars without swap
@N0502: shift to lower part of word, preserving the sign bit
@N0503: mask off the unused upper half
@N0504: this should be an "OR", but no such luck
@N0506: pick up the Y value
@N0507: select all the scopes; set Y value
@N0513: one word for the assembly of the Delta Vector
@N0514: tmp copies of input args, possibly swapped.
@N0523: invert the negative arg
@N0524: save the incoming argument
@N0526: after this instruction, AC contains the Quotient
@N0531: subtract the initial number; this gives the negative of the Remainder
@N0532: yeah, ok, the incoming arg is negative and counts up to zero;
@N0533: but I want the return code to start at zero and count up to four
@N0535: that's 5/64
@N0536: temporary storage for Mod argument
@N0543: save return address
@N0544: store the index so we can do the range-checks with the AC
@N0547: if it's larger than 60, subtract 60 to get it in range
@N0552: make sure if it's zero, it's negative zero; not sure it there's a better way to do this!
@N0553: increment by one.  If it was negative zero, this makes it positive; if negative one or
@N0554: br is less than zero
@N0556: we already incremented the AC by one, so adding 59 more wraps the index in AC
@N0561: double the offset to make a table index
@N0613: mask for x vector offset
@N0614: mask for y vector offset
@N0615: It's five bits (ignoring the sign), offset to end on Bit 10
