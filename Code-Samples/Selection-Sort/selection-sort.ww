; selection sort demo
; Jeremiah DeGreeff May 2023
; based on ideas from http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/whirlwind/R-series/R-196_Programming_for_Whirlwind_I_Jun51.pdf
; pages 33-43

       .jumpto main
       .ORG 0o040
main:  cs reset         ; load initial value for outer loop counter
       ts count1        ; reset outer loop counter
loop:  ca count1        ; load initial value for inner loop counter
       ts count2        ; reset inner counter
load1: ca data          ; load xi
       ts max           ; xi is max for now
       ca xi            ; load address of xi
       td swap2         ; copy address of xi into instruction
       ts xj            ; store address of xi as address of xj
       ao xj            ; store address of xi + 1 as address of xj
       td if            ; copy address of xj into instruction
       td then          ; copy address of xj into instruction
if:    ca 0             ; load value of xj
       su max           ; compare xj to max
       cp endif         ; jump if smaller than max
then:  ca 0             ; load value of xj
       ts max           ; xj is the new max
       ca xj            ; load address of max
       td swap1         ; copy address of max into instruction
endif: ao if            ; increment xj address
       ao then          ; increment xj address
       ao xj            ; increment xj address
       ao count2        ; increment inner loop counter
       cp if            ; continue inner loop if counter hasn't expired
       .exec wwlog(f"### max: {py_int(cm.rd(rl('max')))} ###")
load2: ca data          ; load value to swap
swap1: ts 0             ; write value to address of max
       ca max           ; load value to swap
swap2: ts 0             ; write value to address of xi
       .exec for i in range(0, 10): print(f"### data[{i}] = {py_int(cm.rd(rl('data') + i))} ###")
       ao load1         ; increment xi address
       ao load2         ; increment xi address
       ao xi            ; increment xi address
       ao count1        ; increment outer loop counter
       cp loop          ; continue outer loop if counter hasn't expired
       si 0             ; halt

       .ORG 0o200
reset: .word 0.00010    ; (n - 2) * 2^-15 to perform n - 1 comparisons
count1:.word 0.00000    ; outer loop counter
count2:.word 0.00000    ; inner loop counter
max:   .word 0.00000    ; maximum value seen in this inner loop
xi:    .word data       ; address of xi
xj:    .word 0.00000    ; address of xj
data:  .word 0.00004
       .word 0.00003
       .word 0.00011
       .word 0.00030
       .word 0.00023
       .word 0.00007
       .word 0.00004
       .word 0.00000
       .word 0.00011
       .word 0.00025
