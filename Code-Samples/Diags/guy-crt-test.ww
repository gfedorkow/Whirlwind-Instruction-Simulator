


; Diagnostic test for Whirlwind CRT emulation
; g fedorkow, dec 13, 2023


zero:   .word 0
one:    .word 1


          .org 0o40
main:     sp main_loop

main_loop:
          sp corner_dots
          sp corner_lines
          sp multi_segments
          sp char_gen_test
          sp main_loop



          .pp MAX_POS_COORD=0o076040  ; should be 0o077740 to go right to the edge
          .pp MAX_NEG_COORD=0o101737
          .pp MAX_POS_X_DELTA=0o076000
          .pp MAX_NEG_X_DELTA=0o101000
          .pp MAX_POS_Y_DELTA=0o000174
          .pp MAX_NEG_Y_DELTA=0o000200

max_pos_coord: .word MAX_POS_COORD       ; maximum deflection for X or Y coords
max_neg_coord: .word MAX_NEG_COORD       ; maximum deflection for X or Y coords
max_pos_x_delta: .word MAX_POS_X_DELTA
max_neg_x_delta: .word MAX_NEG_X_DELTA
max_pos_y_delta: .word MAX_POS_Y_DELTA
max_neg_y_delta: .word MAX_NEG_Y_DELTA

; constants
c3:       .word 3


corner_dots:
          ta cd_ret
          
          ca max_pos_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_pos_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC

          ca max_neg_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_neg_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC
                   
          ca max_pos_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_neg_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC

          ca max_neg_coord   ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca max_pos_coord   ; pick up X value
          rc 0           ; draw the point using X val from AC

cd_ret:   sp 0


; draw a list of vectors from corner_list_ptr
; The list gives two vectors in each corner, plus a diagonal only in the top left 
corner_lines:
          ta cl_ret
          ca cdl_len
          ts cl_count
          ca corner_list_ptr
          td cl_index_x
          ad one          ; add one to the address
          td cl_index_y
          ad one          ; add one to the address          
          td cl_index_d

cl_index_y:  ca 0
          si   0o1677     ; select all the scopes; set Y value from the AC
          ca cl_index_y
          ad c3
          td cl_index_y
cl_index_x:  ca 0         ; put the X value in AC
cl_index_d:  rc 0          ; pick up the Delta vector

          ca cl_index_d   ; move pointer to next delta
          ad c3
          ts cl_index_d
          
          ca cl_index_x   ; move pointer to next X value
          ad c3
          td cl_index_x

          ao cl_count
          cp cl_index_y

cl_ret:   sp 0
; local variable
cl_count: .word 0


;;;;;;;;;  Corner Vector Test ;;;;;;;;;;;;
; This test draws short vectors in each of the four corners of the screen, with an extra 
; diagnoal to mark the top left corner.
;    The test is based on a list of display segments, expressed as native Whirlwind 'short' vectors.
; WW can draw lines using a full-resolution X & Y starting point, and then a DX and DY
; offset to define the end point.
;    In this table, coordinates are given in the same units as the actual display command. 
; The screen coords in pixels are shifted to the top part of a 16-bit word.
; The Delta offsets are shorter fields, stored in two eigh-bit halves of one word.  The native 
; vector instruction is +/- 32 units, where each unit is four screen pixels (I think!!).
corner_list_ptr: .word corner_display_list
corner_display_list:
          .word MAX_NEG_COORD     ; X coord  ; top left corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_Y_DELTA | MAX_POS_X_DELTA     ; Y-/X+ diagonal line

          .word MAX_NEG_COORD     ; X coord  ; top left corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_Y_DELTA   ; Y- downward line

          .word MAX_NEG_COORD     ; X coord  ; top left corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_POS_X_DELTA   ; X+ rightward line

          .word MAX_POS_COORD     ; X coord  ; top right corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_Y_DELTA   ; Y- downward line

          .word MAX_POS_COORD     ; X coord  ; top right corner
          .word MAX_POS_COORD     ; Y coord
          .word MAX_NEG_X_DELTA   ; X+ leftward line

          .word MAX_POS_COORD     ; X coord  ; Bottom right corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_POS_Y_DELTA   ; Y+ downward line

          .word MAX_POS_COORD     ; X coord  ; bottom right corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_NEG_X_DELTA   ; X- leftward line

          .word MAX_NEG_COORD     ; X coord  ; Bottom left corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_POS_Y_DELTA   ; Y+ upward line

          .word MAX_NEG_COORD     ; X coord  ; bottom left corner
          .word MAX_NEG_COORD     ; Y coord
          .word MAX_POS_X_DELTA   ; X+ uptward line


;  cdl_len:  .word  0o177767 ; (corner_display_list - cdl_len)/3  ; compute negative of table length by subtracting start from finish
cdl_len:  .word  corner_display_list - cdl_len / 3  ; compute negative of table length by subtracting start from finish

;;;;;;;;;;;;;  Multi-Segment Test ;;;;;;;;;;;
; This test draws a series of horizontal, max-length vectors across the screen, each offset upwards by a small amount,
; to get a stair-step pattern.
multi_segments:
          ta ms_ret
          ca ms_x_start
          ts ms_x
          ca ms_y_start
          ts ms_y
          ca 0
          su ms_segs
          ts ms_count
  
ms_loop:
          ; draw a dot at the beginning of each segment
          ca ms_y        ; pick up Y value
          si   0o677     ; select all the scopes; set Y value from the AC
          ca ms_x        ; pick up X value
          rc 0           ; draw the point using X val from AC

          ca ms_y        ; pick up Y value
          si   0o1677     ; select all the scopes; set Y value from the AC
          ca ms_x        ; pick up X value
          rc max_pos_x_delta   ; draw the line using X val from AC

          ca ms_y        ; pick up Y value
          ad ms_y_delta
          ts ms_y
          ca ms_x        ; pick up X value
          ad ms_x_delta
          ts ms_x
          
          ao ms_count
          cp ms_loop
          
ms_ret:   sp 0

ms_segs:  .word 14  ; draws fifteen segments
ms_count: .word 0       
ms_x_start: .word MAX_NEG_COORD
ms_y_start: .word 0o50000
ms_x_delta: .word 0o10000
ms_y_delta: .word 0o01000
ms_x:     .word 0
ms_y:     .word 0


;;;;;;;;;;;;  Character Generator Test

char_gen_test:
          ta cg_ret
          si 0o14         ; turn on Expand Mode for characters
          ca 0
          su cg_segs
          ts cg_count
          ca char_tab_ptr
          td cg_index
          ca cg_x_start
          ts cg_x
          ca cg_y         ; pick up Y value
          si 0o2677       ; select all the scopes; set Y value from the AC
          
cg_loop:  
          ca cg_x         ; fetch the new x position

cg_index: rc 0           ;  operand address over-written in startup segment
          ad cg_x_delta  ; current x pos'n still in AC; add the delta to it
          ts cg_x
          ao cg_index    ; advance the pointer in the char tab
          
          ao cg_count    ; advance the loop counter
          cp cg_loop     ;  ... and loop again if negative
          
cg_ret:   sp 0


cg_segs:  .word 6
cg_count: .word 0
cg_x_start: .word 0o000
cg_x_delta: .word 0o4000
cg_x:      .word 0
cg_y:      .word 0o40000
char_tab_ptr: .word char_tab
char_tab: .word 0o040000
          .word 0o020000
          .word 0o010000
          .word 0o004000
          .word 0o002000
          .word 0o001000
          .word 0o000400

