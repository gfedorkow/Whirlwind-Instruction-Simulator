                        ;  bouncing ball demo
                        ;  guy fedorkow, Jan 2019
                        ;  copied from http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/whirlwind/R-series/R-196_Programming_for_Whirlwind_I_Jun51.pdf
                        ;  pdf page 62
                        ;  translated into assembler with labels for variables and addresses
                        ;  updated to use the 1954 I/O instruction set for display

                        .jumpto main      ;  
                        .org 1         ;  
@0001:100207      main: ca   XI        ; Initialize X axis @@JumpedToBy a0046 
@0002:040201            ts   Xi        ;  
@0003:100210            ca   YI        ; initialize Y axis 
@0004:040202            ts   Yi        ;  
@0005:100211            ca   VYi       ; Iniitialize Y Velocity    ;; guy: this was the designated loop return in the exemplar, but that's clearly wrong 
@0006:040203            ts   Vy        ;  

@0007:100201      loop: ca   Xi        ; fetch current X value @@JumpedToBy a0045 
@0010:110212            ad   Vxdt      ; add the velocity increment 
                        ;        Qh Xi   ; @201 ; output x axis
@0011:040201            ts   Xi        ; store the next X back to Xi 

@0012:100214            ca   Yha       ; fetch the y (horizontal) axis line 
                        ;        Qd Yha  ; @212 ; output the y axis point
@0013:000600            si   600       ; select point; the Y deflection is Yha, picked up from ACC 
@0014:100201            ca   Xi        ; put x in ACC 
@0015:024000            rc   0         ; output a point to the display 
@0016:014000            rd   0         ; this is guy cheating -- the current display driver only refreshes when mouse input is expected. 

                        ; postitive falls through, negative takes the branch
@0017:104202            cs   Yi        ; compare current Y to Y Axis    ;guy - cs seems like the wrong op code; it assumes Y Axis is zero 
@0020:070031            cp   nobounce  ; @17 branch if it's not time to bounce 
@0021:104203            cs   Vy        ; fetch velocity to see if we're already starting to bounce 
@0022:070031            cp   nobounce  ; branch if velocity is already positive [instruction added by guy] 

                        ;  do a bounce by multiplying by the loss factor, reversing the velocity, and setting the
                        ;  Y position to equal the axis.
@0023:100203    bounce: ca   Vy        ; @203 ; fetch Y velocity 
@0024:140204            mr   R         ; @204 ; multiply by bounce loss and reverse the sign 
                        ;         slr 1   ; [guy] this is an embarrassing hack; I think my multiply is still wrong by a bit
@0025:040203            ts   Vy        ; @203 ; store the result in Y Velocity 
                        ; the following two instructions added by guy
@0026:100214            ca   Yha       ; fetch the Y Axis (better be zero until the bug above is fixed) 
@0027:040202            ts   Yi        ;  
@0030:074034            sp   continue  ; skip the step adding negative gravitation acceleration 

@0031:100203  nobounce: ca   Vy        ; for no bounce, fetch the current velocity @@JumpedToBy a0020 a0022 
@0032:114205            su   Gdt       ; subtract gravitational constant 
@0033:040203            ts   Vy        ; store the result in Y Velocity 
@0034:140206  continue: mr   dt        ; multiply velocity by time increment @@JumpedToBy a0030 
@0035:110202            ad   Yi        ; add the incremental distance to the current Y value 
                        ;        qd Yi   ; @202 ; output the Y value for the ball (same X as last time)
@0036:040202            ts   Yi        ; @202  ;guy: emulate store that was part of qd 
@0037:000600            si   600       ; new-style i/o instruction; set the Y coord now in the ACC 
@0040:100201            ca   Xi        ; put X coord in ACC 
@0041:024000            rc   0         ; output a point to the display 
@0042:014000            rd   0         ; this is guy cheating -- the current display driver only refreshes when mouse input is expected. 

@0043:120201            cm   Xi        ; retrieve current X coord 
@0044:114213            su   Xul       ; compare to X Upper Limit 
@0045:070007            cp   loop      ; @5   ; branch to next iteration 
@0046:074001            sp   main      ; @1   ; start all over to refresh the display 

                        .org 201       ;  
@0201:000000        Xi: .word 0         ; current i'th value of x @@WrittenBy a0002 a0011 ReadBy loop a0014 a0040 a0043 
@0202:000000        Yi: .word 0         ; current i'th value of y @@WrittenBy a0004 a0027 a0036 ReadBy a0017 a0035 
@0203:000000        Vy: .word 0         ; current i'th value of velocity of y @@WrittenBy a0006 a0025 a0033 ReadBy a0021 bounce nobounce 
@0204:107777         R: .word 1.07777   ; constant "coefficient of Restitution", i.e., energy loss during the bounce.  This number should be negative to reverse the ball's direction @@ReadBy a0024 
@0205:001000       Gdt: .word 0.01000   ; constant graviational constant times delta t @@ReadBy a0032 
@0206:040000        dt: .word 0.40000   ; constant time step (delta t) @@ReadBy continue 
@0207:117777        XI: .word 1.17777   ; (-0.600)         ; constant starting position for X @@ReadBy main 
@0210:060000        YI: .word 0.60000   ; constant starting position for Y @@ReadBy a0003 
@0211:000000       VYi: .word 0.00000   ; constant starting velocity for Y @@ReadBy a0005 
@0212:000600      Vxdt: .word 0.00600   ; constant X velocity times delta t @@ReadBy a0010 
@0213:060000       Xul: .word 0.60000   ; constant X upper limit (i.e., the right-hand end of the simulation) @@ReadBy a0044 
@0214:000000       Yha: .word 0         ; constant Y value of horizontal axis @@ReadBy a0012 a0026 

