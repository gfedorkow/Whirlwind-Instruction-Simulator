                       ; bouncing ball demo
                       ; guy fedorkow, Jan 2019
                       ; copied from http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/whirlwind/R-series/R-196_Programming_for_Whirlwind_I_Jun51.pdf
                       ; pdf page 62
                       ; translated into assembler with labels for variables and addresses
                       ; updated to use the 1954 I/O instruction set for display


                       .switch FlipFlopPreset02, 0.40201
                       .switch FlipFlopPreset03, 1.00210
                       .switch FlipFlopPreset05, 1.00211
                       .switch FlipFlopPreset06, 0.40203


                       .dbwgt Vy
                       .dbwgt R, 0o200
                       .dbwgt Xi, 0o400
                       .dbwgt Yi, 0o100

                       .jumpto main
                       .org 1
@0001:100207     main: ca XI                    ;   Initialize X axis @@JumpedToBy a0044
@0002:040201           ts Xi
@0003:100210           ca YI                    ;   initialize Y axis
@0004:040202           ts Yi
@0005:100211           ca VYi                   ;  Initialize Y Velocity    ;; guy: this was the designated loop return in the exemplar, but that's clearly wrong
@0006:040203           ts Vy

@0007:100201     loop: ca Xi                    ;  fetch current X value @@JumpedToBy a0043
@0010:110212           ad Vxdt                  ; add the velocity increment
                       ;       Qh Xi   ; @201 ; output x axis
@0011:040201           ts Xi                    ;   store the next X back to Xi

@0012:100214           ca Yha                   ; fetch the y (horizontal) axis line
                       ;       Qd Yha  ; @212 ; output the y axis point
@0013:000600           si 0o600                 ; select point; the Y deflection is Yha, picked up from ACC ; Auto-Annotate I/O: Display Points
@0014:100201           ca Xi                    ; put x in ACC
@0015:024000           rc 0                     ; output a point to the display

                       ; postitive falls through, negative takes the branch
@0016:104202           cs Yi                    ; compare current Y to Y Axis    ;guy - cs seems like the wrong op code; it assumes Y Axis is zero
@0017:070030           cp nobounce              ;@17 branch if it's not time to bounce
@0020:104203           cs Vy                    ; fetch velocity to see if we're already starting to bounce
@0021:070030           cp nobounce              ; branch if velocity is already positive [instruction added by guy]

                       ; do a bounce by multiplying by the loss factor, reversing the velocity, and setting the
                       ; Y position to equal the axis.
@0022:100203   bounce: ca Vy                    ; @203 ; fetch Y velocity
@0023:140204           mr R                     ; @204 ; multiply by bounce loss and reverse the sign
@0024:040203           ts Vy                    ; @203 ; store the result in Y Velocity
                       ; the following two instructions added by guy
@0025:100214           ca Yha                   ; fetch the Y Axis (better be zero until the bug above is fixed)
@0026:040202           ts Yi
@0027:074033           sp continue              ;skip the step adding negative gravitation acceleration

@0030:100203 nobounce: ca Vy                    ; for no bounce, fetch the current velocity @@JumpedToBy a0017 a0021
@0031:114205           su Gdt                   ; subtract gravitational constant
@0032:040203           ts Vy                    ; store the result in Y Velocity
@0033:140206 continue: mr dt                    ; multiply velocity by time increment @@JumpedToBy a0027
@0034:110202           ad Yi                    ; add the incremental distance to the current Y value
                       ;       qd Yi   ; @202 ; output the Y value for the ball (same X as last time)
@0035:040202           ts Yi                    ; @202  ;guy: emulate store that was part of qd
@0036:000600           si 0o600                 ; new-style i/o instruction; set the Y coord now in the ACC ; Auto-Annotate I/O: Display Points
@0037:100201           ca Xi                    ; put X coord in ACC
@0040:024000           rc 0                     ; output a point to the display

@0041:120201           cm Xi                    ; retrieve current X coord
@0042:114213           su Xul                   ; compare to X Upper Limit
@0043:070007           cp loop                  ; @5   ; branch to next iteration
@0044:074001           sp main                  ; @1   ; start all over to refresh the display

                       .org 0o201
@0201:000000       Xi: .word 0                  ; current i'th value of x @@WrittenBy a0002 a0011 ReadBy loop a0014 a0037 a0041
@0202:000000       Yi: .word 0                  ; current i'th value of y @@WrittenBy a0004 a0026 a0035 ReadBy a0016 a0034
@0203:000000       Vy: .word 0                  ; current i'th value of velocity of y @@WrittenBy a0006 a0024 a0032 ReadBy a0020 bounce nobounce
@0204:107777        R: .word 1.07777            ; "coefficient of Restitution", i.e., energy loss during the bounce.  This number should be negative to reverse the ball's direction @@ReadBy a0023
@0205:001000      Gdt: .word 0.01000            ; constant graviational constant times delta t @@ReadBy a0031
@0206:040000       dt: .word 0.40000            ; constant time step (delta t) @@ReadBy continue
@0207:117777       XI: .word 1.17777            ; (-0.600)         ; constant starting position for X @@ReadBy main
@0210:060000       YI: .word 0.60000            ; constant starting position for Y @@ReadBy a0003
@0211:000000      VYi: .word 0.00000            ; constant starting velocity for Y @@ReadBy a0005
@0212:000600     Vxdt: .word 0.00600            ; constant X velocity times delta t @@ReadBy a0010
@0213:060000      Xul: .word 0.60000            ; constant X upper limit (i.e., the right-hand end of the simulation) @@ReadBy a0042
@0214:000000      Yha: .word 0                  ; constant Y value of horizontal axis @@ReadBy a0012 a0025

