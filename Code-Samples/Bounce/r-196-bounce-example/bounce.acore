
; *** Core Image ***
%File: bounce1954.ww
%TapeID: None
%JumpTo 0o1
%DbWgt:  0o203  0o01 %o
%DbWgt:  0o204  0o200 %o
%DbWgt:  0o201  0o400 %o
%DbWgt:  0o202  0o100 %o
@C0000:  None   0100207 0040201 0100210 0040202 0100211 0040203 0100201 
@C0010: 0110212 0040201 0100214 0000600 0100201 0024000 0104202 0070030 
@C0020: 0104203 0070030 0100203 0140204 0040203 0100214 0040202 0074033 
@C0030: 0100203 0114205 0040203 0140206 0110202 0040202 0000600 0100201 
@C0040: 0024000 0120201 0114213 0070007 0074001  None    None    None   
@C0200:  None   0000000 0000000 0000000 0107777 0001000 0040000 0117777 
@C0210: 0060000 0000000 0000600 0060000 0000000  None    None    None   
@S0001: main
@S0007: loop
@S0022: bounce
@S0030: nobounce
@S0033: continue
@S0201: Xi
@S0202: Yi
@S0203: Vy
@S0204: R
@S0205: Gdt
@S0206: dt
@S0207: XI
@S0210: YI
@S0211: VYi
@S0212: Vxdt
@S0213: Xul
@S0214: Yha
@N0001: Initialize X axis
@N0003: initialize Y axis
@N0005: Initialize Y Velocity    ;; guy: this was the designated loop return in the exemplar, but that's clearly wrong
@N0007: fetch current X value
@N0010: add the velocity increment
@N0011: store the next X back to Xi
@N0012: fetch the y (horizontal) axis line
@N0013: select point; the Y deflection is Yha, picked up from ACC
@N0014: put x in ACC
@N0015: output a point to the display
@N0016: compare current Y to Y Axis    ;guy - cs seems like the wrong op code; it assumes Y Axis is zero
@N0017: @17 branch if it's not time to bounce
@N0020: fetch velocity to see if we're already starting to bounce
@N0021: branch if velocity is already positive [instruction added by guy]
@N0022: @203 ; fetch Y velocity
@N0023: @204 ; multiply by bounce loss and reverse the sign
@N0024: @203 ; store the result in Y Velocity
@N0025: fetch the Y Axis (better be zero until the bug above is fixed)
@N0027: skip the step adding negative gravitation acceleration
@N0030: for no bounce, fetch the current velocity
@N0031: subtract gravitational constant
@N0032: store the result in Y Velocity
@N0033: multiply velocity by time increment
@N0034: add the incremental distance to the current Y value
@N0035: @202  ;guy: emulate store that was part of qd
@N0036: new-style i/o instruction; set the Y coord now in the ACC
@N0037: put X coord in ACC
@N0040: output a point to the display
@N0041: retrieve current X coord
@N0042: compare to X Upper Limit
@N0043: @5   ; branch to next iteration
@N0044: @1   ; start all over to refresh the display
@N0201: current i'th value of x
@N0202: current i'th value of y
@N0203: current i'th value of velocity of y
@N0204: "coefficient of Restitution", i.e., energy loss during the bounce.  This number should be negative to reverse the ball's direction
@N0205: constant graviational constant times delta t
@N0206: constant time step (delta t)
@N0207: (-0.600)         ; constant starting position for X
@N0210: constant starting position for Y
@N0211: constant starting velocity for Y
@N0212: constant X velocity times delta t
@N0213: constant X upper limit (i.e., the right-hand end of the simulation)
@N0214: constant Y value of horizontal axis
