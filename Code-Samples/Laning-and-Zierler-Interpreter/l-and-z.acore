
; *** Core Image ***
%File: l-and-z.ww
%TapeID: 
%JumpTo 0o1000
@C0040: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0050: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0060: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0070: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0100: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0110: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0120: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0130: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0140: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0150: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0160: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0170: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0200: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0210: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0220: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0230: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0240: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0250: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0260: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0270: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0300: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0310: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0320: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0330: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0340: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0350: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0360: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0370: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0400: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0410: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0420: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0430: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0440: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0450: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0460: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0470: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0500: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0510: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0520: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0530: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0540: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0550: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0560: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0570: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0600: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0610: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0620: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0630: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0640: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0650: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0660: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0670: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0700: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0710: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0720: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0730: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0740: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0750: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0760: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0770: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C1000: 0076763 0075002 0001004 0131046 0015004 0111103 0045012 0045253 
@C1010: 0045020 0045030 0100000 0115107 0071016 0075251 0101142 0045015 
@C1020: 0100000 0114000 0071003 0115171 0071260 0101156 0045277 0105301 
@C1030: 0110000 0071052 0165166 0041055 0101216 0115166 0154011 0041056 
@C1040: 0101033 0045044 0076410 0141364 0110000 0076410 0131047 0075004 
@C1050: 0000000 0000000 0101340 0045044 0075042 0000000 0000000 0075765 
@C1060: 0075507 0102000 0075377 0015063 0131074 0071063 0075004 0105122 
@C1070: 0041074 0075765 0075502 0075067 0177774 0131134 0075351 0111543 
@C1100: 0075336 0076410 0074040 0001103 0001203 0075265 0000011 0074000 
@C1110: 0000000 0075265 0000004 0075004 0075465 0075265 0000005 0075265 
@C1120: 0075267 0075265 0000003 0000000 0000000 0075265 0000006 0075265 
@C1130: 0000002 0075265 0000010 0075265 0075471 0075265 0000007 0075265 
@C1140: 0075272 0075265 0001275 0075265 0001251 0075265 0075004 0075265 
@C1150: 0075004 0075265 0001303 0075265 0075004 0075265 0001326 0075265 
@C1160: 0106412 0075265 0040000 0075265 0075004 0075265 0000000 0075265 
@C1170: 0001104 0000012 0140000 0075265 0075255 0075265 0150000 0075265 
@C1200: 0075203 0000001 0075004 0101103 0045005 0075004 0000023 0001172 
@C1210: 0022000 0001176 0000016 0075004 0075004 0075523 0000017 0111176 
@C1220: 0075411 0001427 0000015 0000000 0075614 0075662 0000020 0040000 
@C1230: 0000014 0111733 0000022 0106412 0075571 0000000 0000021 0075535 
@C1240: 0075423 0051243 0075433 0100000 0075377 0075004 0075004 0102412 
@C1250: 0075004 0101253 0115107 0074000 0075004 0101170 0075204 0075057 
@C1260: 0101152 0045277 0105201 0075030 0075004 0111172 0075244 0075241 
@C1270: 0075667 0000024 0075241 0075674 0075255 0101144 0045015 0074000 
@C1300: 0075203 0000013 0075004 0105051 0041051 0131051 0071322 0075366 
@C1310: 0045312 0076410 0040000 0076410 0101265 0045320 0101312 0115162 
@C1320: 0110000 0075336 0076410 0151364 0076410 0075305 0101410 0045331 
@C1330: 0101350 0064000 0045166 0101166 0075377 0075351 0075377 0076410 
@C1340: 0101360 0076410 0100000 0041050 0041051 0101343 0045046 0075251 
@C1350: 0075701 0051357 0102414 0045356 0102412 0161017 0154000 0074000 
@C1360: 0000000 0000000 0040000 0001000 0050000 0004000 0051375 0101376 
@C1370: 0115130 0041376 0115410 0071405 0101376 0074000 0001000 0051407 
@C1400: 0040040 0131400 0115162 0115376 0071406 0054000 0131410 0074000 
@C1410: 0000037 0101217 0065265 0065217 0075416 0075004 0051422 0101354 
@C1420: 0065233 0065354 0074000 0075416 0101221 0045347 0075004 0075416 
@C1430: 0101432 0045347 0075251 0051444 0101247 0041354 0101160 0041233 
@C1440: 0101207 0045265 0101211 0045217 0074000 0075433 0075416 0101217 
@C1450: 0065265 0065217 0075625 0051464 0101225 0075377 0045557 0115201 
@C1460: 0041552 0045463 0101464 0064000 0074000 0075453 0045227 0075433 
@C1470: 0075004 0101231 0075377 0101227 0075377 0101552 0045500 0101557 
@C1500: 0044000 0075433 0101545 0045266 0101275 0045016 0075004 0101546 
@C1510: 0045266 0101547 0045016 0075351 0111544 0045521 0101400 0115162 
@C1520: 0111107 0040000 0075337 0101537 0041543 0015525 0115271 0070000 
@C1530: 0115230 0071101 0101550 0045134 0075004 0101544 0075524 0076002 
@C1540: 0075075 0101551 0075533 0076002 0072002 0001507 0001244 0001142 
@C1550: 0001540 0001471 0000000 0000000 0000000 0000000 0000000 0000000 
@C1560: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C1570: 0000000 0075377 0131456 0131460 0075453 0075366 0045564 0131576 
@C1600: 0101217 0115265 0071604 0075004 0101460 0045607 0045611 0100000 
@C1610: 0111613 0040000 0075467 0004000 0101460 0045620 0115201 0045460 
@C1620: 0100000 0045651 0115613 0071660 0075445 0101576 0115201 0045576 
@C1630: 0045634 0045654 0101231 0075377 0100000 0111162 0075377 0101456 
@C1640: 0045644 0115201 0045456 0045645 0100000 0064000 0111107 0075377 
@C1650: 0111201 0044000 0101265 0045655 0100000 0110000 0075377 0075004 
@C1660: 0075433 0075625 0051666 0101360 0041733 0101362 0074000 0051673 
@C1670: 0111733 0041733 0101362 0074000 0051700 0111733 0041733 0105362 
@C1700: 0074000 0051707 0051715 0076410 0131707 0045722 0131722 0104000 
@C1710: 0071727 0041732 0105732 0041732 0101735 0110000 0041724 0131732 
@C1720: 0071723 0076410 0074000 0076410 0140000 0076410 0075717 0041732 
@C1730: 0101172 0075715 0000000 0000000 0000000 0150000 0051741 0076410 
@C1740: 0000225 0100000 0045760 0045750 0071751 0102337 0024000 0076410 
@C1750: 0074000 0115103 0170012 0025753 0131741 0101210 0025756 0076410 
@C1760: 0100000 0076410 0076410 0076015 0075737 0051777 0101415 0065134 
@C1770: 0065415 0102001 0065257 0066001 0101073 0065124 0065073 0074000 
@C2000: 0075736 0075061 0000000 0000000 0000000 0000000 0000000 0000000 
@C2010: 0000000 0000000 0000000 0000000 0000000 0052030 0042155 0076410 
@C2020: 0076031 0076410 0076214 0076410 0076340 0102213 0024000 0076410 
@C2030: 0074000 0052147 0102166 0042150 0076410 0102155 0042160 0122160 
@C2040: 0116173 0072051 0076410 0102153 0042073 0102154 0042077 0076410 
@C2050: 0076072 0122160 0116203 0042211 0122211 0114000 0072103 0122160 
@C2060: 0116203 0072064 0076103 0112167 0076410 0102152 0042073 0102151 
@C2070: 0042077 0076410 0102160 0000000 0042160 0076410 0102150 0000000 
@C2100: 0042150 0076410 0076037 0102160 0076410 0102414 0042161 0102166 
@C2110: 0042162 0132161 0072114 0076121 0102162 0170001 0112165 0042162 
@C2120: 0076111 0102412 0176162 0042163 0122414 0032157 0042131 0042134 
@C2130: 0102412 0161000 0042412 0102413 0161000 0042413 0102164 0112414 
@C2140: 0046142 0102163 0170000 0032413 0042413 0102150 0042414 0074000 
@C2150: 0000000 0116165 0142177 0142203 0112165 0000000 0000000 0161000 
@C2160: 0000000 0000000 0000000 0000000 0000017 0000001 0000000 0000000 
@C2170: 0000000 0040000 0000000 0040000 0001000 0040000 0002000 0050000 
@C2200: 0004000 0040000 0005000 0063146 0174315 0041433 0153675 0137777 
@C2210: 0001777 0000000 0000000 0020000 0052263 0076410 0102413 0042334 
@C2220: 0102412 0042333 0142334 0072264 0102333 0072230 0102330 0076231 
@C2230: 0102331 0000225 0024000 0102332 0024000 0106313 0042336 0122333 
@C2240: 0146314 0042335 0154017 0042333 0122334 0146314 0042334 0154017 
@C2250: 0066334 0126333 0042333 0102335 0112315 0046256 0100000 0024000 
@C2260: 0132336 0072237 0076410 0074000 0122333 0114000 0072307 0122334 
@C2270: 0114000 0072301 0116312 0112311 0042334 0102333 0072305 0116312 
@C2300: 0042333 0106334 0042334 0102333 0076222 0132333 0076225 0106333 
@C2310: 0076221 0100000 0000001 0000007 0000012 0002316 0174000 0052000 
@C2320: 0036000 0016000 0026000 0046000 0066000 0056000 0006000 0154000 
@C2330: 0032000 0072000 0042000 0000000 0000000 0000000 0000000 0122000 
@C2340: 0052374 0000225 0106414 0072346 0102331 0076347 0102330 0024000 
@C2350: 0122414 0042376 0102375 0116376 0072362 0122414 0042376 0102400 
@C2360: 0024000 0076367 0122414 0116375 0042376 0102377 0024000 0102376 
@C2370: 0112315 0046372 0100000 0024000 0074000 0000012 0000000 0052000 
@C2400: 0174000 0037777 0052406 0042407 0102407 0112401 0074000 0000000 
@C2410: 0052704 0076704 0000000 0000000 0000000 0161036 0102410 0102721 
@C2420: 0076550 0076622 0000035 0042552 0076617 0076417 0000000 0126413 
@C2430: 0042413 0100000 0066736 0146412 0076657 0142412 0066413 0142736 
@C2440: 0076427 0066736 0042552 0106561 0112476 0042561 0106552 0146552 
@C2450: 0066736 0161002 0152736 0155017 0042650 0102520 0152552 0155017 
@C2460: 0042736 0146552 0116520 0155017 0116431 0112472 0152552 0155017 
@C2470: 0112650 0076435 0000001 0076521 0106412 0076665 0000002 0102741 
@C2500: 0044000 0076703 0132412 0076670 0076453 0076521 0000077 0106412 
@C2510: 0072703 0132704 0046741 0102717 0046704 0116416 0072737 0076704 
@C2520: 0020000 0102413 0160006 0176746 0042413 0161011 0126412 0042412 
@C2530: 0100000 0072534 0114000 0072537 0154016 0042412 0132414 0122414 
@C2540: 0116506 0072546 0106414 0072742 0106506 0042414 0102552 0112735 
@C2550: 0042561 0102412 0000000 0066413 0042745 0066414 0155011 0176747 
@C2560: 0032745 0000000 0042744 0161011 0042745 0102744 0176746 0161011 
@C2570: 0066745 0066413 0042412 0155017 0066413 0076702 0122412 0114000 
@C2600: 0072474 0122413 0114000 0072613 0116472 0112431 0042413 0102412 
@C2610: 0072502 0116472 0042412 0106413 0042413 0142412 0076667 0106736 
@C2620: 0042736 0106552 0066561 0116414 0042552 0072636 0112414 0042414 
@C2630: 0102412 0066736 0042412 0102413 0066561 0042413 0122552 0116422 
@C2640: 0072642 0076703 0112415 0042650 0102472 0066561 0161017 0112736 
@C2650: 0000000 0042736 0155017 0066413 0161017 0112412 0161001 0042412 
@C2660: 0155017 0126413 0042413 0102736 0112412 0042412 0142413 0072576 
@C2670: 0102413 0161017 0112412 0166426 0042412 0155017 0042413 0106426 
@C2700: 0112561 0112414 0042414 0132704 0100000 0076751 0042552 0046500 
@C2710: 0046717 0112735 0046721 0161033 0155021 0112504 0042734 0100000 
@C2720: 0042561 0100000 0042744 0161011 0042745 0102744 0176746 0161011 
@C2730: 0066745 0066561 0042736 0155017 0000000 0000001 0000000 0112472 
@C2740: 0072704 0074000 0102575 0112575 0000000 0000000 0000777 0177000 
@C2750: 0000000 0052761 0042762 0122762 0114000 0072757 0076760 0000000 
@C2760: 0102762 0074000 0000000 0053042 0001004 0103002 0046777 0014000 
@C2770: 0043005 0117003 0043004 0123004 0114000 0073006 0103005 0040000 
@C3000: 0132777 0076767 0000040 0000061 0000000 0000000 0000225 0103002 
@C3010: 0047011 0100000 0043023 0123023 0114000 0073024 0103023 0170012 
@C3020: 0024000 0133011 0077011 0000000 0103002 0047027 0047035 0100000 
@C3030: 0043041 0123041 0114000 0073042 0100000 0040000 0133027 0133035 
@C3040: 0077027 0000000 0074000  None    None    None    None    None   
@S0040: comp_code
@S1000: val_temp
@S1000: lz_begin
@S1002: a1
@S1003: 1a1
@S1004: 2a1
@S1005: 3a1
@S1012: 8a1
@S1014: 10a1
@S1015: 11a1
@S1016: 12a1
@S1020: 14a1
@S1030: 22a1
@S1031: 23a1
@S1033: 25a1
@S1042: 32a1
@S1044: 34a1
@S1046: 36a1
@S1047: 37a1
@S1050: 38a1
@S1051: 39a1
@S1052: 40a1
@S1055: 43a1
@S1056: 44a1
@S1057: a2
@S1061: 2a2
@S1063: 4a2
@S1067: 8a2
@S1073: 12a2
@S1074: 13a2
@S1075: 14a2
@S1101: 18a2
@S1103: a3
@S1104: 1a3
@S1105: var_e
@S1107: 4a3
@S1111: var_a
@S1115: var_s
@S1121: var_u
@S1122: 15a3
@S1124: 17a3
@S1125: var_d
@S1127: var_r
@S1130: 21a3
@S1131: var_j
@S1133: var_n
@S1134: 25a3
@S1135: var_f
@S1137: var_c
@S1141: var_k
@S1142: 31a3
@S1143: var_t
@S1144: 33a3
@S1145: var_z
@S1147: var_l
@S1151: var_w
@S1152: 39a3
@S1153: var_h
@S1155: var_y
@S1156: 43a3
@S1157: var_p
@S1160: 45a3
@S1161: var_q
@S1162: 47a3
@S1163: var_o
@S1165: var_b
@S1166: 51a3
@S1167: var_g
@S1170: 53a3
@S1171: 54a3
@S1172: 55a3
@S1173: var_m
@S1175: var_x
@S1176: 59a3
@S1177: var_v
@S1201: 62a3
@S1203: a4
@S1203: 0a4
@S1204: 1a4
@S1207: 4a4
@S1210: 5a4
@S1211: 6a4
@S1216: 11a4
@S1217: 12a4
@S1221: 14a4
@S1225: 18a4
@S1227: 20a4
@S1230: 21a4
@S1231: 22a4
@S1233: 24a4
@S1241: 30a4
@S1243: 32a4
@S1244: 33a4
@S1247: 36a4
@S1251: 38a4
@S1253: 40a4
@S1255: 42a4
@S1257: 44a4
@S1260: 45a4
@S1265: 50a4
@S1266: 51a4
@S1267: 52a4
@S1271: 54a4
@S1272: 55a4
@S1275: 58a4
@S1277: 60a4
@S1301: 62a4
@S1303: a5
@S1305: 2a5
@S1312: 7a5
@S1320: 13a5
@S1322: 15a5
@S1326: a6
@S1331: 3a6
@S1336: 8a6
@S1337: 9a6
@S1340: 10a6
@S1343: 13a6
@S1347: 17a6
@S1350: 18a6
@S1351: 19a6
@S1354: 22a6
@S1356: 24a6
@S1357: 25a6
@S1360: a7
@S1362: 2a7
@S1364: 4a7
@S1366: a8
@S1375: 7a8
@S1376: 8a8
@S1377: 9a8
@S1400: 10a8
@S1405: 15a8
@S1406: 16a8
@S1407: 17a8
@S1410: 18a8
@S1411: a9
@S1415: 4a9
@S1416: 5a9
@S1422: 9a9
@S1423: 10a9
@S1427: 14a9
@S1432: 17a9
@S1433: 18a9
@S1444: 27a9
@S1445: 28a9
@S1453: a10
@S1453: 0a10
@S1456: 3a10
@S1460: 5a10
@S1463: 8a10
@S1464: 9a10
@S1465: 10a10
@S1467: 12a10
@S1471: 14a10
@S1500: 21a10
@S1502: 23a10
@S1507: 28a10
@S1521: 38a10
@S1523: 40a10
@S1524: 41a10
@S1525: 42a10
@S1533: 48a10
@S1535: 50a10
@S1537: 52a10
@S1540: 53a10
@S1543: 56a10
@S1544: 57a10
@S1545: 58a10
@S1546: 59a10
@S1547: 60a10
@S1550: 61a10
@S1551: 62a10
@S1552: 63a10
@S1557: 68a10
@S1564: 73a10
@S1571: a11
@S1576: 5a11
@S1604: 11a11
@S1607: 14a11
@S1611: 16a11
@S1613: 18a11
@S1614: a12
@S1620: 4a12
@S1625: 9a12
@S1634: 16a12
@S1644: 24a12
@S1645: 25a12
@S1651: 29a12
@S1654: 32a12
@S1655: 33a12
@S1660: 36a12
@S1662: a13
@S1662: equals
@S1666: 4a13
@S1667: 5a13
@S1667: plus
@S1673: 9a13
@S1674: 10a13
@S1674: minus
@S1700: 14a13
@S1701: 15a13
@S1701: exponent
@S1707: 21a13
@S1715: 27a13
@S1717: 29a13
@S1722: 32a13
@S1723: 33a13
@S1724: 34a13
@S1727: 37a13
@S1732: 40a13
@S1733: 41a13
@S1733: temp
@S1735: dv0
@S1736: a15
@S1736: print
@S1737: 1a15
@S1741: 3a15
@S1750: 8a15
@S1751: 9a15
@S1753: 11a15
@S1756: 14a15
@S1760: 16a15
@S1765: a16
@S1777: 10a16
@S2000: 11a16
@S2001: 12a16
@S2002: a14
@S2015: float_30_15_print
@S2030: flt_print_rtn
@S2031: normalize
@S2037: nm_loop
@S2051: nm_not_ge_1
@S2064: nm_lt_point_1
@S2072: nm_calc
@S2073: nm_calc_mr
@S2077: nm_calc_ad
@S2103: nm_already_norm
@S2103: nm_done
@S2111: nm_mask_loop
@S2114: nm_2_cont
@S2121: nm_mask_done
@S2131: nm_shift_hi
@S2134: nm_shift_lo
@S2142: nm_smb
@S2147: nm_rtn
@S2150: nm_exp
@S2151: nm_su_one
@S2152: nm_mr_float10
@S2153: nm_mr_float_point_1
@S2154: nm_ad_one
@S2155: nm_x
@S2157: nm_srh_inst
@S2160: t
@S2161: t3
@S2162: t4
@S2163: t5
@S2164: word_size
@S2165: one
@S2166: zero
@S2167: float0
@S2171: float1_2
@S2173: float1
@S2175: float2
@S2177: float10
@S2201: float16
@S2203: float_point_1
@S2205: float_low_rnd
@S2207: float_neg1
@S2211: ftmp0
@S2213: fp_space
@S2214: mfp
@S2221: 5mfp
@S2222: 6mfp
@S2225: 9mfp
@S2230: 12mfp
@S2231: 13mfp
@S2237: 17mfp
@S2256: 32mfp
@S2263: 37mfp
@S2264: 38mfp
@S2301: 51mfp
@S2305: 55mfp
@S2307: 57mfp
@S2311: 59mfp
@S2312: 60mfp
@S2313: ndigits
@S2313: 61mfp
@S2314: 62mfp
@S2315: digit_table
@S2315: 63mfp
@S2316: 64mfp
@S2330: plus_char
@S2330: 74mfp
@S2331: minus_char
@S2331: 75mfp
@S2332: dot_char
@S2333: 1tmfp
@S2334: 2tmfp
@S2335: 3tmfp
@S2336: digit_cntr
@S2336: 4tmfp
@S2337: newlinemfp
@S2340: print_exp
@S2346: pe_non_neg
@S2347: pe_2
@S2355: pe_exp_lt_10
@S2362: pe_exp_ge_10
@S2367: pe_1
@S2372: pe_load_char
@S2374: print_exp_rtn
@S2375: pe_10
@S2376: pe_t1
@S2377: pe_one_char
@S2400: pe_zero_char
@S2401: max
@S2402: floathack
@S2406: fhrtn
@S2407: ac_save
@S2410: ax
@S2412: mra
@S2412: 2ax
@S2412: r02
@S2413: 3ax
@S2413: r03
@S2414: 4ax
@S2414: r04
@S2415: r05
@S2416: r06
@S2417: r07
@S2422: r10
@S2426: r14
@S2427: r15
@S2431: r17
@S2435: r21
@S2453: r35
@S2472: r50
@S2474: r52
@S2476: r54
@S2500: r56
@S2502: r58
@S2504: r60
@S2506: r62
@S2520: r72
@S2521: r73
@S2534: r83
@S2537: r86
@S2546: r93
@S2550: r95
@S2552: r97
@S2561: r102
@S2575: r108
@S2576: r109
@S2613: r122
@S2617: r126
@S2622: r129
@S2636: r141
@S2642: r145
@S2650: r151
@S2657: r158
@S2665: r164
@S2667: r166
@S2670: r167
@S2702: r177
@S2703: next_inst
@S2704: exec_inst
@S2707: inst_stored
@S2716: r188
@S2717: r189
@S2721: r191
@S2734: dispatch
@S2735: r197
@S2735: sep_param
@S2736: r198
@S2736: tmp
@S2737: r199
@S2741: r201
@S2742: r202
@S2744: float24_low
@S2745: float24_tmp
@S2746: float24_low_mant_mask
@S2747: float24_low_exp_mask
@S2750: float24_ac_save
@S2751: halt_if_zero
@S2757: hiz1
@S2760: hiz2
@S2761: hiz_rtn
@S2762: hiz_ac
@S2763: print_prog
@S2764: pr_enter
@S2767: pr_loop
@S2777: pr_st_char
@S3002: pr_buf
@S3003: pr_stop_char
@S3004: pr_tmp
@S3005: pr_char
@S3006: pr_done
@S3006: pp_enter
@S3011: pp_loop
@S3011: pp_rd_char
@S3023: pp_tmp
@S3024: pp_done
@S3024: pz_enter
@S3027: pz_loop
@S3027: pz_rd_char
@S3035: pz_wr_zero
@S3041: pz_tmp
@S3042: pz_done
@S3042: ppg_rtn
@S0776: val_1
@S0774: val_2
@S0772: val_3
@S0770: val_4
@S0766: val_5
@S0764: val_6
@S0762: val_7
@S0760: val_8
@S0756: val_9
@S0000: do_print
@S0000: do_floathack
@S0001: f24
@S0001: main_sep_param
@E1762: print: "LZ output: %fm", 0o002412
@N0040:  |
@N1000:                                                   ; [LAS Added this call so we get the program and the results printed on the flex]
@N1002:                                                   ; PETR A, rewind
@N1005:  (l.c. or u.c.)                                   ; [LAS was ad (a3/1a3)]
@N1013:  -| Is symbol
@N1014:  -| a number?
@N1015:                                                   ; [LAS was sp (38a4/58a4)]
@N1016:  31a3 is the normal mode                          ; [LAS was ca (33a3/31a3)]
@N1021:  (Is symbol a period?)
@N1023:  -| l.c. no. or exponent?
@N1024:  -|
@N1025:  -| set to interpret
@N1026:   | digit as an
@N1027:  -| exponent
@N1031:  --> if digit is zero                             ; [LAS hand-written note in listing crossed out 39r and put 40r, which makes more sense]
@N1032:  -|
@N1033:   | Form (24,6) version
@N1034:   | of digit as an
@N1035:   | integer in (43r, 44r
@N1036:   |
@N1037:  -|
@N1040:                         ;                                                  ;.print "digit read-in %fl", 43a1
@N1042:  (programmed arithmetic
@N1043:  (i.e., by 10)                                    ; [LAS was "mr 497" -- transcription error]
@N1046:  (reset to 38r)
@N1050:  (counter for digits before decimal pt            ; [LAS eliminated parens for opcode p or just data in this and following sections]
@N1051:  (  "      "    "    after     "    ")
@N1055:  -| Temporary storage for
@N1056:  -| integer during read-in
@N1057:                                                   ; [LAS section offset was 0r]
@N1061:  -| store "sp to print
@N1062:  -| control"
@N1063:  -| read in
@N1064:   | "RINT"
@N1065:  -|
@N1067:  -| reset counter                                 ; [LAS was "ca 15a3" -- transcription error]
@N1070:  -|
@N1073:                                                   ; [LAS was (sp 8r/p 0)]
@N1074:  (counter)
@N1075:  -| part of SP routine
@N1076:   |
@N1077:   |
@N1100:  -|
@N1101:  -| START
@N1102:  -|                                               ; [LAS was sp 32] [LAS was sp a1, changed to go to start of compiled code]
@N1103:  |
@N1105:  e
@N1106:  8
@N1110:  |                                                ; [LAS was blank][Hard to read but looking up flex code it's vertical-bar]
@N1111:  a
@N1112:  3
@N1113:  space
@N1114:  =
@N1115:  s
@N1116:  4
@N1117:  i
@N1120:  +
@N1121:  u
@N1122:  2
@N1123:  shift ribbon                                     ; [LAS was blank]
@N1124:  . [period]                                       ; [LAS was "(p 0/sp 8a2)"]
@N1125:  d
@N1126:  5
@N1127:  r                                                ; [LAS was .word 50a4. Transcription error.]
@N1130:  1
@N1131:  j
@N1132:  7
@N1133:  n
@N1134:  ,
@N1135:  f
@N1136:  6
@N1137:  c
@N1140:  -
@N1141:  k
@N1143:  t
@N1145:  z
@N1146:  back space
@N1147:  l
@N1150:  tabulate
@N1151:  w
@N1153:  h
@N1154:  carr. return
@N1155:  y
@N1157:  p
@N1161:  q
@N1163:  o (letter)
@N1164:  stop
@N1165:  b
@N1167:  g
@N1171:  9
@N1173:  m
@N1174:  shift to u.c.
@N1175:  x
@N1177:  v
@N1200:  shift to l.c.
@N1201:  0 (zero)
@N1202:  nullify
@N1203:  |
@N1205:  E (not used)
@N1206:  8 (exp.)
@N1210:  _                                                ; [LAS Did say + not _ and 0,22000 but looks like hand-written sheet is as shown here now. Transcription error.]
@N1211:  A (not used)
@N1212:  3 (exp.)
@N1213:  space
@N1214:  . ['dot', not period] (see note)
@N1215:  S
@N1216:  4 (exp.)
@N1217:  I (not used)
@N1220:  /
@N1221:  U (not used)
@N1222:  2 (exp.)
@N1223:  shift ribbon                                     ; [LAS was blank]
@N1224:  )
@N1225:  D (not used)
@N1226:  5 (exp.)
@N1227:  R (not used)
@N1230:  1 (exp.)
@N1231:  J (not used)
@N1232:  7 (exp.)
@N1233:  N (not used)                                     ; [LAS was (cs 2ax/ca 2ax)]
@N1234:  (
@N1235:  F                                                ; [LAS was blank]
@N1236:  6 (exp.)
@N1237:  C
@N1240:  - (exp.)
@N1241:  K (not used)
@N1243:  T (not used)
@N1245:  Z (not used)
@N1246:  back space
@N1247:  L (not used)
@N1250:  tabulate
@N1251:  W (not used)
@N1253:  H (not used)
@N1254:  carr. return
@N1255:  Y (not used)
@N1257:  P                                                ; [LAS was (sp a2/sp 2a2)]
@N1261:  Q (not used)
@N1263:  O (letter) (not used)                            ; [LAS was 23a1. Transcription error.]
@N1264:  stop
@N1265:  B (not used)                                     ; [LAS was (55a3)]
@N1266:                                                   ; [LAS was sp (28a10/33r) -- had it at 28a10 but seems wrong so changed it]
@N1267:  G (not used)
@N1271:  9 (exp.)
@N1273:  M (not used)
@N1274:  shift to u.c.
@N1275:  X (not used)
@N1276:                                                   ; [LAS was td 10a1.  Transcription error -- cross-out in hand-listing]
@N1277:  V (not used)
@N1300:  shift to l.c.
@N1301:  0 (zero exp.)
@N1302:  nullify
@N1303:  |
@N1307:  (select new address k)
@N1311:  (= sp 852) -| store number
@N1312:              | in (k, k+1)
@N1313:             -|
@N1314:  -| form symbol mr k
@N1315:   | or dv k, where
@N1316:   | k is address at
@N1317:   | which number has
@N1320:   | just been stored
@N1321:  -|
@N1323:  (divide by 10)
@N1326:  -| store "sp exp" in
@N1327:   | place of last-stored
@N1330:   | symbol (mr x or dv x)
@N1331:  -|
@N1332:  -|
@N1333:   | store "+x"
@N1334:  -|
@N1335:  -| compute and store the
@N1336:  -| exponent +-n
@N1337:  -|
@N1340:   | reset MRA
@N1341:   | and various
@N1342:   | counters
@N1343:   |
@N1344:   |
@N1345:   |
@N1346:  -|
@N1347:                                                   ; [LAS was sp (38a4/14a9)]
@N1350:  "sp exp"
@N1351:                                                   ; [LAS was td 25a6. Transcription error.]
@N1352:  -|
@N1353:   | Form +-n, where
@N1354:   | n is in MRA in                                ; [LAS was (ca 2ax/cs 2ax)]
@N1355:   | (24,6) form                                   ; [LAS was sr*]
@N1356:  -|
@N1360:  -| 0                                             ; [LAS added p to this section]
@N1361:  -|
@N1362:  -| 1
@N1363:  -|
@N1364:  -| 10
@N1365:  -|
@N1366:  -| Select new
@N1367:   | address for
@N1370:   | storage of
@N1371:   | numerical
@N1372:   | quantity
@N1373:   |
@N1374:   |
@N1375:   |
@N1376:                                                   ; [LAS Start at top of compiled-code heap and work down, rather than use hard address]
@N1377:  -|
@N1400:   | Store C(AC) in                                ; [LAS was ts 32. Replaced with comp_code. Note this inst gets ao'ed]
@N1401:   | next available
@N1402:   | program address.
@N1403:   |
@N1404:   |
@N1405:   |
@N1406:   |
@N1407:   |
@N1410:  -| (last occupied program address)               ; [LAS was "(p 31)"] [LAS was .word 31. Replaced with comp_code - 1]
@N1411:  (divide)
@N1415:  (the 14a10 mode is never used)                   ; [LAS was sp (2a1/14a10)]
@N1423:  (upper case minus)
@N1433:  (reset dv and exp to normal)
@N1445:  (reset dv and exp to non-normal)
@N1453:  |
@N1465:  (equals)
@N1471:  (comma)
@N1504:                                                   ; [LAS was td 51a4. Transcription error.]
@N1506:                                                   ; [LAS was sp (2a1/49r)]
@N1515:  | a10 (continued)
@N1523:  (SP)
@N1526:                         ;                                                  ; .print "xxxxx 3 rd %ao"
@N1527:  (provision for future SR, CR instructions)
@N1531:  (START)
@N1535:  (CP)
@N1543:                                                   ; [LAS was (sp a14/cp a14)]
@N1545:                                                   ; [LAS added p to this section]
@N1552:  -| storage for addresses used by
@N1553:   | parenthesis routines in forming
@N1554:   | and storing sp orders
@N1555:   |
@N1556:   |                                               ; [These are notated on the coding sheet as: ]
@N1557:   |                                               ; [   63-67  +0                              ]
@N1560:   |                                               ; [   68-72  +0                              ]
@N1561:   |                                               ; [   73-77  +0                              ]
@N1562:   |
@N1563:   |
@N1564:   |
@N1565:   |
@N1566:   |
@N1567:   |
@N1570:  -|
@N1571:  (store dummy symbol)
@N1576:                                                   ; [LAS was "td (73a10)"]
@N1613:                                                   ; [LAS added p]
@N1614:  |
@N1654:  | a12 (continued)
@N1662:  equals
@N1667:  plus
@N1672:                                                   ; [LAS was ca 207. Transcription error.]
@N1674:  minus
@N1701:  exponent
@N1714:                                                   ; [LAS was ca 210. The notes at the end say 210 is dv 0]
@N1724:                                                   ; [LAS was (mr (-)/dv (-))]
@N1732:     -|n| counter                                  ; [LAS added p to this section]
@N1733:  -| temporary sum storage for arithmetic
@N1734:  -|
@N1735:                                                   ; [LAS added this]
@N1736:  -| plant address of 1st
@N1737:  -| character to be printed
@N1744:  -| If next symbol is an sp order carry it out.
@N1745:  the newline following the print of a set of equations.]
@N1747:   | Since symbols to be printed are stored as
@N1750:  -| "mr x,mr y," etc. the "mr" actuates this xxx [?]
@N1751:  -|
@N1752:   | form and print first letter
@N1753:  -|
@N1755:  (0.22000 - "=")
@N1760:                 -| print number
@N1763:  (24,6) print    |                                ; [LAS Was sp 222. We don't have the original print routine]
@N1764:    routine      -|
@N1765:  | a16 (used in a2)
@N1766:  -| set , to sp 2a1 and reset                     ; [LAS was ca 409. Transcription error.]
@N1767:   |
@N1770:  -|
@N1771:  -| set P to sp 2a2 (and reset)
@N1772:   |
@N1773:  -|
@N1774:  -| set . to sp 8a2 (and reset)
@N1775:   |
@N1776:  -|
@N2001:                                                   ; [LAS was (sp 2a2/sp a2)]
@N2002:  | a14
@N2015:  is (30,15), but we'll only use (24,6) range.
@N2017:  Spax out
@N2021:  Spax in
@N2023:  Spax out
@N2025:  print a newline.
@N2027:  Spax in
@N2031:  Output: mra, first two words fraction (denormalized mantissa), third word decimal exponent
@N2034:  Spax in
@N2035:  x
@N2042:  Spax out
@N2047:  Spax in
@N2051:  |x| < 1
@N2056:  Branch if |x| = .1
@N2062:  |x| > .1
@N2063:  Nop
@N2064:  Spax out
@N2071:  Spax in
@N2073:  mr =0.1 or mr =10.0
@N2075:  Spax out
@N2077:  ad one or su one
@N2101:  Spax in
@N2104:  Spax out
@N2105:  Binary exponent range zero to negative four
@N2121:  Upper mant
@N2123:  t5 has the rightmost bits of upper mant
@N2133:  Lower mant
@N2142:  Shift the masked bits up
@N2157:  Note can't use td with these insts or you overwrite the opcode
@N2205:  -6 is the smallest exponent to bump up to above the int (still not round to the int)
@N2214:  mfp == modern frac print
@N2215:  Resume ordinary ww operation
@N2216:  -|
@N2217:   |- Store C(mra) in 1tmfp and 2tmfp
@N2220:   |
@N2221:  -|
@N2222:  Do 1tmfp and 2tmfp agree in sign?
@N2224:  -|
@N2225:   |
@N2226:   |
@N2227:   |- Sense and print algebraic sign of C(mra) followed by a decimal point
@N2230:   |
@N2231:   |
@N2232:   |
@N2233:   |
@N2234:  -|
@N2235:  -|- Set up digit counter
@N2236:  -|
@N2237:  -|
@N2240:   |
@N2241:   |
@N2242:   |
@N2243:   |- Multiply C(1tmfp,2tmfp) by p10
@N2244:   |
@N2245:   |
@N2246:   |
@N2247:   |
@N2250:   |
@N2251:   |
@N2252:  -|
@N2253:  -|
@N2254:   |- Set up entry into table
@N2255:  -|
@N2256:  -|- Print a single digit
@N2257:  -|
@N2260:  -|- Have enough digits been printed?
@N2261:  -|
@N2262:  -|- Return control to int. subroutine
@N2263:  -|
@N2264:  -|
@N2265:   |- Is C(1tmfp) != 0?
@N2266:  -|
@N2267:  -|
@N2270:   |- Is C(2tmfp) != 0?
@N2271:  -|
@N2272:  -|
@N2273:   |- Form 1 - |C(2tmfp)|
@N2274:  -|
@N2275:  -|- Is C(1tmfp) pos.?
@N2276:  -|
@N2277:  -|- Form C(1tmfp) - 2^-15
@N2300:  -|
@N2301:  -|- Complement C(2tmfp)
@N2302:  -|
@N2303:  -|- Re-enter sign agreement
@N2304:  -|
@N2311:                                                   ; [59-73 are notated in Subroutines.pdf with no spaces, e.g., ca0, p1]
@N2313:  v2                                               ; [was just n1a2 -- need to track down this notation]
@N2315:  ,                                                ; [I think comma? Might just be a blemish]
@N2316:  Digit table
@N2340:  will do.
@N2401:  Whether to apply mask to srh for 24,6 floats
@N2405:  su r17
@N2410:  Set address of 1st instruction to be interpreted ; from Enter
@N2412:  x1  -|
@N2413:  x1'  |- Multiple register accumulator
@N2414:  y1  -|
@N2415:  "ca"                                             ; from 196r-->
@N2417:  "cs"                                             ; from l3r,196r
@N2421:  "ad"                                             ; from 196r-->
@N2423:  "su"                                             ; from 196r-->
@N2425:  "cm"                                             ; from 196r-->
@N2426:   Temporary digits storage                        ; (170r)
@N2427:  -|- Add two minor products                       ; from 24r
@N2430:  -|
@N2431:  -|- Store overflow
@N2432:  -|
@N2433:  Form major product
@N2435:  "mr" Form two                                    ; from 49r9,196r
@N2436:  minor products
@N2441:  "dv"                                             ; from 196r-->
@N2443:  -|
@N2444:   |- Form exponent of 2**-2/x2
@N2445:  -|
@N2446:  -|
@N2447:   |
@N2450:   |- Form and store -(2**-2 * x2')/x2**2
@N2451:   |
@N2452:   |
@N2453:   |
@N2454:  -|                                               ; [LAS was transcription error ta r151]
@N2455:  -|                                               ; [LAS this sequence does not seem to store this formula, instead stores 2**-2/x2]
@N2456:   |- Form and store 2**-2/x2**2
@N2457:   |
@N2460:  -|
@N2461:  -|
@N2462:   |
@N2463:   |
@N2464:   |- Form (2**-2/x**2)' (Use Euclid's algorithm)  ; [LAS Looks like this should say (2**-2/x2)' -- Uses remainder arith, hence the Euclid ref]
@N2465:   |
@N2466:   |
@N2467:  -|
@N2470:  -|- Add two minor parts of reciprocal
@N2471:  -|
@N2473:  "ts"
@N2474:  -|- complement x1                                ; [LAS Was ca r02. Transcription error.
@N2475:  -|
@N2477:  "ta" -|                                          ; from 196r-->
@N2500:        |- Store digits in indicated address
@N2501:       -|
@N2502:  -|- Increase xl by by 2**-15                     ; from 119r-->
@N2503:  -|
@N2505:  "ex"                                             ; from 196r-->
@N2507:  "cp" -|- Is x1 negative?                         ; from 196r-->
@N2510:       -|                                          ; [LAS was transcription error r188]
@N2511:  "sp" -|- Set Return address for sp ax            ; from 196r
@N2512:       -|
@N2513:  -|- Set pick up order for ordinary cp & sp       ; LAST DIGIT is a GUESS! [LAS not legible -- needed to dig into program to nail this down]
@N2514:  -|
@N2515:                                                   ; PROBABLY an SU op code!
@N2516:  -|- Test to see whether instruction is sp ax
@N2517:  -|
@N2520:                                                   ; [LAS ]
@N2521:  -|                                               ; from 51r,61r->
@N2522:   |- Round off x1' and store x1' * 2**-6
@N2524:  -|
@N2525:  -|
@N2526:   |- Add round-off carry into x1
@N2527:  -|
@N2530:  -|
@N2531:   |- Is there an overflow?
@N2532:   |
@N2533:  -|
@N2534:  -|                                               ; from  80r->
@N2535:   |- Add overflow into x1 and x1'. Increase y1
@N2536:  -|
@N2537:  -|                                               ; from  82r->
@N2540:   |- |y1| - 63 > 0?
@N2541:  -|                                               ; [LAS was transcription error sp r93]
@N2542:  -|- y <= 0? (i.e.  y1 < -63?)
@N2543:  -|
@N2544:  -|- Set y1 = -63
@N2545:  -|
@N2546:  -|- ts n + k or ex n + k                         ; from 88r->
@N2547:  -|
@N2550:  Store ts, ex, ca, cs or cm n+k                   ; from 8r->                                        ; [LAS Issue no-lower-cm: When branched-to,
@N2551:                         ;                                                  ;                                                  ; word with an exp.]
@N2552:  -|                                               ; from (180r)
@N2553:   |
@N2555:   |
@N2556:   |
@N2561:   |                                               ; (95r)
@N2562:                                                   ; [Note ex leaves B alone]
@N2567:   |- Perform ts, ex, ca, cs or cm                 ; [saves low mant in B]
@N2570:                                                   ; [Note ex leaves B alone]
@N2571:   |
@N2572:   |
@N2573:   |                                               ; [gets low mant back from B]
@N2574:   |
@N2575:  -|
@N2576:  -|                                               ;  166r->
@N2577:   |- x1 != 0?
@N2600:  -|
@N2601:  -|
@N2602:   |- x1' != 0?
@N2603:  -|
@N2604:  -|
@N2605:   |- Form |x1'| - 1                               ; PROBABLY AD op code
@N2606:  -|
@N2607:  -|- x1 > 0?
@N2610:  -|
@N2611:  -|- Form x1 - 2**-15
@N2612:  -|
@N2613:  -|- Complement x1'                               ; [LAS was transcription error ca r03]             ;   114r->
@N2614:  -|
@N2615:  -|- Form x1*x1'
@N2616:  -|
@N2617:  -|                                               ; 12r->
@N2620:   |- Complement x2, x2'
@N2621:  -|
@N2622:  -|                                               ; r9 ->
@N2623:   |- Form and store  y2 - yl
@N2624:  -|
@N2625:  y2 - y1 > 0?
@N2626:  -|
@N2627:   |
@N2630:   |
@N2631:   |- Interchange (x1, x1', y1) and (x2, x2', y2)
@N2632:   |
@N2633:   |
@N2634:   |
@N2635:  -|
@N2636:  -|                                               ; 132r->
@N2637:   |-  |y2 - y1| - 29 > 0?
@N2640:  -|
@N2641:  No need for addition
@N2642:  -|- Store  sr *1 +|y2 - y1|                      ; 143r->
@N2643:  -|
@N2644:  -|- Set y2 = l
@N2645:  -|
@N2646:  -|
@N2647:   |
@N2650:   |- Form and store                               ; (146r)
@N2651:   |  (x2 + x2' * 2**-15) * 2**(-1 - |y2 - y1|)
@N2652:   |
@N2653:  -|
@N2654:  -|
@N2655:   |-    Form (x1 + x1' * 2**-15) * 2**-l
@N2656:  -|
@N2657:  Store x1                                         ;  20r->
@N2660:  -|
@N2661:   |                                               ; [LAS was transcription error ts r03]
@N2662:   |- Add x1, x1' and x2, x2'
@N2663:   |
@N2664:   |
@N2665:  -|                                               ; 53r->
@N2666:  Does sign x1 = sign x1'?
@N2667:                                                   ;  125r->
@N2670:  -|                                               ; 59r->
@N2671:   |
@N2672:   |
@N2673:   |- Scale factor and store x1, x1'
@N2674:   |                                               ; [LAS was transcription error ta r02]
@N2675:   |
@N2676:  -|                                               ; [LAS was transcription error ta r03]
@N2677:  -|
@N2700:   |- Form exponent
@N2701:   |
@N2702:  -|                                               ; 108r->
@N2703:  increase address                                 ; [LAS was transcription error ao r197]
@N2704:  Pick up next instruction
@N2706:  -|
@N2707:   |                                               ; Good place for a breakpoint. Int inst in r97.
@N2710:   |- Store instruction and digits
@N2711:   |
@N2712:  -|
@N2713:  -|
@N2714:   |- Form sp to address for particular instruction
@N2715:   |
@N2716:  -|
@N2717:  -|                                               ; (182r)
@N2720:   |
@N2721:   |                                               ; (181r)
@N2727:   |- Pick up x2, x2' and y2. Store x2 in reg. 198, y2 in reg 102. Hold x2' in AC
@N2731:   |
@N2732:   |
@N2733:  -|
@N2734:  Go to part of I.S. for particular instruction    ; (188r)
@N2735:  Separation parameter                             ; [LAS There is a note in Subroutines.pdf pdf-page 25 that says r197 is "pax2"
@N2736:  Temporary storage
@N2737:                                                   ; from 70r-->
@N2740:  Does address equal ax?
@N2741:  Return to register following sp ax               ; (66r)
@N2742:  -|- Produce overflow alarm                       ; from 90r
@N2743:  -|
@N2751:   the illegible hand-written notes address it.]
@N2753:  Nice zero-checking idiom from the frac printer. Ah, one's-complement!
@N2757:  After all that, we interpret an si 0 as an si 0
@N2763:  LAS include printer for the LZ source code
@N2764:  PETR A, rewind
@N3002:  share the "heap space" with the L&Z compiled code
@N3006:  This section with pp label prints the buffer to the flexowriter
@N3024:  Last section with pz label zeroes-out the buffer to return it to its orginal state.
