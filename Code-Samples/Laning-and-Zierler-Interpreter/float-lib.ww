

                        ; 24,6 float format:
                        ;  hi word      lo word
                        ;  1   15       1  6      9
                        ;  s frac-hi    s exp  frac-lo

                        ;  frac is a signed 25-bit (including sign) one's-complement representation
                        ;  exp is a signed 7-bit (including sign) one's-complement representation

                        ; This first section is a test area and should not
                        ;  interfere with anything including the lib if there
                        ;  are no name conflicts.

                        ; Note we don't set .org since this file can be included in others

                        .pp do_print, 0
                        .pp do_floathack, 0      ; Whether to use the workaround to using "ca 0" as -32767/32768
                        .pp f24, 1               ; Whether to apply mask to srh for 24,6 floats
                        .pp main_sep_param, 1

                   max: .word 0o037777

             floathack: ta fhrtn
                        ts ac_save
                        ca ac_save
                        ; Original instruction, replaced by next instruction
                        ; su r17
                        ad max

                 fhrtn: sp 0
               ac_save: .word 0


                        ; --- Below here is the floating lib ---
                        ; | -------------------------------------------------------------
                        ; | DIGITAL COMPUTER LABORATORY
                        ; | MASSACHUSETTS INSTITUTE OF TECHNOLOGY

                        ; | Specifications of WHIRLWIND I LIBRARY SUBROUTINE Number PA 2 ,Z

                        ; | Operations on Real (24,6, 0) Floating Point
                        ; | Double Register Numbers (General Subroutine)

                        ; [Guy: Source code contains two-letter shift ops, (sr, sl).  As far as I can tell,
                        ;  the original instruction set did only "shift and round", so I've converted
                        ;  them all to srr, slr.
                        ;  The shift value is often preceded by a '*', which appears to mean "don't clear
                        ;  the B Register".  See QTR Report #26, 1951]

                        ; | Preset Parameters {to be typed in program titie)

                        ; | vx2/pk: k = separation in storage of two registers of number
                        ; | vx/pN: N = address in storare of initial register of this subroutine

                        ; .org 852
                        ; .org 0o2000

                    ax: ta exec_inst             ; Set address of 1st instruction to be interpreted ; from Enter
                        sp exec_inst

                        ; words r02, r03, and r04 represent the double precision accumulator
                   mra:
                   2ax:
                   r02: .word 0                  ; x1  -|
                   3ax:                          ;      |
                   r03: .word 0                  ; x1'  |- Multiple register accumulator
                   4ax:                          ;      |
                   r04: .word 0                  ; y1  -|
                   r05: srh 30                   ; "ca"                                             ; from 196r-->
                   r06: ca ax
                   r07: ca r191                  ; "cs"                                             ; from l3r,196r
                        sp r95
                        sp r129                  ; "ad"                                             ; from 196r-->
                   r10: .word 29
                        ts r97                   ; "su"                                             ; from 196r-->
                        sp r126
                        sp r07                   ; "cm"                                             ; from 196r-->
                   r14: .word 0                  ;  Temporary digits storage                        ; (170r)

                   r15: sa r03                   ; -|- Add two minor products                       ; from 24r
                        ts r03                   ; -|

                   r17: ca 0                     ; -|- Store overflow
                        ex tmp                   ; -|

                        mh r02                   ; Form major product
                        sp r158
                   r21: mr r02                   ; "mr" Form two                                    ; from 49r9,196r
                        ex r03                   ; minor products
                        mr tmp
                        sp r15
                        ex tmp                   ; "dv"                                             ; from 196r-->
                        ts r97
                        cs r102                  ; -|
                        ad r54                   ;  |- Form exponent of 2**-2/x2
                        ts r102                  ; -|

                        cs r97                   ; -|
                        mh r97                   ;  |
                        ex tmp                   ;  |- Form and store -(2**-2 * x2')/x2**2
                        srh 2                    ;  |
                        dv tmp                   ;  |
                   r35: slh 15                   ;  |
                        ts r151                  ; -|                                               ; [LAS was transcription error ta r151]

                        ca r72                   ; -|                                               ; [LAS this sequence does not seem to store this formula, instead stores 2**-2/x2]
                        dv r97                   ;  |- Form and store 2**-2/x2**2
                        slh 15                   ;  |
                        ts tmp                   ; -|

                        mh r97                   ; -|
                        su r72                   ;  |
                        slh 15                   ;  |
 .if (1 - do_floathack)   su r17                   ;  |- Form (2**-2/x**2)' (Use Euclid's algorithm)  ; [LAS Looks like this should say (2**-2/x2)' -- Uses remainder arith, hence the Euclid ref]
                                     .if do_floathack       sp floathack             ;                                                  ; [LAS 3/30/25 Using r17 broke dv, but looks like it works now in more cases than before.
                        ;                        ;                                                  ; Still breaks e.g. on sqrt2 test.
                        ;                        ;                                                  ; Can't find what changed to enable this, but we'll switch between the original
                        ;                        ;                                                  ; and floathack as needed.
                        ;                        ;                                                  ; The use of r17 is highly suspicious, as it's the opcode of an instruction.]
                        ad r50                   ;  |
                        dv r97                   ;  |
                        slh 15                   ; -|

                        ad r151                  ; -|- Add two minor parts of reciprocal
                        sp r21                   ; -|

                   r50: .word 1
                        sp r73                   ; "ts"
                   r52: cs r02                   ; -|- complement x1                                ; [LAS Was ca r02. Transcription error.
                        ;                        ;                                                  ;  Caught late, needed to zoom in and closely examine original text 6/16/25.]
                        sp r164                  ; -|
                   r54: .word 2
                        ca r201                  ; "ta" -|                                          ; from 196r-->
                   r56: td 0                     ;       |- Store digits in indicated address
                        sp next_inst             ;      -|

                   r58: ao r02                   ; -|- Increase xl by by 2**-15                     ; from 119r-->
                        sp r167                  ; -|

                   r60: sp r35
                        sp r73                   ; "ex"                                             ; from 196r-->
                   r62: .word 63
                        cs r02                   ; "cp" -|- Is x1 negative?                         ; from 196r-->
                        cp next_inst             ;      -|                                          ; [LAS was transcription error r188]
                        ao exec_inst             ; "sp" -|- Set Return address for sp ax            ; from 196r
                        td r201                  ;      -|
                        ca r189                  ; -|- Set pick up order for ordinary cp & sp       ; LAST DIGIT is a GUESS! [LAS not legible -- needed to dig into program to nail this down]
                        td exec_inst             ; -|

                        su r06                   ;                                                  ; PROBABLY an SU op code!

                        cp r199                  ; -|- Test to see whether instruction is sp ax
                        sp exec_inst             ; -|

                   r72: .word 0.20000            ;                                                  ; [LAS ]

                   r73: ca r03                   ; -|                                               ; from 51r,61r->
                        srr 6                    ;  |- Round off x1' and store x1' * 2**-6
 .if f24                md float24_low_mant_mask
                        ts r03                   ; -|

                        srh 9                    ; -|
                        sa r02                   ;  |- Add round-off carry into x1
                        ts r02                   ; -|

                        ca 0                     ; -|
                        cp r83                   ;  |- Is there an overflow?
                        su 0                     ;  |
                        cp r86                   ; -|

                   r83: slr 14                   ; -|                                               ; from  80r->
                        ts r02                   ;  |- Add overflow into x1 and x1'. Increase y1
                        ao r04                   ; -|

                   r86: cm r04                   ; -|                                               ; from  82r->
                        su r62                   ;  |- |y1| - 63 > 0?
                        cp r93                   ; -|                                               ; [LAS was transcription error sp r93]

                        cs r04                   ; -|- y <= 0? (i.e.  y1 < -63?)
                        cp r202                  ; -|

                        cs r62                   ; -|- Set y1 = -63
                        ts r04                   ; -|

                   r93: ca r97                   ; -|- ts n + k or ex n + k                         ; from 88r->
                        ad sep_param             ; -|

                   r95: ts r102                  ; Store ts, ex, ca, cs or cm n+k                   ; from 8r->                                        ; [LAS Issue no-lower-cm: When branched-to,
                        ;                        ;                                                  ;                                                  ; does not load a possible cm from r97 at r93,
                        ;                        ;                                                  ;                                                  ; so we get no mag of low end. But that would not
                        ;                        ;                                                  ;                                                  ; be completely right either, as it's a packed
                        ;                        ;                                                  ;                                                  ; word with an exp.]
                        ca r02
                   r97: .word 0                  ; -|                                               ; from (180r)
                        ex r03                   ;  |
 .if (1-f24)            srh 9                    ;  |

 .if f24                ts float24_tmp

                        ex r04                   ;  |
                        slh 9                    ;  |

 .if f24                md float24_low_exp_mask
 .if f24                sd float24_tmp

                  r102: .word 0                  ;  |                                               ; (95r)

 .if f24                ts float24_low           ;                                                  ; [Note ex leaves B alone]
 .if f24                srh 9
 .if f24                ts float24_tmp
 .if f24                ca float24_low
 .if f24                md float24_low_mant_mask

                        srh 9                    ;  |- Perform ts, ex, ca, cs or cm                 ; [saves low mant in B]

 .if f24                ex float24_tmp           ;                                                  ; [Note ex leaves B alone]

                        ex r03                   ;  |
                        ts r02                   ;  |
                        slh 15                   ;  |                                               ; [gets low mant back from B]
                        ex r03                   ;  |
                  r108: sp r177                  ; -|

                  r109: cm r02                   ; -|                                               ;  166r->
                        su 0                     ;  |- x1 != 0?
                        cp r52                   ; -|

                        cm r03                   ; -|
                        su 0                     ;  |- x1' != 0?
                        cp r122                  ; -|

                        su r50                   ; -|
                        ad r17                   ;  |- Form |x1'| - 1                               ; PROBABLY AD op code
                        ts r03                   ; -|

                        ca r02                   ; -|- x1 > 0?
                        cp r58                   ; -|

                        su r50                   ; -|- Form x1 - 2**-15
                        ts r02                   ; -|

                  r122: cs r03                   ; -|- Complement x1'                               ; [LAS was transcription error ca r03]             ;   114r->
                        ts r03                   ; -|

                        mr r02                   ; -|- Form x1*x1'
                        sp r166                  ; -|

                  r126: cs tmp                   ; -|                                               ; 12r->
                        ts tmp                   ;  |- Complement x2, x2'
                        cs r97                   ; -|

                  r129: ex r102                  ; -|                                               ; r9 ->
                        su r04                   ;  |- Form and store  y2 - yl
                        ts r97                   ; -|

                        cp r141                  ; y2 - y1 > 0?

                        ad r04                   ; -|
                        ts r04                   ;  |
                        ca r02                   ;  |
                        ex tmp                   ;  |- Interchange (x1, x1', y1) and (x2, x2', y2)
                        ts r02                   ;  |
                        ca r03                   ;  |
                        ex r102                  ;  |
                        ts r03                   ; -|

                  r141: cm r97                   ; -|                                               ; 132r->
                        su r10                   ;  |-  |y2 - y1| - 29 > 0?
                        cp r145                  ; -|

                        sp next_inst             ; No need for addition

                  r145: ad r05                   ; -|- Store  sr *1 +|y2 - y1|                      ; 143r->
                        ts r151                  ; -|

                        ca r50                   ; -|- Set y2 = l
                        ex r102                  ; -|

                        srh 15                   ; -|
                        ad tmp                   ;  |
                  r151: .word 0                  ;  |- Form and store                               ; (146r)
                        ts tmp                   ;  |  (x2 + x2' * 2**-15) * 2**(-1 - |y2 - y1|)
                        slh 15                   ;  |
                        ex r03                   ; -|

                        srh 15                   ; -|
                        ad r02                   ;  |-    Form (x1 + x1' * 2**-15) * 2**-l
                        srh 1                    ; -|

                  r158: ts r02                   ; Store x1                                         ;  20r->

                        slh 15                   ; -|
                        sa r03                   ;  |                                               ; [LAS was transcription error ts r03]
                        ts r03                   ;  |- Add x1, x1' and x2, x2'
                        ca tmp                   ;  |
                        ad r02                   ;  |
                  r164: ts r02                   ; -|                                               ; 53r->

                        mr r03                   ; Does sign x1 = sign x1'?
                  r166: cp r109                  ;                                                  ;  125r->

                  r167: ca r03                   ; -|                                               ; 59r->
                        srh 15                   ;  |
                        ad r02                   ;  |
                        sf r14                   ;  |- Scale factor and store x1, x1'
                        ts r02                   ;  |                                               ; [LAS was transcription error ta r02]
                        slh 15                   ;  |
                        ts r03                   ; -|                                               ; [LAS was transcription error ta r03]

                        cs r14                   ; -|
                        ad r102                  ;  |- Form exponent
                        ad r04                   ;  |
                  r177: ts r04                   ; -|                                               ; 108r->

             next_inst: ao exec_inst             ; increase address                                 ; [LAS was transcription error ao r197]
             exec_inst: ca 0                     ; Pick up next instruction
                        sp halt_if_zero
                        ts r97                   ; -|
           inst_stored: td r56                   ;  |                                               ; Good place for a breakpoint. Int inst in r97.
                        td r189                  ;  |- Store instruction and digits
                        ad sep_param             ;  |
                        td r191                  ; -|
                        srh 27                   ; -|
                        slh 17                   ;  |- Form sp to address for particular instruction
                        ad r60                   ;  |
                  r188: ts dispatch              ; -|
                  r189: ca 0                     ; -|                                               ; (182r)
                        ts r102                  ;  |
                  r191: ca 0                     ;  |                                               ; (181r)

 .if f24                ts float24_low
 .if f24                srh 9
 .if f24                ts float24_tmp
 .if f24                ca float24_low
 .if f24                md float24_low_mant_mask

                        srh 9                    ;  |- Pick up x2, x2' and y2. Store x2 in reg. 198, y2 in reg 102. Hold x2' in AC

 .if f24                ex float24_tmp

                        ex r102                  ;  |
                        ts tmp                   ;  |
                        slh 15                   ; -|

 .if do_print           .print "1 dis='%i' inst='%i' tmp=x2=%o r102=y2=%o AC=x2'=0o%ao r02=x1=%o r03=x1'=%o r04=y1=%o t=%fl r189=%o mra=%fm mra-oct=%o %o %o", dispatch, r97, tmp, r102, r02, r03, r04, t, r189, mra, mra + 0, mra + 1, mra + 2
              dispatch: .word 0                  ; Go to part of I.S. for particular instruction    ; (188r)
                  r197:
             sep_param: .word main_sep_param     ; Separation parameter                             ; [LAS There is a note in Subroutines.pdf pdf-page 25 that says r197 is "pax2"
                  r198:
                   tmp: .word 0                  ; Temporary storage

                  r199: ad r50                   ;                                                  ; from 70r-->
                        cp exec_inst             ; Does address equal ax?
                  r201: sp 0                     ; Return to register following sp ax               ; (66r)

                  r202: ca r108                  ; -|- Produce overflow alarm                       ; from 90r
                        ad r108                  ; -|

           float24_low: .word 0
           float24_tmp: .word 0
 float24_low_mant_mask: .word 0o000777
  float24_low_exp_mask: .word 0o177000
       float24_ac_save: .word 0

                        ; [LAS Added this section, which halts the machine if it encounters an
                        ;  si 0 (i.e., a zero instruction). This came up in L&Z, where the
                        ;  compiled code, which is then spax-interpreted, does not have a
                        ;  clean termination. So it runs into the zero at the end and
                        ;  crashes. Seems to be a hole in the design of L&Z or the float lib
                        ;  or both, where termination conditions aren't clear. Perhaps some of
                        ;  the illegible hand-written notes address it.]

          halt_if_zero: ta hiz_rtn
                        ts hiz_ac
                        cm hiz_ac                ; Nice zero-checking idiom from the frac printer. Ah, one's-complement!
                        su 0
                        cp hiz1
                        sp hiz2
                  hiz1: si 0                     ; After all that, we interpret an si 0 as an si 0
                  hiz2: ca hiz_ac
               hiz_rtn: sp 0
                hiz_ac: .word 0


