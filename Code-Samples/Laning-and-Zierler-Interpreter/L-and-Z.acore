
; *** Core Image ***
%File: L-and-Z.ww
%TapeID: None
@C0040: 0000200 0130104 0014042 0110141 0044050 0044311 0044056 0044066 
@C0050: 0100000 0114145 0070054 0074307 0100202 0044053 0100000 0114000 
@C0060: 0070041 0114227 0070316 0100214 0044335 0104337 0110000 0070107 
@C0070: 0164224 0040113 0100254 0114224 0154011 0040114 0100071 0044102 
@C0100: 0075524 0140422 0110000 0075524 0130105 0074042 0000000 0000000 
@C0110: 0100376 0044102 0074100 0000000 0000000 0075016 0074545 0101031 
@C0120: 0074435 0014121 0130132 0070121 0074042 0100134 0040156 0075016 
@C0130: 0074540 0074151 0177775 0130172 0074407 0110601 0074374 0075524 
@C0140: 0074040 0000141 0000241 0074323 0000011 0074000 0000000 0074323 
@C0150: 0000004 0074042 0074523 0074323 0000005 0074323 0074325 0074323 
@C0160: 0000003 0000000 0000000 0074323 0000006 0000323 0000002 0074323 
@C0170: 0000010 0074323 0074527 0074323 0000007 0074323 0074330 0074323 
@C0200: 0000333 0074323 0000307 0074323 0074042 0074323 0074042 0074323 
@C0210: 0000341 0074323 0074042 0074323 0000364 0074323 0105526 0074323 
@C0220: 0040000 0074323 0074042 0074323 0000000 0074323 0000142 0000012 
@C0230: 0140000 0074323 0074313 0074323 0150000 0074323 0074241 0000001 
@C0240: 0074042 0100141 0044043 0074042 0000023 0000230 0022000 0000234 
@C0250: 0000016 0074042 0074042 0074561 0000017 0110234 0074447 0000465 
@C0260: 0000015 0000000 0074652 0074720 0000020 0040000 0000014 0110771 
@C0270: 0000022 0105526 0074627 0000000 0000021 0074573 0074461 0050301 
@C0300: 0074471 0100000 0074435 0074042 0074042 0101526 0074042 0100311 
@C0310: 0114145 0074000 0074042 0100226 0074242 0074115 0100210 0044335 
@C0320: 0104237 0074066 0074042 0110230 0074302 0074277 0074725 0000024 
@C0330: 0074277 0074732 0074313 0100202 0044053 0074000 0074241 0000013 
@C0340: 0074042 0104107 0040107 0130107 0070360 0074424 0044350 0075524 
@C0350: 0040000 0075524 0100323 0044356 0100350 0114220 0110000 0074374 
@C0360: 0075524 0150422 0075524 0074343 0100446 0044367 0100406 0064000 
@C0370: 0044224 0100224 0074435 0074407 0074435 0075524 0100416 0075524 
@C0400: 0100000 0040106 0040107 0100401 0044104 0074307 0074737 0044415 
@C0410: 0101530 0044414 0101526 0160017 0154000 0074000 0000000 0147777 
@C0420: 0040000 0001000 0050000 0004000 0050433 0100434 0114166 0040434 
@C0430: 0114446 0070443 0100434 0074000 0000305 0050445 0040040 0130436 
@C0440: 0114220 0114434 0070444 0054000 0130446 0074000 0000037 0100255 
@C0450: 0064323 0064255 0074454 0074042 0050460 0100412 0064271 0064412 
@C0460: 0074000 0074454 0100257 0044405 0074042 0074454 0100470 0044405 
@C0470: 0074307 0050502 0100305 0040412 0100216 0040271 0100245 0044323 
@C0500: 0100247 0044255 0074000 0074471 0074454 0100255 0064323 0064255 
@C0510: 0074663 0050522 0100263 0074435 0044615 0114237 0040610 0044521 
@C0520: 0100522 0064000 0074000 0074511 0044265 0074471 0074042 0100267 
@C0530: 0074435 0100265 0074435 0100610 0044536 0100615 0044000 0074471 
@C0540: 0100603 0044324 0044324 0044054 0074042 0100604 0044324 0100605 
@C0550: 0044054 0074407 0110602 0044557 0100436 0114220 0110145 0040000 
@C0560: 0074375 0100575 0040601 0014563 0114327 0070000 0114266 0070137 
@C0570: 0100606 0044172 0074042 0100602 0074562 0074323 0074133 0100607 
@C0600: 0074571 0074323 0070323 0000545 0000302 0000200 0000576 0000527 
@C0610: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0000000 
@C0620: 0000000 0000000 0000000 0000000 0000000 0000000 0000000 0074435 
@C0630: 0130514 0130516 0074511 0074424 0044622 0130634 0100255 0114323 
@C0640: 0070642 0074042 0100516 0044645 0044647 0100000 0110651 0040000 
@C0650: 0074525 0004000 0100516 0044656 0114237 0044516 0100000 0044707 
@C0660: 0114651 0070716 0074503 0100634 0114237 0044634 0044672 0044712 
@C0670: 0100267 0074435 0100000 0110220 0074435 0100514 0044702 0114237 
@C0700: 0044514 0044703 0100000 0064000 0110145 0074435 0110237 0044000 
@C0710: 0100323 0044713 0100000 0110000 0074435 0074042 0074471 0074663 
@C0720: 0050724 0100416 0040771 0100420 0074000 0050731 0110771 0040771 
@C0730: 0100317 0074000 0050736 0110771 0040771 0104420 0074000 0050745 
@C0740: 0050753 0075524 0130745 0044760 0130760 0104000 0070765 0040770 
@C0750: 0104770 0040770 0100322 0110000 0040762 0130770 0070761 0075524 
@C0760: 0074000 0075524 0140000 0075524 0074755 0040770 0100230 0074753 
@C0770: 0000000 0000000 0000000 0050776 0075524 0000225 0100000 0045013 
@C1000: 0045003 0071004 0075524 0074000 0114141 0170012 0025006 0130776 
@C1010: 0100246 0025011 0075524 0100000 0074336 0074774 0051030 0100631 
@C1020: 0064172 0064453 0101032 0064315 0065032 0100131 0064162 0064131 
@C1030: 0074000 0074773 0074117  None    None    None    None    None   
@C1520:  None    None    None    None   0052007 0076007 0000000 0000000 
@C1530: 0000000 0161036 0101524 0102023 0075663 0075725 0000000 0041665 
@C1540: 0075722 0075533 0000000 0125527 0041527 0100000 0066032 0145526 
@C1550: 0075762 0141526 0065527 0142032 0075543 0066032 0041665 0105672 
@C1560: 0111612 0041672 0105665 0145665 0066032 0161002 0152032 0155017 
@C1570: 0051753 0101634 0151665 0155017 0042032 0145665 0115634 0155017 
@C1600: 0115545 0111606 0151665 0155017 0111753 0075551 0000001 0075635 
@C1610: 0101526 0075770 0000002 0102035 0044000 0076006 0131526 0075773 
@C1620: 0075567 0075635 0000077 0105526 0072020 0132007 0046035 0100264 
@C1630: 0046007 0115532 0072033 0076007 0020000 0101527 0160006 0041527 
@C1640: 0161011 0125526 0041526 0100000 0071647 0114000 0071652 0154016 
@C1650: 0041526 0131530 0121530 0115622 0075661 0105530 0072036 0105622 
@C1660: 0041530 0101665 0112031 0041672 0101526 0000000 0065527 0161011 
@C1670: 0065530 0155011 0000000 0161011 0065527 0041526 0155017 0065527 
@C1700: 0076005 0121526 0114000 0071610 0121527 0114000 0071716 0115606 
@C1710: 0111545 0041527 0101526 0071616 0115606 0041526 0101527 0041527 
@C1720: 0141526 0075772 0106032 0042032 0105665 0065672 0115530 0041665 
@C1730: 0071741 0111530 0041530 0101526 0066032 0041526 0101527 0065672 
@C1740: 0041527 0121665 0115536 0071745 0076006 0111531 0041753 0101606 
@C1750: 0065672 0161017 0112032 0000000 0042032 0155017 0065527 0161017 
@C1760: 0111526 0161001 0041526 0155017 0041527 0041527 0102032 0111526 
@C1770: 0041526 0141527 0071701 0101527 0161017 0111526 0165542 0051526 
@C2000: 0155017 0051527 0105542 0111672 0111530 0041530 0132031 0100000 
@C2010: 0041665 0045614 0046021 0112031 0046023 0161033 0155021 0111620 
@C2020: 0042030 0100000 0041672 0100000 0161011 0065672 0042032 0155017 
@C2030: 0000000 0000000 0000000 0111606 0072007 0074000 0101700 0111700 
@S0040: start
@S0040: a1
@S0115: a2
@S0141: a3
@S0241: a4
@S0323: a14
@S0341: a5
@S0364: a6
@S0416: a7
@S0424: a8
@S0447: a9
@S0511: a10
@S0627: a11
@S0652: a12
@S0720: a13
@S0773: a15
@S1016: a16
@S1524: ax
@S1525: r01
@S1526: r02
@S1527: r03
@S1530: r04
@S1531: r05
@S1532: r06
@S1533: r07
@S1534: r08
@S1535: r09
@S1536: r10
@S1537: r11
@S1540: r12
@S1541: r13
@S1542: r14
@S1543: r15
@S1544: r16
@S1545: r17
@S1546: r18
@S1547: r19
@S1550: r20
@S1551: r21
@S1552: r22
@S1553: r23
@S1554: r24
@S1555: r25
@S1556: r26
@S1557: r27
@S1560: r28
@S1561: r29
@S1562: r30
@S1563: r31
@S1564: r32
@S1565: r33
@S1566: r34
@S1567: r35
@S1570: r36
@S1571: r37
@S1572: r38
@S1573: r39
@S1574: r40
@S1575: r41
@S1576: r42
@S1577: r43
@S1600: r44
@S1601: r45
@S1602: r46
@S1603: r47
@S1604: r48
@S1605: r49
@S1606: r50
@S1607: r51
@S1610: r52
@S1611: r53
@S1612: r54
@S1613: r55
@S1614: r56
@S1615: r57
@S1616: r58
@S1617: r59
@S1620: r60
@S1621: r61
@S1622: r62
@S1623: r63
@S1624: r64
@S1625: r65
@S1626: r66
@S1627: r67
@S1630: r68
@S1631: r69
@S1632: r70
@S1633: r71
@S1634: r72
@S1635: r73
@S1636: r74
@S1637: r75
@S1640: r76
@S1641: r77
@S1642: r78
@S1643: r79
@S1644: r80
@S1645: r81
@S1646: r82
@S1647: r83
@S1650: r84
@S1651: r85
@S1652: r86
@S1653: r87
@S1654: r88
@S1655: r89
@S1656: r90
@S1657: r91
@S1660: r92
@S1661: r93
@S1662: r94
@S1663: r95
@S1664: r96
@S1665: r97
@S1666: r98
@S1667: r99
@S1670: r100
@S1671: r101
@S1672: r102
@S1673: r103
@S1674: r104
@S1675: r105
@S1676: r106
@S1677: r107
@S1700: r108
@S1701: r109
@S1702: r110
@S1703: r111
@S1704: r1l2
@S1705: r113
@S1706: r1l4
@S1707: r115
@S1710: r116
@S1711: r117
@S1712: r118
@S1713: r119
@S1714: r120
@S1715: r121
@S1716: r122
@S1717: r123
@S1720: r124
@S1721: r125
@S1722: r126
@S1723: r127
@S1724: r128
@S1725: r129
@S1726: r130
@S1727: r131
@S1730: r132
@S1731: r133
@S1732: r134
@S1733: r135
@S1734: r136
@S1735: r137
@S1736: r138
@S1737: r139
@S1740: r140
@S1741: r141
@S1742: r142
@S1743: r143
@S1744: r144
@S1745: r145
@S1746: r146
@S1747: r147
@S1750: r148
@S1751: r149
@S1752: r150
@S1753: r151
@S1754: r152
@S1755: r153
@S1756: r154
@S1757: r155
@S1760: r156
@S1761: r157
@S1762: r158
@S1763: r159
@S1764: r160
@S1765: r161
@S1766: r162
@S1767: r163
@S1770: r164
@S1771: r165
@S1772: r166
@S1773: r167
@S1774: r168
@S1775: r169
@S1776: r170
@S1777: r171
@S2000: r172
@S2001: r173
@S2002: r174
@S2003: r175
@S2004: r176
@S2005: r177
@S2006: r178
@S2007: r179
@S2010: r180
@S2011: r181
@S2012: r182
@S2013: r183
@S2014: r184
@S2015: r185
@S2016: r186
@S2017: r187
@S2020: r188
@S2021: r189
@S2022: r190
@S2023: r191
@S2024: r192
@S2025: r193
@S2026: r194
@S2027: r195
@S2030: r196
@S2031: r197
@S2032: r198
@S2033: r199
@S2034: r200
@S2035: r201
@S2036: r202
@S2037: r203
@N0040: r0    ; r0 "from: START"
@N0041: r1 "from: 16r"
@N0042: r2 "from: NORMAL RE ENTRY"
@N0043: r3 ; "(l.c. or u.c.)"  ; "from: (1a4)"
@N0044: r4
@N0045: r5
@N0046: r6
@N0047: r7
@N0050: r8 ;"from: (4r)"
@N0051: r9 ; " -| Is symbol [or]"
@N0052: r10 ;" -| a number?
@N0053: r11
@N0054: r12    "31a3 is the normal mode"   ;"from: 10r"
@N0055: r13
@N0056: r14 ;"from: (6r)"
@N0057: r15    "(Is symbol a period?)"
@N0060: r16
@N0061: r17 ;- l.c. no.[?] or [subtract flexo for '9']
@N0062: r18 ;- exponent?
@N0063: r19 ;- set to interpret
@N0064: r20 ; digit as an
@N0065: r21 ;- exponent
@N0066: r22 ;from: 48a4 (7r)
@N0067: r23 ;if digit is zero
@N0070: r24 ;-|
@N0071: r25 ; |"Form (24,6) version"
@N0072: r26 ; |"of digit as an"
@N0073: r27 ; |"integer in (43r, 44r)"
@N0074: r28 ; |
@N0075: r29 ;-|
@N0076: r30
@N0077: r31
@N0100: r32    "(programmed arithmetic)"
@N0101: r33 ||   "(i.e., by 10)"
@N0102: r34 || ; "written by (31r, 41r)"
@N0103: r35 ||
@N0104: r36  ; (reset to a1 + 38)    ;from: (1r)
@N0105: r37
@N0106: r38   (counter for digits before decimal pt)
@N0107: r39   ( ''     ''   ''    after     ''   '' )
@N0110: r40 ;from: 23r
@N0111: r41
@N0112: r42
@N0113: r43 ;- Temporary storage for
@N0114: r44 ;- integer during read-in
@N0115: r0 ;from: (p) 44a4
@N0116: r1
@N0117: r2 ;from: 44a4;- store 'sp to print
@N0120: r3 ;                        control'
@N0121: r4 ;-| read in
@N0122: r5 ; | "RINT"
@N0123: r6 ;-|
@N0124: r7
@N0125: r8 ;from: 17a3 (period after print instr.);- reset counter
@N0126: r9 ;-
@N0127: r10
@N0130: r11
@N0131: r12
@N0132: r13 ; (counter); from (5r, 9r)
@N0133: r14 ;from: 5310 ;- part of SP routine
@N0134: r15 ;
@N0135: r16 ;
@N0136: r17 ;-
@N0137: r18 ;from: 46a10;- START
@N0140: r19 ;-
@N0141: r0
@N0142: r1
@N0143: r2   'e'
@N0144: r3   '8'
@N0145: r4
@N0146: r5; [This is the flexo code for ';', but the original doesn't have a dispatch address at all]
@N0147: r6   'a'
@N0150: r7   '3'
@N0151: r8   "space" [if we hit this, we're discarding a space character in the input stream]
@N0152: r9   '='
@N0153: r10  's'
@N0154: r11  '4'
@N0155: r12  'i'
@N0156: r13  '+'
@N0157: r14  'u'
@N0160: r15  '2'
@N0161: r16  ; unused flexo code "shift ribbon"
@N0162: r17  '.' [period] ;from: (8a16)
@N0163: r18  'd'
@N0164: r19  '5'
@N0165: r20  'r'
@N0166: r21  '1'
@N0167: r22  'j'
@N0170: r23  '7'
@N0171: r24  'n'
@N0172: r25  ','
@N0173: r26  'f'
@N0174: r27  '6'
@N0175: r28  'c'
@N0176: r29  '-'
@N0177: r30  'k'
@N0200: r31
@N0201: r32  't'
@N0202: r33
@N0203: r34  'z'
@N0204: r35  back space
@N0205: r36 'l'
@N0206: r37  tabulate
@N0207: r38  'w'
@N0210: r39
@N0211: r40  'h'
@N0212: r41  carr. return
@N0213: r42  'y'
@N0214: r43
@N0215: r44  'p'
@N0216: r45
@N0217: r46  'q'
@N0220: r47
@N0221: r48  'o' (letter)
@N0222: r49  stop
@N0223: r50  'b'
@N0224: r51
@N0225: r52  'g'
@N0226: r53
@N0227: r54  '9'
@N0230: r55 ; [this is probably a constant, not an op-code]
@N0231: r56  'm'
@N0232: r57 shift to u.c.
@N0233: r58  'x'
@N0234: r59
@N0235: r60  'v'
@N0236: r61  shift to l.c.
@N0237: r62  '0' (zero)
@N0240: r63  nullify
@N0241: r0 ;from: 61r
@N0242: r1
@N0243: r2     'E' (not used)
@N0244: r3     '8' (exp.)
@N0245: r4
@N0246: r5     '_'    ; r0  [Larry had it marked as '+'?]
@N0247: r6     'A' (not used)
@N0250: r7     '3' (exp.)
@N0251: r8     space
@N0252: r9     '.' ['dot', not period] (see note)
@N0253: r10    'S'
@N0254: r11    '4' (exp.)
@N0255: r12 || 'I' (not used)
@N0256: r13    '/'
@N0257: r14    'U' (not used)
@N0260: r15    '2' (exp.)
@N0261: r16  shift ribbon
@N0262: r17    ')'
@N0263: r18 || 'D' (not used)
@N0264: r19    '5' (exp.)
@N0265: r20 || 'R' (not used)  ;from: (11a10)
@N0266: r21    '1' (exp.)
@N0267: r22 || 'J'(not used)
@N0270: r23    '7' (exp.)
@N0271: r24 || 'N' (not used)
@N0272: r25    '('
@N0273: r26    'F'
@N0274: r27    '6' (exp.)
@N0275: r28    'C'
@N0276: r29    '-' (exp.)
@N0277: r30    'K' (not used)   ;from: 52r, 552
@N0300: r31
@N0301: r32    'T' (not used)  ;from: (30r)
@N0302: r33        ;from: 51r
@N0303: r34    'Z' (not used)
@N0304: r35    back space
@N0305: r36 || 'L' (not used)
@N0306: r37    tabulate
@N0307: r38    'W' (not used) ;from: 10a1
@N0310: r39
@N0311: r40    'H' (not used)  ;from: (4a1)
@N0312: r41    carr. return
@N0313: r42    'Y' (not used);from: 57a3
@N0314: r43
@N0315: r44    'P'
@N0316: r45 ;from: 17a1
@N0317: r46    'Q' (not used)
@N0320: r47
@N0321: r48    'O' (letter) (not used)
@N0322: r49    stop
@N0323: r50    'B' (not used)  ;from: ()
@N0324: r51 ; "33r -> normal mode"
@N0325: r52    'G' (not used)  ;from: 13a3
@N0326: r53 ||
@N0327: r54    '9' (exp.)
@N0330: r55    ;from: 29a3
@N0331: r56 || 'M' (not used)
@N0332: r57     shift to u.c.
@N0333: r58    'X' (not used)  ;from: 10a1
@N0334: r59
@N0335: r60     'V' (not used) (from: 19a1, 46r)
@N0336: r61     shift to l.c.
@N0337: r62    '0' (zero exp.)
@N0340: r63    nullify
@N0341: r0 ;from: 60a4
@N0342: r1
@N0343: r2 ;from: 18r
@N0344: r3
@N0345: r4        (select new address k)
@N0346: r5
@N0347: (= sp 852)   ; r6 ;|- store number
@N0350: r7 || ;from: (5r);      |  in (k, k+1)
@N0351: r8 ||
@N0352: r9 ; |- form symbol mr k
@N0353: r10  |  or dv k, where
@N0354: r11  | k is address at
@N0355: r12  | which number has
@N0356: r13  |  just been stored  ;from: (10r)
@N0357: r14  |-
@N0360: r15 ;from: 3r
@N0361: r16 ||        (divide by 10)
@N0362: r17 ||
@N0363: r18
@N0364: r0 ;from: 60a4;- store "sp exp" in
@N0365: r1 ; place of last-stored
@N0366: r2 ; symbol (mr x or dv x)
@N0367: r3 ;-
@N0370: r4 ;-
@N0371: r5 ; store "+x"
@N0372: r6 ;-
@N0373: r7 ;- compute and store the
@N0374: r8 ;- exponent +- [?] n
@N0375: r9 ;-
@N0376: r10 ; reset MRA
@N0377: r11 ; and various
@N0400: r12 ; counters
@N0401: r13 ;
@N0402: r14 ;
@N0403: r15 ;
@N0404: r16 ;-
@N0405: r17
@N0406: r18  ;"sp exp"
@N0407: r19
@N0410: r20 ;-
@N0411: r21 ; Form [?] +- [?] n, where
@N0412: r22 ; n is in MRA in
@N0413: r23 ; (24,6) form
@N0414: r24 ;-
@N0415: r25
@N0416: r0 ; } 0
@N0417: r1 ; }
@N0420: r2 ; } 1
@N0421: r3 ; }
@N0422: r4 ; } 10
@N0423: r5 ; }
@N0424: r0 ;from: 4a5;- Select new
@N0425: r1 ; address for
@N0426: r2 ; storage of
@N0427: r3 ; numerical
@N0430: r4 ; quantity
@N0431: r5 ;
@N0432: r6 ;
@N0433: r7 ;from: (0r);
@N0434: r8 ;- (last address used)
@N0435: r9 ;from: various points;-
@N0436: r10 ; Store C(AC) in    ()
@N0437: r11 ;    next available
@N0440: r12 ;    program address.
@N0441: r13 ;
@N0442: r14 ;
@N0443: (alarm)        ; r15 ;from: 5r;
@N0444: r16 ;from: 14r;
@N0445: r17 ;from: (9r);
@N0446: r18 ;- (last occupied program address)
@N0447: r0  (divide) ;from: 13a4
@N0450: r1
@N0451: r2
@N0452: r3
@N0453: r4  (the a10 + 14 mode is never used)
@N0454: r5 ;from: 3r,10r,14r,30r
@N0455: r6
@N0456: r7
@N0457: r8
@N0460: r9 ;from: (5r)
@N0461: r10     (upper case minus) ;from: 29a4
@N0462: r11
@N0463: r12
@N0464: r13
@N0465: r14      ; from: 17a6 [?]
@N0466: r15
@N0467: r16
@N0470: r17
@N0471: r18  (reset dv and exp to normal)  ;from: 28r,12a10,22a10
@N0472: r19
@N0473: r20
@N0474: r21
@N0475: r22
@N0476: r23
@N0477: r24
@N0500: r25
@N0501: r26
@N0502: r27 ;from: (18r)
@N0503: r28   (reset dv and exp to non-normal)  ;from: 8a12
@N0504: r29
@N0505: r30
@N0506: r31
@N0507: r32
@N0510: r33
@N0511: r0 ;from: 10r,3a11
@N0512: r1
@N0513: r2
@N0514: r3
@N0515: r4
@N0516: r5
@N0517: r6
@N0520: r7
@N0521: r8 ;from: (6r)
@N0522: r9 ;from: (0r)
@N0523: r10 ;from: 9a3  (equals)
@N0524: r11
@N0525: r12 ;from: 17a11
@N0526: r13
@N0527: r14 (comma)   ;from: 25a3
@N0530: r15
@N0531: r16
@N0532: r17
@N0533: r18
@N0534: r19
@N0535: r20
@N0536: r21 ;from: (19r)
@N0537: r22
@N0540: r23
@N0541: r24
@N0542: r25
@N0543: r26
@N0544: r27
@N0545: r28 ;from: 51a4
@N0546: r29
@N0547: r30
@N0550: r31
@N0551: r32
@N0552: r33
@N0553: r34
@N0554: r35
@N0555: r36
@N0556: r37
@N0557: r38 ;from: (34r)
@N0560: r39
@N0561: r40   (SP)  ;from: 10a4
@N0562: r41 ;from: 51r
@N0563: r42
@N0564: r43
@N0565: r44       (provision for future SR, CR instructions)
@N0566: r45
@N0567: r46  (START)
@N0570: r47
@N0571: r48
@N0572: r49
@N0573: r50   (CP)  ;from: 28a4
@N0574: r51
@N0575: r52 ||
@N0576: r53 ;from: 25a3
@N0577: r54 ;from: 25a3
@N0600: r55
@N0601: r56
@N0602: r57
@N0603: r58  [guy: I'm not sure if this is what "+28r" means!]
@N0604: r59
@N0605: r60
@N0606: r61
@N0607: r62
@N0610: r63 ;- storage for addresses used by
@N0611: r64 ; parenthesis routines in forming
@N0612: r65 ; and storing sp orders
@N0613: r66 ;
@N0614: r67 ; [These are notated in the CS as: ]
@N0615: r68 ; [   63-67 +0                    ]
@N0616: r69 ; [   68-72 +0                    ]
@N0617: r70 ; [   73-77 +0                    ]
@N0620: r71 ;
@N0621: r72 ;
@N0622: r73 ;
@N0623: r74 ;
@N0624: r75 ;
@N0625: r76 ;
@N0626: r77 ;-
@N0627: r0 (store dummy symbol)  ;from: 25a4
@N0630: r1
@N0631: r2
@N0632: r3
@N0633: r4
@N0634: r5
@N0635: r6
@N0636: r7
@N0637: r8
@N0640: r9
@N0641: r10
@N0642: r11 ;from: 9r
@N0643: r12
@N0644: r13
@N0645: r14 ;from: (12r)
@N0646: r15
@N0647: r16 ;from: (13r)
@N0650: r17
@N0651: r18  ; [assuming it's octal]
@N0652: r0 ;from: 17a4
@N0653: r1
@N0654: r2
@N0655: r3
@N0656: r4 ;from: (1r)
@N0657: r5
@N0660: r6
@N0661: r7
@N0662: r8
@N0663: r9 ;from: 37r
@N0664: r10
@N0665: r11
@N0666: r12
@N0667: r13
@N0670: r14
@N0671: r15
@N0672: r16 ;from: (12r)
@N0673: r17
@N0674: r18
@N0675: r19
@N0676: r20
@N0677: r21
@N0700: r22
@N0701: r23
@N0702: r24 ;from: (20r)
@N0703: r25 ;from: (23r)
@N0704: r26
@N0705: r27
@N0706: r28
@N0707: r29 ;from: (5r)
@N0710: r30
@N0711: r31
@N0712: r32     ;from: (13r)
@N0713: r33     ;from: (31r)
@N0714: r34
@N0715: r35
@N0716: r36 ;from: 7r
@N0717: r37
@N0720: r0      equals   ;from:
@N0721: r1
@N0722: r2
@N0723: r3
@N0724: r4
@N0725: r5   plus   ;from:
@N0726: r6
@N0727: r7
@N0730: r8
@N0731: r9
@N0732: r10  minus  ;from:
@N0733: r11
@N0734: r12
@N0735: r13
@N0736: r14
@N0737: r15  exponent ;from:
@N0740: r16
@N0741: r17
@N0742: r18
@N0743: r19
@N0744: r20
@N0745: r21
@N0746: r22
@N0747: r23
@N0750: r24
@N0751: r25
@N0752: r26
@N0753: r27
@N0754: r28
@N0755: r29
@N0756: r30
@N0757: r31
@N0760: r32
@N0761: r33
@N0762: r34
@N0763: r35
@N0764: r36
@N0765: r37
@N0766: r38
@N0767: r39
@N0770: r40 ;-|n| counter
@N0771: r41 ;- temporary sum storage for arithmetic
@N0772: r42 ;-
@N0773: r0 ;- plant address of 1st
@N0774: r1 ;- character to be printed
@N0775: r2
@N0776: r3
@N0777: r4
@N1000: r5
@N1001: r6 ;- If next symbol is an sp order carry it out.
@N1002: r7 ; Since symbols to be printed are stored as
@N1003: r8 ;- "mr x,mr y," etc. the "mr" actuates this xxx [?]
@N1004: r9 ;-
@N1005: r10 ; form and print first letter
@N1006: r11 ;-
@N1007: r12
@N1010: r13  ;  (0.22000 - "=")
@N1011: r14
@N1012: r15
@N1013: r16 ;- print number
@N1014: r17 (24,6)print routine [i.e., floating point format]
@N1015: r18 ;-
@N1016: r0
@N1017: r1 ;- set g[?] to sp 2a1 and reset
@N1020: r2 ;
@N1021: r3 ;-
@N1022: r4 ;- set P to sp 2a2 (and reset)
@N1023: r5 ;
@N1024: r6 ;-
@N1025: r7 ;- set . to sp 8a2 (and reset)
@N1026: r8 ;
@N1027: r9 ;-
@N1030: r10
@N1031: r11
@N1032: r12
@N1524: 00       Set address of 1st                 ; from Enter
@N1525: 01       instruction to be interpreted
@N1526: 02       x1 Multiple
@N1527: 03       x1 register
@N1530: 04       y1 accumulator
@N1531: 05 *30   "ca"                               ; from 196r-->
@N1532: 06
@N1533: 07       "cs"                               ; from l3r,196r
@N1534: 08
@N1535: 09       "ad"                               ; from 196r-->
@N1536: what's p29??       ;10
@N1537: 11       "su"                               ; from 196r-->
@N1540: 12
@N1541: 13       "cm"                               ; from 196r-->
@N1542: l4       Temporary digits                   ; (170r)
@N1543: 15       Add two minor                      ; from 24r
@N1544: 16       products
@N1545: 17       Store
@N1546: 18       overflow
@N1547: 19       Form major product
@N1550: 20
@N1551: 21      "mr" Form two                      ; from 49r9,196r
@N1552: 22       minor products
@N1553: 23
@N1554: 24
@N1555: 25       "dv"                               ; from 196r-->
@N1556: 26
@N1557: 27       Form exponent
@N1560: 28       of 2**-2/x2
@N1561: 29
@N1562: 30
@N1563: 31       Form and
@N1564: 32       store
@N1565: 33  *2
@N1566: 34
@N1567: 35  *15
@N1570: 36
@N1571: 37       Form and store
@N1572: 38       2·2
@N1573: 39  *15           2
@N1574: 40
@N1575: 41       Form
@N1576: 42       x**-2/x2**2
@N1577: 43 *15      ( Use Euclid ' s
@N1600: 44       algorithm)
@N1601: 45
@N1602: 46
@N1603: 47 *15
@N1604: 48       Add two minor parts
@N1605: 49       of reciprocal
@N1606: 50    WAS p1
@N1607: 51    "ts"                            ??
@N1610: 52    complement x1                   ??
@N1611: 53
@N1612: 54    WAS p2
@N1613: 55    "ta" Store digits               ; from 196r-->
@N1614: 56      in indicated                  ; from {181r) @@WrittenBy r181
@N1615: 57      address
@N1616: 58    Increase xl                     ; from 119r-->
@N1617: 59     by 2**-15
@N1620: 60
@N1621: 61    "ex"                            ; from 196r-->
@N1622: 62    WAS p63
@N1623: 63     "cp" Is x1 negative?           ; from 196r-->
@N1624: 64
@N1625: 65     "sp" Set Return address        ; from 196r
@N1626: 66       for spax
@N1627: 67      Set  pick up order  ; LAST DIGIT is a GUESS!
@N1630: 68       for ordinary cp & sp
@N1631: 69      PROBABLY an SU op code!
@N1632: 70      Test to see whether
@N1633: 71       instruction is spax
@N1634: 72
@N1635: 73      Round off X1' and             ; from 51r,61r->
@N1636: 74        store x1' x 2**-6
@N1637: 75
@N1640: 76    *9  Add round-off carry
@N1641: 77         into x1
@N1642: 78
@N1643: 79       Is there an overnow?
@N1644: 80
@N1645: 81
@N1646: 82
@N1647: 83      Add cverflow                     ; from  80r->
@N1650: 84      into x1 and x1'
@N1651: 85      increase y1
@N1652: 86                                       ; from  82r->
@N1653: 87      |y1| - 63 > 0?
@N1654: 88
@N1655: 89      y <= 0? 0?
@N1656: 90       (i.e.  y1 < -63?)
@N1657: 91
@N1660: 92      Set y1  -63
@N1661: 93      ts n + k                        ; from 88r->
@N1662: 94      or ex n + k
@N1663: 95      Store ts, ex, ca, cs or cm n+   ; from 8r->
@N1664: 96
@N1665: 97       WAS P0                         ; from (180r)
@N1666: 98       Perform
@N1667: 99    *9   ts, ex, ca, cs or cm n+k
@N1670: 100
@N1671: 101   *9
@N1672: 102      WAS (p0)                         (95r)
@N1673: 103   *9
@N1674: 104
@N1675: 105
@N1676: 106   *15
@N1677: 107
@N1700: 108
@N1701: 109                                       166r->
@N1702: 110      x1 != 0?
@N1703: 111
@N1704: ll2
@N1705: 113      x1' != 0?
@N1706: ll4
@N1707: 115      Form
@N1710: 116      |x1'| - 1  ; PROBABLY AD op cpde
@N1711: 117
@N1712: l18      x1 > 0?
@N1713: 119
@N1714: 120      Form
@N1715: 121      x1 - 2**-15
@N1716: l22      complement x1'                    114r->
@N1717: 123
@N1720: 124      Form x1*x1'
@N1721: 125
@N1722: l26      Complement                        12r->
@N1723: 127        x2, x2'
@N1724: 128
@N1725: 129      Form and store                    r9 ->
@N1726: 130       y2 - yl
@N1727: 131
@N1730: 132       y2 - y1 > 0?
@N1731: 133
@N1732: 134       Interchange
@N1733: 135        (x1, x1', y1)
@N1734: 136         and (x2, x2', y2)
@N1735: 137
@N1736: 138
@N1737: 139
@N1740: 140
@N1741: 141                                        132r->
@N1742: 142       |y2 - y1| - 29 > 0?
@N1743: 143
@N1744: 144       No need for addition
@N1745: l45       Store                            143r->
@N1746: 146         sr *1 +|y2 - y1|
@N1747: 147          Set y2 = l
@N1750: 148
@N1751: 149   *15   Form and store
@N1752: 150         (
@N1753: 151       WAS (p0)                         (146r)
@N1754: 152
@N1755: 153   *15
@N1756: 154
@N1757: 155   *15   Form
@N1760: 156         (x1+x1' * 2**-15) * 2**-l
@N1761: 157   *1
@N1762: 158        Store x1                          20r->
@N1763: 159   *15
@N1764: 160
@N1765: 161           Add x1, x1'
@N1766: 162             and x2, x2'
@N1767: 163
@N1770: 164                                          53r->
@N1771: 165        Does sign x1= sign x1'?
@N1772: l66                                         125r->
@N1773: l67        Scale factor and                  59r->
@N1774: 168   *15    store x1, x1'
@N1775: 169
@N1776: 170
@N1777: 171
@N2000: 172   *15
@N2001: 173
@N2002: 174        Form exponent
@N2003: 175
@N2004: 176
@N2005: 177                                         108r->
@N2006: 178      increase address
@N2007: 179      Pick up next instruction
@N2010: 180      Store instruction
@N2011: 181      and digits
@N2012: 182
@N2013: 183
@N2014: 184
@N2015: 185  *27    Form sp to address
@N2016: 186  *17    for particular
@N2017: 187      instruction
@N2020: 188
@N2021: 189      Pick up x2, x2' and y2    ; (182r)
@N2022: 190      store x2 in reg 198
@N2023: 191        y2 in reg 102           ; (181r)
@N2024: 192  *9      Hold x2' in AC
@N2025: 193
@N2026: 194
@N2027: 195  *15
@N2030: l96         Go to part of I.S. for ; (188r)
@N2031: 197  what's this?? pe x2 ??  ;          particular instruction
@N2032: 198         Separation parameter
@N2033: l99                                ; from 70r-->
@N2034: 200      ??   Does address equal ax?
@N2035: 201      Return to register following spax   ; (66r)
@N2036: 202         Produce overflow   ; from 90r
@N2037: 203         alarm
