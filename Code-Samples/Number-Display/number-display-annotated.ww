

; Annotated "Number Display" paper tape
; g fedorkow, Sep 2023
; This program must have been a demo, or someone showing off...  It displays a number in four formats, using
; 3x5 dot-matrix characters, on the main CRT
; First line is binary, second is octal, third is decimal and fourth is sort-of Hex, but with an unusual letter
; sequence instead of A-F for 10-15
; The number to be displayed is found in 


                        .dbwgt number_to_display   ; show the starting number for the display loop
                        ; .dbwgt .CORE_SIZE  ; test for python-labels  ; Delete Me
                        
                        .org 0o0000    ;  
@0000:000000     w0000: .word 0         ;  @@WrittenBy i0067 ReadBy a0050 a0063 i0067 print_line a0110 w0125 a0162 r0253 i0254 a0257 r0610 
@0001:000001     i0001: .word 1         ;  
@0002:000000     number_to_display: .word 0         ;  @@WrittenBy r0041 a0161 ReadBy a0072 a0161 
@0003:000000     w0003: .word 0         ;  @@WrittenBy a0043 ReadBy i0056 


                        .org 0o0040    ;  
                        ; Initialize
@0040:100200     i0040: ca   r0200     ; load constant 0o12 into AC @@JumpedToBy a0172 
@0041:040002     r0041: ts   number_to_display     ; Store it in a FF Reg @@ReadBy a0261 
@0042:100201            ca   r0201     ; load constant 0o140510 into AC 
@0043:040003            ts   w0003     ; transfer to storage (FF reg 03?) 
@0044:100202            ca   n_screen_refresh  ; load constant 0o310 into AC 
@0045:040600            ts   u0600     ; transfer to storage 
@0046:100203            ca   n_new_screens  ; load constant 0o226 into AC 
@0047:040601            ts   u0601     ; store in @0o601 
@0050:100000            ca   w0000     ; clear AC 
@0051:040602            ts   u0602     ; store 0 in @0o602 
@0052:104601            cs   u0601     ;  
@0053:040505            ts   new_display_cnt  ; store -0o226 into a repetition count 

                        ; ************* Start of Update the message on the screen loop (I think)
@0054:104600     i0054: cs   u0600     ; clear and subtract @@JumpedToBy a0166 a0170 
						.print "calc_ Draw Screen u0600=%o, u0601=%o, u0602=%o disp_num=%o u0502=%o u0503=%o screen_rep_cnt=%o w0003=%o", u0600, u0601, u0602, disp_num, u0502, u0503, screen_rep_cnt, w0003
@0055:040504            ts   screen_rep_cnt  ; transfer to storage 

                        ; ************* Start of Draw One Screen loop ******************
@0056:100003     i0056: ca   w0003     ; clear and add @@JumpedToBy a0156 a0160 
@0057:040503            ts   u0503     ; transfer to storage 
@0060:100253            ca   r0253     ; clear and add 
@0061:040506     i0061: ts   chr_ypos  ;  @@JumpedToBy a0175 
@0062:100503            ca   u0503     ; clear and add 
@0063:114000            su   w0000     ; subtract zero, i.e., prepare to branch on +0 or negative. 
@0064:070254            cp   i0254     ; conditional program 

@0065:171033     r0065: clh  0o033     ; cycle left and hold 
@0066:040503            ts   u0503     ; transfer to storage 

@0067:064000     i0067: ex   w0000     ; exchange @@JumpedToBy a0263 
@0070:164117            sf   w0117     ; scale factor ; overwrite an SLH shift instruction operand @117 with a small number 
                        ; (note that action wipes out the 0o1000 bit in the instruction)
@0071:040500            ts   u0500     ; -- and store the resulting scaled number in u0500 
@0072:100002            ca   number_to_display     ; load a constant 0o12 from a FF reg 
@0073:040501            ts   disp_num   ; store an initial 'number' for the next row of chars 
@0074:100252            ca   r0252     ; load a constant = instruction  'slh 0o024' 
@0075:114117            su   w0117     ; this subtracts 0o24 from the shift count calulated in @0o70 
                        ; (note that shift instructions are effectively negative, so the effect is 24-22, not 22-24)
                        ; But the subtract operation also picks up the 1000 bit again, so the answer is, e.g. 1002
@0076:044117            td   w0117     ; transfer digits -- store the result back on top of that SLH shift instruction @117 
                        ; (retaining the 'hold' bit...  sheesh)
@0077:044114            td   w0114     ; transfer digits - save the same result on top of an SRH 
@0100:104610            cs   r0610     ; clear and subtract 
@0101:040507            ts   chr_xpos  ; character x pos is the starting param to the next loop 


                        ; ************* Start of next-to-Inner-Loop; print one line of characters **************
                        ; this loop prints characters all with the same y position, moving xpos from right to left
                        ; The loop terminates when the 'disp_num' is decremented to zero.  
@0102:100000  print_line: ca   w0000     ; clear AC @@JumpedToBy a0151 
@0103:040510            ts   u0510     ; initialize this var to zero before starting the inner loop 
@0104:100507            ca   chr_xpos  ; fetch the last chr_xpos 
@0105:114205            su   x_chr_spacing  ; subtract constant 0o010000, i.e., move 0o010000 screen units left 
@0106:040507            ts   chr_xpos  ; store the new x base address for the character 

@0107:100501            ca   disp_num   ; check the count of remaining characters 
@0110:114000            su   w0000     ; subtract +zero ; this converts +0 into -0 (!) 
                        ; i.e., exit the loop on zero
@0111:070173            cp   nxt_line  ; conditional program 

                        ; Starting here, the AC still contains the 'disp_num'
                        ; The other inputs are the shift offset in w0114 and w0117 (which I think have the same shift count)
                        ; and the divisor in u0500, which I think is always 0o040000 for binary, octal or hex or 0o050000 for decimal
                        ; Net result is that the bits in AC end up in BR multiplied by four (or more for 0o050000)
                        ; the subsequent shift by 15 places to the left effectively gets the same number back into
                        ; AC, but multiplied by two (and perhaps with the last bit truncated)
                        ; So AC=0o12 -> AC=0, BR=0o50 -> AC=0o24
                        ; The disp_num is shifted right at least once for each character printed, e.g. 0o12->5->2->1->0
                        ; "Divide by 1/2 is multiply by two", i.e., 0o040000 = 1/2

                        .print "calc_char input: acc=%ao disp_num=%o w0114=%o u0500=%o", disp_num, w0114, u0500
@0112:150500  calc_char: dv   u0500     ; start the calc to find next char (u0500 is always 0o050000 or 0o040000) 
@0113:154017            slr  0o017     ; shift left and roundoff; this puts the multiplied-by-two-but-truncated result in the AC 
@0114:161000     w0114: srh  00000     ; shift right and hold, i.e., divide by two @@WrittenBy a0077 
@0115:040502            ts   u0502     ; save the result; e.g. on the first pass, this will be '5' 
@0116:144500            mh   u0500     ; multiply and hold; u0500 would still be 0o050000 or 0o040000 
@0117:155000     w0117: slh  00000     ; This shift is the reverse of the one in w0114; @@WrittenBy a0070 a0076 ReadBy a0075 
                        ; the following two echanges put AC in u0502, and the old u0502 in disp_num, and the old disp_num in AC
@0120:064502            ex   u0502     ; exchange 
@0121:064501            ex   disp_num   ; exchange; adjust the 'remaining' character count 
@0122:114502            su   u0502     ; subtract x from AC, i.e. the AC figured two-instructions-ago from the current AC; this must be the character offset in the chr table 
                        ; the next three instructions effectively index into the character table and find the bitmap for the character
                        .print "calc_char output offset=%ad (d)"
@0123:110206            ad   chr_tab   ; add the start address of the character table 
@0124:044125            td   w0125     ; transfer digits ; overwrite the next instruction with an addresss into the char table 
@0125:100000     w0125: ca   w0000     ; load next char to draw into AC @@WrittenBy a0124 


                        ; ************* Here begins the inner loop that draws one character ****************
                        ; Upon entry, the AC contains a bit-map of the character to be drawn, stored as five 3-bit values (I think)

                        ; Reminder on SF: sf doubles the contents of AC and BR often enough to make the results
                        ; greater than or equal to positive 1/2.
                        ; The number of shifts is counted and stored in the last 11 digits of the operand address,
                        ; without disturbing the top five bits in that word (i.e., it's meant to compute, e.g. a new shift instruction)
                        ; The result of all the shifting remains in AC and BR.
@0126:164207  draw_chr: sf   w0207     ; scale factor; w0207 is initialized to zero, so the upper bits will stay zero @@JumpedToBy a0152 
@0127:114210            su   r0210     ; subtract a constant: ts  w0000 = .word 0o040000, eliminating Bit 1 (first bit after the sign bit) 
@0130:040511            ts   u0511     ; ... and store the remaining bits in  u0511 
@0131:100207            ca   w0207     ; Fetch the shift-count again, i.e., a small number from 0-31 
@0132:110510            ad   u0510     ; initialized to zero just before starting the inner loop, adjusted once per pass of this inner loop 
@0133:040510            ts   u0510     ; store whatever was in u0510 plus the shift count 
@0134:144211            mh   r0211     ; multiply and hold -- constant .word=0o025253 (binary 0 010 101 010 101 011 
@0135:040512            ts   u0512     ; store an intermediate result in computing the Y position 
@0136:144212            mh   r0212     ; multiply and hold by constant .word=0o177774 
@0137:155017            slh  0o017     ; shift left and hold  ; shift 15 decimal bits left 
@0140:110510            ad   u0510     ; add 
@0141:154012            slr  0o012     ; shift left 10 places to make a screen address 
@0142:110507            ad   chr_xpos  ; add the character's base xpos 
@0143:040276            ts   dot_xpos  ; Store the xpos for the next dot 
@0144:100512            ca   u0512     ;  
@0145:154012            slr  0o012     ; shift left 10 places to make a screen address 
@0146:110506            ad   chr_ypos  ; add the character's base ypos to make ypos 
                        ; do_dot is called with ypos in the ACC, dot_xpos in @276
@0147:074300            sp   do_dot    ; call the routine to display a dot on the screen 

@0150:100511     i0150: ca   u0511     ; recover the remaining bits @@JumpedToBy a0305 
@0151:070102            cp   print_line  ; .. and exit the loop if negative 

@0152:074126            sp   draw_chr  ; sub-program 
                        ; ************** Here ends the inner loop *****************



@0153:064600     i0153: ex   u0600     ; exchange @@JumpedToBy a0255 
@0154:064600            ex   u0600     ; exchange 
@0155:070157            cp   i0157     ; conditional program 

@0156:074056            sp   i0056     ; sub-program 

@0157:130504     i0157: ao   screen_rep_cnt  ; add one @@JumpedToBy a0155 
@0160:070056            cp   i0056     ; conditional program 

@0161:130002            ao   number_to_display     ; add one 
@0162:104000            cs   w0000     ; clear and subtract 
@0163:064601            ex   u0601     ; exchange 
@0164:064601            ex   u0601     ; exchange 
@0165:070167            cp   i0167     ; conditional program 

@0166:074054            sp   i0054     ; sub-program 

                        ; increment the counter of new displays, and do it again
                        ; Halt when the counter is exhausted
@0167:130505     i0167: ao   new_display_cnt  ; add one @@JumpedToBy a0165 
@0170:070054            cp   i0054     ; conditional program 

@0171:000000            si   0000      ; Halt after the rep count is exhausted 

@0172:074040            sp   i0040     ; sub-program 

                        ; advance to the next line of text on a screen refresh
@0173:100506  nxt_line: ca   chr_ypos  ; advance y_pos to next line @@JumpedToBy a0111 
@0174:114204            su   y_line_spacing  ; subtract 
@0175:074061            sp   i0061     ; sub-program 


                        ; I am *totaly sure* (for now) that this is a block of constants (but not sure how long!)
@0176:000000            .word 0         ;  
@0177:000000     r0177: .word 0         ;  
@0200:000012     r0200: .word 0o12      ;  @@ReadBy i0040 
@0201:140510     r0201: .word 0o140510  ;  @@ReadBy a0042 
@0202:000012  n_screen_refresh: .word 0o12      ; was .word 0o000310 ; number of times to refresh one specific display pattern    ; @@ReadBy a0044 
@0203:000226  n_new_screens: .word 0o000226  ; number of new screen patterns before exit     ; @@ReadBy a0046 
@0204:030000  y_line_spacing: .word 0o030000  ;  @@ReadBy a0174 
@0205:010000  x_chr_spacing: .word 0o010000  ;  @@ReadBy a0105 
@0206:000213   chr_tab: .word chr_0     ; pointer to the base of the char table @@ReadBy a0123 
@0207:000000     w0207: .word 0         ;  @@WrittenBy draw_chr ReadBy a0131 
@0210:040000     r0210: .word 0o040000  ; transfer to storage @@ReadBy a0127 
@0211:025253     r0211: .word 0o025253  ; constant used by point-drawing routine @@ReadBy a0134 
@0212:177774     r0212: .word 0o177774  ; constant used by point-drawing routine @@ReadBy a0136 


                        ;  Character Table
                        ;  Characters are expressed as a 3x5 matrix in 15 bits of a word
                        ;  The first triplet on the left of the word gives the bottom three pixels of the character;
                        ;  The last triplet on the right gives the top three
                        ;  The table is (probably) 31 characters long
@0213:075557     chr_0: .word 0o075557  ; Bitmap for character Zero 
@0214:072262     chr_1: .word 0o072262  ; Bitmap for character One 
@0215:074217     chr_2: .word 0o074217  ; Bitmap for character Two 
@0216:061216     chr_3: .word 0o061216  ; Bitmap for character Three 
@0217:011755     chr_4: .word 0o011755  ; Bitmap for character Four 
@0220:061647     chr_5: .word 0o061647  ; Bitmap for character Five 
@0221:075747     chr_6: .word 0o075747  ; Bitmap for character Six 
@0222:022217     chr_7: .word 0o022217  ; Bitmap for character Seven 
@0223:075757     chr_8: .word 0o075757  ; Bitmap for character Eight 
@0224:071757     chr_9: .word 0o071757  ; Bitmap for character Nine 

@0225:022227     chr_T: .word 0o022227  ; Bitmap for character 'T' 
@0226:074747     chr_E: .word 0o074747  ; Bitmap for character 'E' 
@0227:074444     chr_L: .word 0o074444  ; Bitmap for character 'L' 
@0230:055755     chr_H: .word 0o055755  ; Bitmap for character 'H' 
@0231:044747    chr_xx: .word 0o044747  ; Bitmap for character ? 
@0232:074447     xchr_E:.word 0o074447  ; ????
@0233:055757     chr_A: .word 0o055757  ;  
@0234:056656     chr_R: .word 0o056656  ; Bitmap for character 'R' 
@0235:072227     chr_I: .word 0o072227  ;  
@0236:061243     chr_S: .word 0o061243  ;  
@0237:065556     chr_D: .word 0o065556  ;  
@0240:044656     chr_P: .word 0o044656  ;  
@0241:075111            sp   0o1111    ; sub-program 
@0242:065656            ex   0o1656    ; exchange 
@0243:075555            sp   0o1555    ; sub-program 
@0244:022255            bo   0o2255    ; block transfer out 
@0245:055665            ck   0o1665    ; check 
@0246:044457            td   0o0457    ; transfer digits 
@0247:011157            bi   0o1157    ; block transfer in 
@0250:072222            cp   0o2222    ; conditional program 
@0251:075257            sp   0o1257    ; sub-program 

@0252:155024     r0252: .word 0o155024     ; shift left and hold @@ReadBy a0074 
@0253:054000     r0253: .word 0o054000     ;  @@ReadBy a0060 

                        ; [these seem to be 'real' instructions again...]
@0254:134000     i0254: dm   w0000     ; difference of magnitudes @@JumpedToBy a0064 
@0255:070153            cp   i0153     ; conditional program 

@0256:110610            ad   r0610     ; add 
@0257:134000            dm   w0000     ; difference of magnitudes 
@0260:040503            ts   u0503     ; transfer to storage 
@0261:100041            ca   r0041     ; clear and add 
@0262:171033            clh  0o033     ; cycle left and hold 
@0263:074067            sp   i0067     ; sub-program 


                        ; kinda-subroutine to display a point on the CRT
                        .org 0o0276    ;  
@0276:000000  dot_xpos: .word 0         ;  @@WrittenBy a0143 ReadBy a0302 
@0277:000000    acctmp: .word 0         ; ad-hoc temp storage for the ACC @@WrittenBy do_dot ReadBy a0304 
                        .org 0o0300    ;  
                        ; To display a point, the ypos (vertical) is set from the ACC contents when SI is called,
                        ; xpos (horizontal) is set from ACC when RC is called
                        ; This routine is called with ypos in the ACC, dot_xpos in @276
@0300:040277    do_dot: ts   acctmp    ; save the AC @@JumpedToBy a0147 
@0301:000600            si   0o600     ; select I/O: Device Display Points base=500, mask=7 
@0302:100276            ca   dot_xpos  ; clear and add 
@0303:024000            rc   0         ; record 
@0304:100277            ca   acctmp    ; clear and add 
@0305:074150            sp   i0150     ; return to the only caller 

                        ; There's an uninitialized data block in locations  u0500 -> 0o512 inclusive
                        ; By adding labels, I can get the tools to indicate who reads and writes what...
                        .org 0o500     ;  
@0500:000000     u0500: .word 0         ;  @@WrittenBy a0071 ReadBy calc_char a0116 
@0501:000000   disp_num: .word 0         ;  @@WrittenBy a0073 a0121 ReadBy a0107 a0121 
@0502:000000     u0502: .word 0         ;  @@WrittenBy a0115 a0120 ReadBy a0120 a0122 
@0503:000000     u0503: .word 0         ;  @@WrittenBy a0057 a0066 a0260 ReadBy a0062 
@0504:000000  screen_rep_cnt: .word 0         ;  @@WrittenBy a0055 i0157 ReadBy i0157 
@0505:000000  new_display_cnt: .word 0         ;  @@WrittenBy a0053 i0167 ReadBy i0167 
@0506:000000  chr_ypos: .word 0         ;  @@WrittenBy i0061 ReadBy a0146 nxt_line 
@0507:000000  chr_xpos: .word 0         ;  @@WrittenBy a0101 a0106 ReadBy a0104 a0142 
@0510:000000     u0510: .word 0         ;  @@WrittenBy a0103 a0133 ReadBy a0132 a0140 
@0511:000000     u0511: .word 0         ; this is simply scratch storage inside the inner loop @@WrittenBy a0130 ReadBy i0150 
@0512:000000     u0512: .word 0         ;  @@WrittenBy a0135 ReadBy a0144 

                        .org 0o0600    ;  
@0600:000000     u0600: .word 0         ;  @@WrittenBy a0045 i0153 a0154 ReadBy i0054 i0153 a0154 
@0601:000000     u0601: .word 0         ;  @@WrittenBy a0047 a0163 a0164 ReadBy a0052 a0163 a0164 
@0602:000000     u0602: .word 0         ;  @@WrittenBy a0051 
                        .org 0o0610    ;  
@0610:100000     r0610: ca   w0000     ; clear and add @@ReadBy a0100 a0256 
                        .jumpto 0o040     ;  
                        .ww_file "102766750_fb131-0-2692_number_display.7c"  ;  
                        .ww_tapeid "fbl3l-0-2692"  ;  
