
; *** Core Image ***
%File: 102766755_fb131-97-6_patterson-t4.7ch
%TapeID: fc TAPE 131-97-56 PATTERSON
%JumpTo 0o170
%Switch: LeftInterventionReg  0o000100
%Switch: RightInterventionReg  0o040000
%Switch: FlipFlopPreset02  0o000010
%Switch: FlipFlopPreset03  0o070000
@C0000: 0000000 0000001 0000010 0070000  None    None    None    None   
@C0040: 0000336 0000336 0014000 0040142 0100142 0114001 0114001 0040143 
@C0050: 0100142 0164000 0050060 0040150 0130060 0130060 0100147 0150150 
@C0060: 0154000 0040151 0100001 0040144 0000010 0100152 0040153 0100145 
@C0070: 0110144 0044130 0044115 0044116 0044122 0044123 0044133 0110001 
@C0100: 0044117 0100145 0110142 0110144 0044121 0044131 0114001 0044114 
@C0110: 0100153 0024000 0110151 0040153 0100000 0114000 0114000 0110000 
@C0120: 0144003 0114000 0110000 0110000 0040146 0144002 0154014 0000600 
@C0130: 0100000 0040000 0100146 0040000 0100144 0110001 0040144 0114143 
@C0140: 0070067 0074062 0000400 0000000 0000000 0000620 0000000 0037760 
@C0150: 0000000 0000000 0100037 0100037  None    None    None    None   
@C0170: 0000336 0014000 0040240 0100243 0040230 0110240 0040231 0114001 
@C0200: 0114001 0040244 0100240 0164212 0040241 0000337 0014000 0160001 
@C0210: 0150241 0155001 0155000 0064240 0144240 0155017 0040241 0100240 
@C0220: 0155001 0040240 0104241 0040242 0100242 0110240 0040242 0134241 
@C0230: 0040621 0040711 0130231 0130230 0114244 0070224 0074040 0074041 
@C0240: 0000000 0000000 0000000 0040621 0040707  None    None    None   
@C0620: 0000000  None    None    None    None    None    None    None   
@S0002: scope_amp
@S0003: elastic
@S0040: c1
@S0060: d1
@S0062: oloop
@S0067: dloop
@S0114: a2
@S0115: a3
@S0116: a4
@S0117: a5
@S0121: a6
@S0122: a7
@S0123: a8
@S0130: a9
@S0131: a10
@S0133: a11
@S0142: t1
@S0143: t2
@S0144: loop_cnt
@S0145: t3
@S0146: t6
@S0147: s1
@S0150: s2
@S0151: s3
@S0152: x_start
@S0153: x_axis
@S0620: r1
@S0170: 0r
@S0224: loop
@S0230: lpstor1
@S0231: lpstor2
@S0240: incr
@S0241: npts_norm
@S0242: y_offset
@S0243: data_strt
@S0244: data_end
@N0002: Flip Flop 2
@N0003: Flip Flop 3
@N0040: Red ; was FOUR; si 4 clears indicator-light-panel four
@N0042: read number of points - 0o400
@N0047: store n_pts -2 in T2
@N0050: re-fetch n_pts
@N0051: normalize n_pts
@N0052: and save the shift count in the *Instruction* at D1
@N0053: save normalized n_pts in S2
@N0054: increment the shift count *instruction* of n_pts by two
@N0055: with the effect of dividing the number by four
@N0056: fetch constant S2 = 0.37760
@N0057: divide contents of AC by npts_norm, result in BR; 0.37760 / 0.4 = almost 1.0
@N0060: Red ;Shift by eight bits *and round off* --> 0o400
@N0062: Red; Outer display loop;  Fetch a One
@N0063: T2+1 must contain a loop counter; initialize it to One
@N0064: Reset Flip Flop Registers to default from switches
@N0065: fetch constant 1.00037
@N0066: and initialize x_axis (was label s5)
@N0067: Red; Inner Display Loop; pick up addr of start of Data segment 0o621
@N0070: add the loop counter
@N0071: overwrite the address in @0o130 CA instruction
@N0072: and the @0o115 SU instruction
@N0073: and the @0o116 SU instruction
@N0074: and the @0o122 AD instruction
@N0075: and the @0o123 AD instruction
@N0076: and the @0o133 TS instruction
@N0077: Move the address pointer to the next word
@N0100: and overwrite the @0o117 AD instruction
@N0101: pick up addr of start of Data segment 0o621 (again)
@N0102: add the number of points, i.e. compute the start of the second copy of the data seg
@N0103: add the loop counter
@N0104: Overwrite the address of @0o121 SU
@N0105: and @0o131 TS
@N0106: Move to address pointer to the previous point in the second copy of the data seg
@N0107: Overwrite @0o114 CA
@N0110: pick up the recent copy of what started as 1.00037 = -0.77740, i.e., left edge of screen
@N0111: Display to Scope: the horizontal axis setting is in AC[0:9]
@N0112: add 0o400; I think we're stepping across the screen's x-axis
@N0113: update the new x-axis
@N0114: previous point on second data array (x-1, current)
@N0115: Subtract Twice: current word in first data array
@N0116: current word in first data array
@N0117: Add the next word in the first data array (x+1, current)
@N0120: Reduce the sum a bit Elasticity Factor; default 0.70000
@N0121: subtract the current word in the second data array (x, old)
@N0122: add current
@N0123: add current
@N0124: save the result in temp t6
@N0125: Scope Amplitude, default 0o10
@N0127: Select Display Points ; the vertical axis setting is in AC[0:9]
@N0130: Fetch current point in first data array
@N0131: Save it on the current point of the second array
@N0132: retrieve the current point from T6
@N0133: Store the new value in the current point of the first array
@N0134: Increment the loop counter
@N0136: and save it back
@N0137: subtract the total number of points from the current count to test for end of loop
@N0152: way on the left edge of the screen
@N0154: start of the data segment
@N0171: fetch the number of points
@N0173: load a ts instruction pointing to the data area
@N0174: store in the loop
@N0175: @5r add the number of points to the data area pointer
@N0176: AC now contains a pointer to the start of the second data area
@N0200: subtract two from the address
@N0202: 10r re-fetch the number of points in the sim.
@N0203: WAS 118; Change to 138 ;this SF appears to write its result to unused location 118; AC=0.40000 and AR=6
@N0204: Here's the number of points, normalized to 1.0 > x > 0.4 octal
@N0205: select intervention register
@N0206: fetch the magnitude of string displacement 0.40000 from switches
@N0207: @15r  divide by two, -> 0.20000
@N0210: divide contents of AC by npts_norm, result in BR;
@N0211: - puts 0o01 in AC
@N0212: ?? what's with this??  (WAS ZERO)
@N0213: this puts 1 in the incr location, and 400 in the AC
@N0214: 20r ; multiply 0.00001 times 0.00400 = 0.00000 0.01000
@N0215: AC=0o400
@N0220: double the increment value; now it's TWO
@N0221: @25r ; save the increment step size
@N0223: initialize the y-offset to the negative of the number of points = -0o400
@N0224: fetch the last y-axis offset
@N0225: add the increment
@N0226: @30r  ; save the result for next loop
@N0227: |AC| - |x|, i.e., |yoffset| - |npts_norm|
@N0233: @35r
@N0236: spliced by guy
@N0240: @40r
@N0620: so is this supposed to be 400 or 401??
@N0621: pass through the loop, but it seems to be used for a few things along the way
